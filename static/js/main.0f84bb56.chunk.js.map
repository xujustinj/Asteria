{"version":3,"sources":["asteria42/Table.tsx","Form.tsx","diffable/expression.ts","diffable/variable.ts","diffable/operations.ts","neuro/activation.ts","neuro/error.ts","neuro/parameters.ts","neuro/neurons.ts","neuro/matrices.ts","neuro/layers.ts","neuro/network.ts","asteria42/Network42.ts","asteria42/Asteria42.tsx","asteriaNAND/Table.tsx","asteriaNAND/NetworkNAND.ts","asteriaNAND/AsteriaNAND.tsx","asteriaXOR/Table.tsx","asteriaXOR/NetworkXOR.ts","asteriaXOR/AsteriaXOR.tsx","App.tsx","index.tsx"],"names":["TableHeader","TableBody","props","rows","data","map","row","index","m","b","r","key","reverse","Table","Form","state","handleSubmit","handleChange","event","target","name","value","setState","submitForm","samples","sensitivity","friction","generations","this","type","isFinite","min","onChange","onClick","Component","Expression","_value","NaN","_deriv","Map","valueImpl","v","has","set","derivImpl","get","clear","ExprUnary","arg","ExprBinary","left","right","ExprVariadic","terms","Variable","val","BinProduct","deriv","print","VarSum","reduce","acc","t","join","positive","x","Number","MIN_VALUE","product","y","xy","Math","sign","ActivationLogistic","exp","d","isSymmetric","ActivationSoftplus","log","ErrorSquared","diff","Parameter","adjustments","velocity","err","push","studyImpl","length","adjustment","learnImpl","Weight","n","weight","w","count","bind","reset","Bias","error","Neuron","InputNeuron","TrainableNeuron","Act","weights","bias","sum","c","getExpr","parentIndex","forEach","study","learn","HiddenNeuron","OutputNeuron","Err","getErr","standardBasis","dim","basis","Array","i","fill","standardHalfCube","last","vectors","srd","sqrt","blockSize","concat","j","orthoVectors","full","half","orthoFullBasis","orthoHalfBasis","transpose","randomRotate","slice","matrix","width","column","a","multiply","aHeight","bHeight","bWidth","k","randomRotation","random","rotations","rotation","Layer","InputLayer","neurons","names","from","values","node","vals","TrainableLayer","HiddenLayer","parent","size","parentNeurons","weightVectors","childIndex","getWeight","getBias","OutputLayer","childName","Network","inputLayer","hiddenLayers","outputLayer","studied","source","input","output","inputNames","keys","outputNames","hiddenSizes","valueErr","printErr","sample","layer","TestableNetwork","tests","Network42","cachedTests","sort","arr","console","Neuro","getOutputLayer","getOutput","Asteria42","net","train","undefined","rsq","className","readOnly","NetworkNAND","xNANDy","quarter","AsteriaNAND","NetworkXOR","xXORy","AsteriaXOR","avgErr","App","to","path","ReactDOM","render","document","getElementById"],"mappings":"8OAQA,SAASA,IACL,OACE,+BACE,4BACE,iCACA,iCACA,iCACA,mCAMV,SAASC,EAAUC,GACf,IAAMC,EAAOD,EAAME,KAAKC,KAAI,SAACC,EAAeC,GAAmB,IACnDC,EAAYF,EAAZE,EAAGC,EAASH,EAATG,EAAGC,EAAMJ,EAANI,EACd,OACE,wBAAIC,IAAKJ,GACP,4BAAKA,GACL,mCAAKC,QAAL,IAAKA,IAAK,IACV,mCAAKC,QAAL,IAAKA,IAAK,IACV,mCAAKC,QAAL,IAAKA,IAAK,QAGfE,UACH,OACI,+BAAQT,GAcDU,MAVf,SAAeX,GAA8B,IACjCE,EAASF,EAATE,KACR,OACE,+BACE,kBAACJ,EAAD,MACA,kBAACC,EAAD,CAAWG,KAAMA,MCsCVU,E,YAhEX,WAAYZ,GAAmB,IAAD,8BAC1B,4CAAMA,KAJVa,WAG8B,IAF9BC,kBAE8B,IAW9BC,aAAe,SAACC,GAAoD,IAAD,EACvCA,EAAMC,OAAtBC,EADuD,EACvDA,KAAMC,EADiD,EACjDA,MACd,EAAKC,SAAL,eAAiBF,EAAOC,KAbE,EAgB9BE,WAAa,WACR,EAAKrB,MAAcc,aAAa,EAAKD,QAftC,EAAKA,MAAQ,CACTS,QAAS,EACTC,YAAa,EACbC,SAAU,EACVC,YAAa,GAEjB,EAAKX,aAAgBd,EAAcc,aART,E,sEAoBpB,IAAD,EACoDY,KAAKb,MAAtDS,EADH,EACGA,QAASC,EADZ,EACYA,YAAaC,EADzB,EACyBA,SAAUC,EADnC,EACmCA,YACxC,OACE,8BACE,0CACA,2BACEE,KAAK,SACLT,KAAK,UACLC,MAAOS,SAASN,GAAWA,EAAU,GACrCO,IAAI,IACJC,SAAUJ,KAAKX,eACjB,6BAEA,8CACA,2BACEY,KAAK,SACLT,KAAK,cACLC,MAAOS,SAASL,GAAeA,EAAc,GAC7CO,SAAUJ,KAAKX,eACjB,6BAEA,2CACA,2BACEY,KAAK,SACLT,KAAK,WACLC,MAAOS,SAASJ,GAAYA,EAAW,GACvCM,SAAUJ,KAAKX,eACjB,6BAEA,8CACA,2BACEY,KAAK,SACLT,KAAK,cACLC,MAAOS,SAASH,GAAeA,EAAc,GAC7CI,IAAI,IACJC,SAAUJ,KAAKX,eACjB,6BAEA,2BAAOY,KAAK,SAASR,MAAM,QAAQY,QAASL,KAAKL,kB,GA9D1CW,aCVJC,E,iDACHC,OAAiBC,I,KASjBC,OAAS,IAAIC,I,oDAJjB,OAHKT,SAASF,KAAKQ,UACfR,KAAKQ,OAASR,KAAKY,aAEhBZ,KAAKQ,S,4BAKVK,GAIF,OAHKb,KAAKU,OAAOI,IAAID,IACjBb,KAAKU,OAAOK,IAAIF,EAAGb,KAAKgB,UAAUH,IAE/Bb,KAAKU,OAAOO,IAAIJ,K,8BAOvBb,KAAKQ,OAASC,IACdT,KAAKU,OAAOQ,Y,KAILC,E,YAGX,WAAYC,GAAsB,IAAD,8BAC7B,+CAHMA,SAEuB,EAE7B,EAAKA,IAAMA,EAFkB,E,2BAHJb,GASlBc,E,YAIX,WAAYC,EAAsBC,GAAwB,IAAD,8BACrD,+CAJMD,UAG+C,IAF/CC,WAE+C,EAErD,EAAKD,KAAOA,EACZ,EAAKC,MAAQA,EAHwC,E,2BAJ3BhB,GAWnBiB,E,YAGX,aAAyC,IAAD,uBACpC,+CAHMC,WAE8B,6BAAzBA,EAAyB,yBAAzBA,EAAyB,uBAEpC,EAAKA,MAAQA,EAFuB,E,2BAHRlB,GC/BrBmB,E,WAbX,WAAYlC,GAAgC,IAAlBmC,EAAiB,uDAAH,EAAG,yBAHnCnC,UAGmC,OAFnCmC,SAEmC,EACvC3B,KAAKR,KAAOA,EACZQ,KAAK2B,IAAMA,E,iDAGVA,GAAe3B,KAAK2B,IAAMA,I,8BAEb,OAAO3B,KAAK2B,M,4BACxBd,GAAuB,OAAQA,IAAMb,KAAQ,EAAI,I,8BAErC,OAAOA,KAAKR,S,KCb5BoC,E,oLAEE,OAAO5B,KAAKsB,KAAK7B,QAAUO,KAAKuB,MAAM9B,U,gCAGtBoB,GAGhB,OAFYb,KAAKsB,KAAKO,MAAMhB,GAAKb,KAAKuB,MAAM9B,QAChCO,KAAKsB,KAAK7B,QAAUO,KAAKuB,MAAMM,MAAMhB,K,8BAKjD,OAAOb,KAAKsB,KAAKQ,QAAU,MAAQ9B,KAAKuB,MAAMO,Y,GAZ7BT,GAgBnBU,E,oLAEE,OAAO/B,KAAKyB,MAAMO,QAAO,SAACC,EAAKC,GAAN,OAAYD,EAAMC,EAAEzC,UAAS,K,gCAGtCoB,GAChB,OAAOb,KAAKyB,MAAMO,QAAO,SAACC,EAAKC,GAAN,OAAYD,EAAMC,EAAEL,MAAMhB,KAAI,K,8BAIvD,MAAO,IAAMb,KAAKyB,MAAMhD,KAAI,SAACyD,GAAD,OAAOA,EAAEJ,WAASK,KAAK,OAAS,Q,GAV/CX,GChBrB,SAASY,EAASC,GACd,OAAQnC,SAASmC,IAAMA,EAAI,EAAKA,EAAIC,OAAOC,UAE/C,SAASC,EAAQH,EAAWI,GACxB,IAAMC,EAAKL,EAAII,EACf,OAAe,IAAPC,EAAaC,KAAKC,KAAKP,GAAKM,KAAKC,KAAKH,GAAKH,OAAOC,UAAaG,E,IAGrEG,E,oLAIE,OAAOT,EAAS,GAAK,EAAIO,KAAKG,KAAK9C,KAAKoB,IAAI3B,a,gCAG5BoB,GAChB,IAAMc,EAAM3B,KAAKoB,IAAI3B,QACfsD,EAAIX,EAAS,GAAKO,KAAKG,IAAInB,GAAO,EAAIgB,KAAKG,KAAKnB,KACtD,OAAOa,EAAQxC,KAAKoB,IAAIS,MAAMhB,GAAIkC,K,8BAIlC,MAAO,UAAO/C,KAAKoB,IAAIU,QAAU,Q,GAdRX,GAA3B0B,EACKG,aAAuB,E,IAiB5BC,E,oLAIE,IAAMZ,EAAIrC,KAAKoB,IAAI3B,QACbgD,EAAI,EAAIE,KAAKG,IAAIT,GACvB,OAAOnC,SAASuC,GAAKL,EAASO,KAAKO,IAAIT,IAAMJ,I,gCAG7BxB,GAChB,IAAMkC,EAAIX,EAAS,GAAK,EAAIO,KAAKG,KAAK9C,KAAKoB,IAAI3B,WAC/C,OAAO+C,EAAQxC,KAAKoB,IAAIS,MAAMhB,GAAIkC,K,8BAIlC,MAAO,QAAU/C,KAAKoB,IAAIU,QAAU,Q,GAfXX,GAA3B8B,EACKD,aAAuB,E,IC5B5BG,E,oLAEE,IAAIC,EAAOpD,KAAKsB,KAAK7B,QAAUO,KAAKuB,MAAM9B,QAC1C,OAAO2D,EAAOA,I,gCAGEvC,GAEhB,OAAO,GADIb,KAAKsB,KAAK7B,QAAUO,KAAKuB,MAAM9B,UACvBO,KAAKsB,KAAKO,MAAMhB,GAAKb,KAAKuB,MAAMM,MAAMhB,M,8BAIzD,MAAO,IAAMb,KAAKsB,KAAKQ,QAAU,MAAQ9B,KAAKuB,MAAM9B,QAAU,U,GAZ3C4B,GCEZgC,E,WAIX,aAAe,yBAHPC,iBAGM,OAFNC,cAEM,EACVvD,KAAKsD,YAAc,GACnBtD,KAAKuD,SAAW,E,oDAIF,OAAOvD,KAAKiB,MAAMxB,U,8BAClB,OAAOO,KAAKiB,MAAMa,U,4BAI9B0B,GACFxD,KAAKsD,YAAYG,MAAMzD,KAAK0D,UAAUF,M,4BAIpC3D,EAAqBC,GACvB,GAAIE,KAAKsD,YAAYK,OAAS,EAAG,CAC7B,IAAMC,EAAa5D,KAAKsD,YAAYtB,QAChC,SAACC,EAAKC,GAAN,OAAYD,EAAMC,IAAG,GACrBrC,EAAcG,KAAKsD,YAAYK,OACnC3D,KAAKuD,SAAWvD,KAAKuD,UAAY,EAAIzD,GAAY8D,EACjD5D,KAAK6D,UAAU7D,KAAKuD,UACpBvD,KAAKsD,YAAc,Q,KAMzBQ,E,YAMF,WAAYC,EAAWC,GAAiB,IAAD,8BACnC,+CAJIC,OAG+B,IAF/B/B,OAE+B,EAEnC,EAAK+B,EAAI,IAAIvC,EAAS,IAAMoC,EAAOI,MAAOF,GAC1C,EAAK9B,EAAI,IAAIN,EAAW,EAAKqC,EAAGF,EAAE9C,SAChC6C,EAAOI,MAJ0B,E,mEAOrB,OAAOlE,KAAKiE,I,gCACF,OAAOjE,KAAKkC,I,gCAEpBsB,GAChB,OAAOA,EAAI3B,MAAM7B,KAAKiE,K,gCAENL,GAChB5D,KAAKiE,EAAEE,KAAKnE,KAAKP,QAAUmE,K,8BAI3B5D,KAAKkC,EAAEkC,Y,GAxBMf,GAAfS,EACaI,MAAgB,E,IA2B7BG,E,YAKF,aAAe,IAAD,8BACV,+CAHIxF,OAEM,EAEV,EAAKA,EAAI,IAAI6C,EAAS,IAAM2C,EAAKH,MAAO,KACtCG,EAAKH,MAHG,E,mEAMI,OAAOlE,KAAKnB,I,gCACF,OAAOmB,KAAKiB,Q,gCAEpBqD,GAChB,OAAOA,EAAMzC,MAAM7B,KAAKnB,K,gCAER+E,GAChB5D,KAAKnB,EAAEsF,KAAKnE,KAAKP,QAAUmE,O,GAlBhBP,GAAbgB,EACKH,MAAgB,E,4BCvDZK,E,gGAEO,OAAOvE,KAAKiB,MAAMxB,Y,KAIlC+E,E,YAGF,WAAYhF,GAAe,IAAD,8BACtB,+CAHI6C,OAEkB,EAEtB,EAAKA,EAAI,IAAIX,EAASlC,GAFA,E,mEAKF,OAAOQ,KAAKqC,I,8BAClB,OAAOrC,KAAKqC,EAAEP,U,2BAE3BH,GAAe3B,KAAKqC,EAAE8B,KAAKxC,O,GAXV4C,GAcXE,E,YAMX,WAAYC,GAA6C,IAAD,uBACpD,+CANIC,aAKgD,IAJhDC,UAIgD,IAHhDC,SAGgD,IAFhD/B,SAEgD,6BAAnB6B,EAAmB,iCAAnBA,EAAmB,kBAEpD,EAAKA,QAAUA,EACf,EAAKC,KAAO,IAAIP,EAEhB,IAAM5C,EAAQ,EAAKkD,QAAQlG,KAAI,SAACqG,GAAD,OAAOA,EAAEC,aALY,OAMpD,EAAKF,IAAL,YAAe9C,EAAf,YAAyBN,GAAzB,QAAgC,EAAKmD,KAAKG,aAC1C,EAAKjC,IAAM,IAAI4B,EAAI,EAAKG,KAP4B,E,mEAUhC,OAAO7E,KAAK8C,M,8BAEhC,MAAO,IAAM9C,KAAK2E,QAAQlG,KACtB,SAACwF,GAAD,OAAOA,EAAExE,WACX0C,KAAK,KAAO,KAAOnC,KAAK4E,KAAKnF,U,gCAGzBuF,GAA+B,OAAOhF,KAAK2E,QAAQK,K,gCAC3C,OAAOhF,KAAK4E,O,4BAExBN,GACFtE,KAAK2E,QAAQM,SAAQ,SAAChB,GAAD,OAAOA,EAAEiB,MAAMZ,MACpCtE,KAAK4E,KAAKM,MAAMZ,K,4BAEdzE,EAAqBC,GACvBE,KAAK2E,QAAQM,SAAQ,SAAChB,GAAD,OAAOA,EAAEkB,MAAMtF,EAAaC,MACjDE,KAAK4E,KAAKO,MAAMtF,EAAaC,K,8BAI7BE,KAAK8C,IAAIsB,QACTpE,KAAK6E,IAAIT,QACTpE,KAAK2E,QAAQM,SAAQ,SAAChB,GAAD,OAAOA,EAAEG,e,GAtCCG,GA0CjCa,E,sIAAqBX,GAErBY,E,YAIF,WACI7F,EACAkF,EACAY,GAED,IAAD,mDADKX,EACL,iCADKA,EACL,yBACE,yDAAMD,GAAN,OAAcC,MATVlC,OAQN,IAPMe,SAON,EAEE,EAAKf,EAAI,IAAIf,EAASlC,GACtB,EAAKgE,IAAM,IAAI8B,EAAI,EAAKrE,MAAO,EAAKwB,GAHtC,E,sEAMyB,OAAOzC,KAAKwD,M,iCAClB,OAAOxD,KAAKuF,SAAS9F,U,iCACrB,OAAOO,KAAKuF,SAASzD,U,2BAErCH,GAAe3B,KAAKyC,EAAE0B,KAAKxC,K,8BAG5B,8DACA3B,KAAKwD,IAAIY,Y,GAvBUK,G,QC3E3B,SAASe,EAAcC,GAEnB,IADA,IAAIC,EAAoB,IAAIC,MAAMF,GACzBG,EAAI,EAAGA,EAAIH,IAAOG,EACvBF,EAAME,GAAK,IAAID,MAAMF,GAAKI,KAAK,GAC/BH,EAAME,GAAGA,GAAK,EAElB,OAAOF,EAEX,SAASI,EAAiBL,GACtB,IAAMM,EAAeN,EAAM,EACrBvB,EAAgB,GAAK6B,EACvBC,EAAsB,IAAIL,MAAMF,GAC9BQ,EAAc,EAAItD,KAAKuD,KAAKT,GAClCO,EAAQD,GAAQ,IAAIJ,MAAMzB,GAAO2B,MAAMI,GACvC,IAAK,IAAIL,EAAI,EAAGA,EAAIG,IAAQH,EAAG,CAC3B,IAAMO,EAAoB,GAAKP,EAC/BI,EAAQJ,GAAK,IAAID,MAAMQ,GAAWN,MAAMI,GAAKG,OACzC,IAAIT,MAAMQ,GAAWN,KAAKI,IAE9B,IAAK,IAAII,EAAIT,EAAI,EAAGS,EAAIN,IAAQM,EAC5BL,EAAQJ,GAAKI,EAAQJ,GAAGQ,OAAOJ,EAAQJ,IAG/C,OAAOI,EAUX,SAASM,EAAab,EAAavB,EAAeqC,GAG9C,IAFA,IAAMb,EAASa,EALnB,SAAwBd,GACpB,IAAMe,EAAOJ,EAAOZ,EAAcC,GAAMK,EAAiBL,IACzD,OAAOW,EAAOI,EAAMA,EAAK/H,KAAI,SAACC,GAAD,OAASA,EAAID,KAAI,SAACsF,GAAD,OAAQA,SAG/B0C,CAAehB,GAR1C,SAAwBA,GACpB,OAAOW,EAAOZ,EAAcC,GAAMK,EAAiBL,IAONiB,CAAejB,GACxDO,EAAsB,GACnBA,EAAQrC,OAASO,GACpB8B,EAAUA,EAAQI,OAAOO,EAAUC,EAAalB,EAAO,KAE3D,OAAOM,EAAQa,MAAM,EAAG3C,GAG5B,SAASyC,EAAUG,GAGf,IAFA,IAAMC,EAAQD,EAAO,GAAGnD,OACpBzB,EAAI,IAAIyD,MAAMoB,GACTnB,EAAI,EAAGA,EAAImB,IAASnB,EACzB1D,EAAE0D,GAAKoB,EAAOF,EAAQlB,GAE1B,OAAO1D,EAEX,SAASkE,EAAOa,EAAepI,GAC3B,OAAOoI,EAAExI,KAAI,SAACC,EAAKC,GAAN,OAAgBD,EAAI0H,OAAOvH,EAAEF,OAE9C,SAASuI,EAASD,EAAepI,GAK7B,IAJA,IAAMsI,EAAkBF,EAAEtD,OACpByD,EAAkBvI,EAAE8E,OACpB0D,EAAiBxI,EAAE,GAAG8E,OACxBmB,EAAgB,IAAIa,MAAMwB,GACrBvB,EAAI,EAAGA,EAAIuB,IAAWvB,EAAG,CAC9Bd,EAAEc,GAAK,IAAID,MAAM0B,GAAQxB,KAAK,GAC9B,IAAK,IAAIQ,EAAI,EAAGA,EAAIgB,IAAUhB,EAC1B,IAAK,IAAIiB,EAAI,EAAGA,EAAIF,IAAWE,EAC3BxC,EAAEc,GAAGS,IAAMY,EAAErB,GAAG0B,GAAKzI,EAAEyI,GAAGjB,GAItC,OAAOvB,EAGX,SAASyC,EAAe9B,EAAapD,EAAWI,GAC5C,GAAIJ,EAAII,EAAK,OAAO8E,EAAe9B,EAAKhD,EAAGJ,GAC3C,IAAIqD,EAAoBF,EAAcC,GAKtC,OAJAC,EAAMrD,GAAGA,GAAKM,KAAK6E,SACnB9B,EAAMjD,GAAGA,GAAKiD,EAAMrD,GAAGA,GACvBqD,EAAMjD,GAAGJ,GAAKM,KAAKuD,KAAK,EAAIR,EAAMrD,GAAGA,GAAKqD,EAAMrD,GAAGA,IACnDqD,EAAMrD,GAAGI,IAAMiD,EAAMjD,GAAGJ,GACjBqD,EAEX,SAASkB,EAAaE,EAAoBzE,GAGtC,IAFA,IAAMoD,EAAcqB,EAAOnD,OACvB8D,EAA0B,IAAI9B,MAAMF,EAAM,GACrCG,EAAI,EAAGA,EAAIvD,IAAKuD,EACrB6B,EAAU7B,GAAK2B,EAAe9B,EAAKpD,EAAGuD,GAE1C,IAAK,IAAIA,EAAIvD,EAAI,EAAGuD,EAAIH,IAAOG,EAC3B6B,EAAU7B,EAAI,GAAK2B,EAAe9B,EAAKpD,EAAGuD,GAE9C,OAAOsB,EAASO,EAAUzF,QACtB,SAACC,EAAKyF,GAEF,OADUR,EAASjF,EAAKyF,KAEzBlC,EAAcC,IAClBqB,GAGP,SAASE,EAAOF,EAAoBhC,GAChC,OAAOgC,EAAOrI,KAAI,SAACC,GAAD,OAASA,EAAIoG,M,ICrFpB6C,E,gGAGP,MAAO,MAAQ3H,KAAKiB,MAAMxC,KACtB,SAACsF,GAAD,MAAO,KAAOA,EAAEjC,WAClBK,KAAK,MAAQ,Q,6BAGF,OAAOnC,KAAKiB,MAAM0C,W,KAGjCiE,E,YAGF,aAAiC,IAAD,uBAC5B,+CAHIC,aAEwB,EAE5B,EAAKA,QAAU,IAAIlH,IAFS,2BAAjBmH,EAAiB,yBAAjBA,EAAiB,gBAG5B,cAAmBA,EAAnB,eAA0B,CAArB,IAAMtI,EAAI,KACX,EAAKqI,QAAQ9G,IAAIvB,EAAM,IAAIgF,EAAYhF,IAJf,S,mEAQd,OAAOmG,MAAMoC,KAAK/H,KAAK6H,QAAQG,Y,gCACvCxI,GACN,OAAOQ,KAAK6H,QAAQ5G,IAAIzB,K,+BAIxB,IAAIf,EAAM,IAAIkC,IADY,uBAE1B,YAA2BX,KAAK6H,QAAhC,+CAAyC,CAAC,IAAD,6BAA7BrI,EAA6B,KAAvByI,EAAuB,KACrCxJ,EAAIsC,IAAIvB,EAAMyI,EAAKxI,UAHG,kFAK1B,OAAOhB,I,2BAGNyJ,GAA4B,IAAD,uBAC5B,YAA6BlI,KAAK6H,QAAlC,+CAA2C,CAAC,IAAD,+BAA/BrI,EAA+B,UAChC2E,KAAP,UAAY+D,EAAKjH,IAAIzB,UAArB,QAA8B,IAFN,uF,GAxBXmI,GA+BVQ,G,8KAGL7D,GACFtE,KAAKiB,MAAMgE,SAAQ,SAAClB,GAAD,OAAOA,EAAEmB,MAAMZ,Q,4BAEhCzE,EAAqBC,GACvBE,KAAKiB,MAAMgE,SAAQ,SAAClB,GAAD,OAAOA,EAAEoB,MAAMtF,EAAaC,Q,8BAI/CE,KAAKiB,MAAMgE,SAAQ,SAAClB,GAAD,OAAOA,EAAEK,e,GAXEuD,GAehCS,G,YAGF,WAAYC,EAAe3D,EAAsB4D,GAAe,IAAD,uBAC3D,+CAHIT,aAEuD,EAE3D,EAAKA,QAAU,GAOf,IANA,IAAMU,EAA0BF,EAAOpH,MACjCuH,EAA4BlC,EAC9BiC,EAAc5E,OACd2E,GACC5D,EAAI1B,aAPkD,WASlD4C,GACL,EAAKiC,QAAQpE,KAAb,YAAsB2B,EAAtB,CAAmCV,GAAnC,mBAA2C6D,EAAc9J,KACrD,SAACsF,EAAGsC,GAAJ,OAAU,IAAIvC,EAAOC,EAAGyE,EAAc5C,GAAGS,YAFxCT,EAAI,EAAGA,EAAI0C,IAAQ1C,EAAI,EAAvBA,GATkD,S,mEAgBpC,OAAO5F,KAAK6H,U,gCAC7BlJ,GACN,OAAOqB,KAAK6H,QAAQlJ,K,gCAGd8J,EAAoBzD,GAC1B,OAAOhF,KAAK6H,QAAQY,GAAYC,UAAU1D,K,8BAEtCyD,GACJ,OAAOzI,KAAK6H,QAAQY,GAAYE,Y,+BAGf,OAAO3I,KAAK6H,QAAQpJ,KAAI,SAACsF,GAAD,OAAOA,EAAEtE,e,GA/BhC0I,IAkCpBS,G,YAIF,WACIP,EACA3D,EACAY,GAED,IAAD,mCACE,+CATIuC,aAQN,IAPMrE,SAON,EAEE,EAAKqE,QAAU,IAAIlH,IAOnB,IANA,IAAM4H,EAA0BF,EAAOpH,MACjCuH,EAA4BlC,EAC9BiC,EAAc5E,OAD4B,0CAGzCe,EAAI1B,aAPX,WASW4C,GACL,EAAKiC,QAAQ9G,IACH6E,EADV,eACUA,EADV,WACUA,EADV,eAEQP,EAFR,CAE2BO,EAF3B,eAE2BA,EAF3B,WAE2BA,EAF3B,GAE+BlB,EAAKY,GAFpC,mBAE4CiD,EAAc9J,KAClD,SAACsF,EAAGsC,GAAJ,OAAU,IAAIvC,EAAOC,EAAGyE,EAAc5C,GAAGS,YAJ5CT,EAAI,EAAGA,GAAC,4CAAmBA,EAAI,EAA/BA,GATX,OAiBE,EAAKpC,IAAL,YAAezB,EAAf,YACO4D,MAAMoC,KAAK,EAAKF,QAAQG,UAAUvJ,KAAI,SAACsF,GAAD,OAAOA,EAAEwB,cAlBxD,E,mEAsByB,OAAOI,MAAMoC,KAAK/H,KAAK6H,QAAQG,Y,gCAChDxI,GACN,OAAOQ,KAAK6H,QAAQ5G,IAAIzB,K,gCAGlBqJ,EAAmB7D,GAA0C,IAAD,EAClE,iBAAOhF,KAAK6H,QAAQ5G,IAAI4H,UAAxB,aAAO,EAA6BH,UAAU1D,K,8BAE1CxF,GAAiC,IAAD,EACpC,iBAAOQ,KAAK6H,QAAQ5G,IAAIzB,UAAxB,aAAO,EAAwBmJ,Y,+BAGR,OAAO3I,KAAKwD,M,iCAClB,OAAOxD,KAAKuF,SAAS9F,U,iCACrB,OAAOO,KAAKuF,SAASzD,U,+BAGtC,IAAIrD,EAAM,IAAIkC,IADY,uBAE1B,YAA2BX,KAAK6H,QAAhC,+CAAyC,CAAC,IAAD,6BAA7BrI,EAA6B,KAAvByI,EAAuB,KACrCxJ,EAAIsC,IAAIvB,EAAMyI,EAAKxI,UAHG,kFAK1B,OAAOhB,I,2BAGNyJ,GAA4B,IAAD,uBAC5B,YAA6BlI,KAAK6H,QAAlC,+CAA2C,CAAC,IAAD,+BAA/BrI,EAA+B,UAChC2E,KAAP,UAAY+D,EAAKjH,IAAIzB,UAArB,QAA8B,IAFN,qF,8BAO5B,8DACAQ,KAAKwD,IAAIY,Y,GA/DS+D,IC7FXW,G,WAYX,aAAe,yBAXPC,gBAWM,OAVNC,kBAUM,OATNC,iBASM,OAPJC,aAOI,EACVlJ,KAAKkJ,QAAU,GADL,MAGgBlJ,KAAKmJ,OAAO,GAAG,GAAjCC,EAHE,EAGFA,MAAOC,EAHL,EAGKA,OACTC,EAAa3D,MAAMoC,KAAKqB,EAAMG,QAC9BC,EAAc7D,MAAMoC,KAAKsB,EAAOE,QAEtCvJ,KAAK+I,WAAL,YAAsBnB,EAAtB,YAAoC0B,IACpCtJ,KAAKgJ,aAAe,GACpB,IAAIjD,EAAc/F,KAAK+I,WATb,uBAUV,YAAmB/I,KAAKyJ,cAAxB,+CAAuC,CAAC,IAA7BnB,EAA4B,QACnCtI,KAAKgJ,aAAavF,KAAK,IAAI2E,GAAYrC,EAAM/F,KAAK0E,MAAO4D,IACzDvC,EAAO/F,KAAKgJ,aAAahJ,KAAKgJ,aAAarF,OAAS,IAZ9C,kFAcV3D,KAAKiJ,YAAL,YAAuBL,GAAvB,CACI7C,EACA/F,KAAK0E,MACL1E,KAAKsF,OAHT,mBAIOkE,K,oDAKP,OAAOxJ,KAAKgJ,aAAavK,KACrB,SAACsF,GAAD,OAAOA,EAAEjC,WACXK,KAAK,MAAQ,KAAOnC,KAAKiJ,YAAYnH,U,sCAGb,OAAO9B,KAAK+I,a,qCAC3BnD,GAA0B,OAAO5F,KAAKgJ,aAAapD,K,uCAClC,OAAO5F,KAAKiJ,c,+BAEjB,OAAOjJ,KAAKiJ,YAAY1D,W,iCAC9B,OAAOvF,KAAKiJ,YAAYS,a,iCACxB,OAAO1J,KAAKiJ,YAAYU,a,+BAGzC,OAAO3J,KAAKkJ,QAAQlH,QAChB,SAACC,EAAKiD,GAAN,OAAgBjD,EAAMiD,EAAM1B,MAAK,GACjCxD,KAAKkJ,QAAQvF,S,2BAGhByF,GAA6C,IAA/BC,EAA8B,uDAAN,KACvCrJ,KAAKoE,QACLpE,KAAK+I,WAAW5E,KAAKiF,GACjBC,GAAUrJ,KAAKiJ,YAAY9E,KAAKkF,K,gCAE9BD,GAEN,OADApJ,KAAKmE,KAAKiF,GACHpJ,KAAKiJ,YAAYjB,W,4BAGtB9D,GAAgB,IAAD,OACjBlE,KAAKkJ,QAAUlJ,KAAKmJ,OAAOjF,GAAOzF,KAAI,SAACmL,GACnC,EAAKzF,KAAKyF,EAAOR,MAAOQ,EAAOP,QAC/B,IAAM7F,EAAM,EAAKyF,YAAY1D,SAG7B,OAFA,EAAKyD,aAAa/D,SAAQ,SAAC4E,GAAD,OAAWA,EAAM3E,MAAM1B,MACjD,EAAKyF,YAAY/D,MAAM1B,GAChB,CAAEoG,OAAQA,EAAQpG,IAAKA,EAAI/D,c,4BAGpCI,EAAqBC,GACvBE,KAAKgJ,aAAa/D,SACd,SAAC4E,GAAD,OAAWA,EAAM1E,MAAMtF,EAAaC,MAExCE,KAAKiJ,YAAY9D,MAAMtF,EAAaC,K,8BAIpCE,KAAKgJ,aAAa/D,SAAQ,SAAC4E,GAAD,OAAWA,EAAMzF,WAC3CpE,KAAKiJ,YAAY7E,Y,KAIV0F,G,8KAEI,IAAD,OACJC,EAAQ/J,KAAK+J,QACnB,OAAOA,EAAM/H,QAAO,SAACC,EAAD,GAA6B,IAArBmH,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAE/B,OADA,EAAKlF,KAAKiF,EAAOC,GACVpH,EAAM,EAAKyH,aACnB,GAAKK,EAAMpG,W,GAPiBmF,IChDxBkB,G,2MA1BHC,YAAc,CAClB,CACIb,MAAO,IAAIzI,IAAoB,CAAC,CAAC,IAAK,KACtC0I,OAAQ,IAAI1I,IAAoB,CAAC,CAAC,IAAK,OAE3C,CACIyI,MAAO,IAAIzI,IAAoB,CAAC,CAAC,IAAK,KACtC0I,OAAQ,IAAI1I,IAAoB,CAAC,CAAC,IAAK,Q,sEAzB9BuD,GACblE,KAAKkJ,QAAQgB,MAAK,SAACjD,EAAGpI,GAAJ,OAAUA,EAAE2E,IAAMyD,EAAEzD,OACtC,IAAI2G,EAAMnK,KAAKkJ,QAAQrC,MAAM,EAAG3C,EAAQ,GAAGzF,KACvC,SAACyG,GAAD,OAAWA,EAAM0E,UAErBQ,QAAQlH,IAAIiH,GACZ,IAAK,IAAIvE,EAAIuE,EAAIxG,OAAQiC,EAAI1B,IAAS0B,EAClCuE,EAAI1G,KAAK,CACL2F,MAAO,IAAIzI,IAAoB,CAAC,CAAC,IAAKgC,KAAK6E,YAC3C6B,OAAQ,IAAI1I,IAAoB,CAAC,CAAC,IAAK,QAG/C,OAAOwJ,I,4BAEO,OAAOE,I,4BACP,OAAOA,I,oCACC,MAAO,K,8BAYb,OAAOrK,KAAKiK,c,0BAK5B,OAAOjK,KAAKsK,iBAAiB5B,UAAU,IAAK,GAAIjJ,U,0BAGhD,OAAOO,KAAKsK,iBAAiB3B,QAAQ,KAAMlJ,U,4BAGzC4C,GACF,OAAOrC,KAAKuK,UAAU,IAAI5J,IAAoB,CAAC,CAAC,IAAK0B,MAAMpB,IAAI,S,GAzC/CoJ,ICqFTG,G,YA7EX,WAAYlM,GAAY,IAAD,8BACnB,4CAAMA,KALVmM,SAIuB,IAFvBtL,WAEuB,IAoBvBE,aAAe,SAACC,GAAmD,IAAD,EACtCA,EAAMC,OAAtBC,EADsD,EACtDA,KAAMC,EADgD,EAChDA,MACd,EAAKC,SAAL,eAAiBF,EAAOC,KAtBL,EAyBvBL,aAAe,SAACD,GACZ,IAAK,IAAIyG,EAAY,EAAGA,EAAIzG,EAAMY,cAAe6F,EAC7C,EAAK8E,MAAMvL,EAAMS,QAAST,EAAMU,YAAaV,EAAMW,WAxBvD,EAAK2K,IAAM,IAAIT,GACf,EAAK7K,MAAQ,CACTX,KAAM,CAAC,CAAEI,EAAG,EAAK6L,IAAI7L,IAAKC,EAAG,EAAK4L,IAAI5L,IAAKC,OAAG6L,IAC9CvB,MAAO,GANQ,E,mEAUjBxJ,EAAiBC,EAAqBC,GACxCE,KAAKyK,IAAIvF,MAAMtF,GACf,IAAMgL,EAAM5K,KAAKyK,IAAIG,MACfpM,EAASwB,KAAKb,MAAdX,KACNwB,KAAKyK,IAAItF,MAAMtF,EAAaC,GAC5BtB,EAAKA,EAAKmF,OAAS,GAAG7E,EAAI6D,KAAKuD,KAAK0E,GACpCpM,EAAKiF,KAAK,CAAE7E,EAAGoB,KAAKyK,IAAI7L,IAAKC,EAAGmB,KAAKyK,IAAI5L,IAAKC,OAAG6L,IACjD3K,KAAKN,SAAS,CAAElB,KAAMA,M,+BAchB,IAAD,EACmBwB,KAAKb,MAArBX,EADH,EACGA,KAAM4K,EADT,EACSA,MAEVC,EAAiB5I,IAKrB,OAJIP,SAASkJ,KACTC,EAASrJ,KAAKyK,IAAIhL,MAAM2J,IAI1B,yBAAKyB,UAAU,aACb,qCACA,+HAAoG,6BAApG,2GACwG,6BADxG,0HAEuH,6BAFvH,4HAGyH,6BAHzH,wHAMA,uCACA,oIACA,qCACA,2BACE5K,KAAK,SACLT,KAAK,QACLC,MAAO2J,EACPhJ,SAAUJ,KAAKX,eACjB,6BACA,qCACA,2BAAOyL,UAAQ,EACb7K,KAAK,OACLT,KAAK,SACLC,MAAO4J,IAET,wCACA,wGAA6E,6BAA7E,uIACoI,6BADpI,mGAEgG,6BAFhG,kGAG+F,6BAH/F,2FAIwF,6BAJxF,8HAMA,kBAAC,EAAD,CAAMjK,aAAcY,KAAKZ,eACzB,kBAAC,EAAD,CAAOZ,KAAMA,S,GA5ED8B,aCCxB,SAASlC,KACL,OACE,+BACE,4BACE,iCACA,mCAMV,SAASC,GAAUC,GACf,IAAMC,EAAOD,EAAME,KAAKC,KAAI,SAACC,EAAeC,GAAmB,IACnDG,EAAMJ,EAANI,EACR,OACE,wBAAIC,IAAKJ,GACP,4BAAKA,GACL,mCAAKG,QAAL,IAAKA,IAAK,QAGfE,UACH,OACI,+BAAQT,GAcDU,OAVf,SAAeX,GAA8B,IACjCE,EAASF,EAATE,KACR,OACE,+BACE,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAWA,KAAMA,MCWVuM,G,2MAxBHd,YAAe,WAEnB,IADA,IAAIF,EAAQ,GACH1H,EAAI,EAAGA,GAAK,EAAGA,GAAK,GACzB,IAAK,IAAII,EAAI,EAAGA,GAAK,EAAGA,GAAK,GAAK,CAC9B,IAAMuI,EAAU3I,EAAI,IAAOI,EAAI,GAAO,EAAI,EAC1CsH,EAAMtG,KAAK,CACP2F,MAAO,IAAIzI,IAAoB,CAAC,CAAC,IAAK0B,GAAI,CAAC,IAAKI,KAChD4G,OAAQ,IAAI1I,IAAoB,CAAC,CAAC,SAAUqK,OAIxD,OAAOjB,EAXY,G,sEArBN7F,GACblE,KAAKkJ,QAAQgB,MAAK,SAACjD,EAAGpI,GAAJ,OAAUA,EAAE2E,IAAMyD,EAAEzD,OAKtC,IAJA,IAAMyH,EAAU/G,EAAQ,EACpBiG,EAAMnK,KAAKkJ,QAAQrC,MAAMoE,EAAS,EAAIA,GAASxM,KAC/C,SAACyG,GAAD,OAAWA,EAAM0E,UAEZhE,EAAIuE,EAAIxG,OAAQiC,EAAI1B,IAAS0B,EAAG,CACrC,IAAMvD,EAAIM,KAAK6E,SACT/E,EAAIE,KAAK6E,SACTwD,EAAU3I,EAAI,IAAOI,EAAI,GAAO,EAAI,EAC1C0H,EAAI1G,KAAK,CACL2F,MAAO,IAAIzI,IAAoB,CAAC,CAAC,IAAK0B,GAAI,CAAC,IAAKI,KAChD4G,OAAQ,IAAI1I,IAAoB,CAAC,CAAC,SAAUqK,OAGpD,OAAOb,I,4BAEO,OAAOE,I,4BACP,OAAOA,I,oCACC,MAAO,CAAC,K,8BAed,OAAOrK,KAAKiK,c,4BAI1B5H,EAAWI,GACb,OAAOzC,KAAKuK,UACR,IAAI5J,IAAoB,CAAC,CAAC,IAAK0B,GAAI,CAAC,IAAKI,MAC3CxB,IAAI,c,GA1CYoJ,IC4EXa,G,YApEX,WAAY5M,GAAY,IAAD,8BACnB,4CAAMA,KALVmM,SAIuB,IAFvBtL,WAEuB,IAiBvBE,aAAe,SAACC,GAAmD,IAAD,EACtCA,EAAMC,OAAtBC,EADsD,EACtDA,KAAMC,EADgD,EAChDA,MACd,EAAKC,SAAL,eAAiBF,EAAOC,KAnBL,EAsBvBL,aAAe,SAACD,GACZ,IAAK,IAAIyG,EAAY,EAAGA,EAAIzG,EAAMY,cAAe6F,EAC7C,EAAK8E,MAAMvL,EAAMS,QAAST,EAAMU,YAAaV,EAAMW,UAEvDsK,QAAQlH,IAAI,EAAKuH,IAAI3I,UAvBrB,EAAK2I,IAAM,IAAIM,GACf,EAAK5L,MAAQ,CAAEX,KAAM,CAAC,CAAEM,OAAG6L,IAActI,EAAG,EAAGI,EAAG,GAJ/B,E,mEAOjB7C,EAAiBC,EAAqBC,GACxCE,KAAKyK,IAAIvF,MAAMtF,GACf,IAAMgL,EAAM5K,KAAKyK,IAAIG,MACfpM,EAASwB,KAAKb,MAAdX,KACNA,EAAKA,EAAKmF,OAAS,GAAG7E,EAAI6D,KAAKuD,KAAK0E,GACpC5K,KAAKyK,IAAItF,MAAMtF,EAAaC,GAC5BtB,EAAKiF,KAAK,CAAE3E,OAAG6L,IACf3K,KAAKN,SAAS,CAAElB,KAAMA,M,+BAehB,IAAD,EACkBwB,KAAKb,MAApBX,EADH,EACGA,KAAM6D,EADT,EACSA,EAAGI,EADZ,EACYA,EAEb4G,EAAiB5I,IAKrB,OAJIP,SAASmC,IAAMnC,SAASuC,KACxB4G,EAASrJ,KAAKyK,IAAIhL,MAAM4C,EAAGI,IAI7B,yBAAKoI,UAAU,aACb,uCACA,oCACA,2BACE5K,KAAK,SACLT,KAAK,IACLC,MAAO4C,EACPjC,SAAUJ,KAAKX,eACjB,6BACA,oCACA,2BACEY,KAAK,SACLT,KAAK,IACLC,MAAOgD,EACPrC,SAAUJ,KAAKX,eACjB,6BACA,yCACA,2BAAOyL,UAAQ,EACb7K,KAAK,OACLT,KAAK,SACLC,MAAO4J,IAET,wCACA,kBAAC,EAAD,CAAMjK,aAAcY,KAAKZ,eACzB,kBAAC,GAAD,CAAOZ,KAAMA,S,GAnEC8B,aCC1B,SAASlC,KACL,OACE,+BACE,4BACE,iCACA,mCAMV,SAASC,GAAUC,GACf,IAAMC,EAAOD,EAAME,KAAKC,KAAI,SAACC,EAAeC,GAAmB,IACnDG,EAAMJ,EAANI,EACR,OACE,wBAAIC,IAAKJ,GACP,4BAAKA,GACL,mCAAKG,QAAL,IAAKA,IAAK,QAGfE,UACH,OACI,+BAAQT,GAcDU,OAVf,SAAeX,GAA8B,IACjCE,EAASF,EAATE,KACR,OACE,+BACE,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAWA,KAAMA,MCRV2M,G,+KA1BMjH,GAEb,IADA,IAAIiG,EAAM,GACDvE,EAAI,EAAGA,EAAI1B,IAAS0B,EAAG,CAC5B,IAAMvD,EAAIM,KAAK6E,SACT/E,EAAIE,KAAK6E,SACT4D,EAAU/I,EAAI,KAAUI,EAAI,GAAQ,EAAI,EAC9C0H,EAAI1G,KAAK,CACL2F,MAAO,IAAIzI,IAAoB,CAAC,CAAC,IAAK0B,GAAI,CAAC,IAAKI,KAChD4G,OAAQ,IAAI1I,IAAoB,CAAC,CAAC,QAASyK,OAGnD,OAAOjB,I,4BAEO,OAAOE,I,4BACP,OAAOA,I,oCACC,MAAO,CAAC,EAAG,EAAG,EAAG,K,4BAIrChI,EAAWI,GACb,OAAOzC,KAAKuK,UACR,IAAI5J,IAAoB,CAAC,CAAC,IAAK0B,GAAI,CAAC,IAAKI,MAC3CxB,IAAI,a,GAvBWoJ,IC4EVgB,G,YApEX,WAAY/M,GAAY,IAAD,8BACnB,4CAAMA,KALVmM,SAIuB,IAFvBtL,WAEuB,IAiBvBE,aAAe,SAACC,GAAmD,IAAD,EACtCA,EAAMC,OAAtBC,EADsD,EACtDA,KAAMC,EADgD,EAChDA,MACd,EAAKC,SAAL,eAAiBF,EAAOC,KAnBL,EAsBvBL,aAAe,SAACD,GACZ,IAAK,IAAIyG,EAAY,EAAGA,EAAIzG,EAAMY,cAAe6F,EAC7C,EAAK8E,MAAMvL,EAAMS,QAAST,EAAMU,YAAaV,EAAMW,UAEvDsK,QAAQlH,IAAI,EAAKuH,IAAI3I,UAvBrB,EAAK2I,IAAM,IAAIU,GACf,EAAKhM,MAAQ,CAAEX,KAAM,CAAC,CAAEM,OAAG6L,IAActI,EAAG,EAAGI,EAAG,GAJ/B,E,mEAOjB7C,EAAiBC,EAAqBC,GACxCE,KAAKyK,IAAIvF,MAAMtF,GACf,IAAMgL,EAAM5K,KAAKyK,IAAIa,SACf9M,EAASwB,KAAKb,MAAdX,KACNA,EAAKA,EAAKmF,OAAS,GAAG7E,EAAI8L,EAC1B5K,KAAKyK,IAAItF,MAAMtF,EAAaC,GAC5BtB,EAAKiF,KAAK,CAAE3E,OAAG6L,IACf3K,KAAKN,SAAS,CAAElB,KAAMA,M,+BAehB,IAAD,EACkBwB,KAAKb,MAApBX,EADH,EACGA,KAAM6D,EADT,EACSA,EAAGI,EADZ,EACYA,EAEb4G,EAAiB5I,IAKrB,OAJIP,SAASmC,IAAMnC,SAASuC,KACxB4G,EAASrJ,KAAKyK,IAAIhL,MAAM4C,EAAGI,IAI7B,yBAAKoI,UAAU,aACb,uCACA,oCACA,2BACE5K,KAAK,SACLT,KAAK,IACLC,MAAO4C,EACPjC,SAAUJ,KAAKX,eACjB,6BACA,oCACA,2BACEY,KAAK,SACLT,KAAK,IACLC,MAAOgD,EACPrC,SAAUJ,KAAKX,eACjB,6BACA,yCACA,2BAAOyL,UAAQ,EACb7K,KAAK,OACLT,KAAK,SACLC,MAAO4J,IAET,wCACA,kBAAC,EAAD,CAAMjK,aAAcY,KAAKZ,eACzB,kBAAC,GAAD,CAAOZ,KAAMA,S,GAnEA8B,aC+BViL,OAzBf,WACI,OACE,kBAAC,IAAD,KACE,6BACE,iCACG,kBAAC,IAAD,CAAMC,GAAG,eAAT,MADH,MAEG,kBAAC,IAAD,CAAMA,GAAG,iBAAT,QAFH,MAGG,kBAAC,IAAD,CAAMA,GAAG,gBAAT,OAHH,MAMF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,eACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,iBACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,gBACV,kBAAC,GAAD,UCzBZC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.0f84bb56.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport type TableRow = {\r\n    m: number | undefined;\r\n    b: number | undefined;\r\n    r: number | undefined;\r\n};\r\n\r\nfunction TableHeader(): JSX.Element {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          <th>G</th>\r\n          <th>m</th>\r\n          <th>b</th>\r\n          <th>R</th>\r\n        </tr>\r\n      </thead>\r\n    );\r\n}\r\n\r\nfunction TableBody(props: { data: TableRow[] }): JSX.Element {\r\n    const rows = props.data.map((row: TableRow, index: number) => {\r\n        const { m, b, r } = row;\r\n        return (\r\n          <tr key={index}>\r\n            <td>{index}</td>\r\n            <td>{m ?? \"\"}</td>\r\n            <td>{b ?? \"\"}</td>\r\n            <td>{r ?? \"\"}</td>\r\n          </tr>\r\n        )\r\n    }).reverse();\r\n    return (\r\n        <tbody>{rows}</tbody>\r\n    );\r\n}\r\n\r\nfunction Table(props: { data: TableRow[] }) {\r\n    const { data } = props;\r\n    return (\r\n      <table>\r\n        <TableHeader />\r\n        <TableBody data={data} />\r\n      </table>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\n\r\nexport type FormState = {\r\n    samples: number;\r\n    sensitivity: number;\r\n    friction: number;\r\n    generations: number;\r\n};\r\n\r\nexport type FormProps = {\r\n    handleSubmit: (state: FormState) => void;\r\n};\r\n\r\nclass Form extends Component<FormProps> {\r\n    state: FormState;\r\n    handleSubmit: (state: FormState) => void;\r\n\r\n    constructor(props: FormProps) {\r\n        super(props);\r\n        this.state = {\r\n            samples: 1,\r\n            sensitivity: 1,\r\n            friction: 1,\r\n            generations: 1,\r\n        };\r\n        this.handleSubmit = (props as any).handleSubmit;\r\n    }\r\n\r\n    handleChange = (event: { target: { name: any; value: any; }; }) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    submitForm = () => {\r\n        (this.props as any).handleSubmit(this.state)\r\n    }\r\n\r\n    render() {\r\n        const { samples, sensitivity, friction, generations, } = this.state;\r\n        return (\r\n          <form>\r\n            <label>Samples</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"samples\"\r\n              value={isFinite(samples) ? samples : \"\"}\r\n              min=\"1\"\r\n              onChange={this.handleChange} />\r\n            <br />\r\n\r\n            <label>Sensitivity</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"sensitivity\"\r\n              value={isFinite(sensitivity) ? sensitivity : \"\"}\r\n              onChange={this.handleChange} />\r\n            <br />\r\n\r\n            <label>Friction</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"friction\"\r\n              value={isFinite(friction) ? friction : \"\"}\r\n              onChange={this.handleChange} />\r\n            <br />\r\n\r\n            <label>Generations</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"generations\"\r\n              value={isFinite(generations) ? generations : \"\"}\r\n              min=\"0\"\r\n              onChange={this.handleChange} />\r\n            <br />\r\n\r\n            <input type=\"button\" value=\"Train\" onClick={this.submitForm} />\r\n          </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n","import Differentiable from \"./differentiable\";\r\nimport Variable from \"./variable\";\r\n\r\nabstract class Expression implements Differentiable {\r\n    private _value: number = NaN;\r\n    value(): number {\r\n        if (!isFinite(this._value)) {\r\n            this._value = this.valueImpl();\r\n        }\r\n        return this._value;\r\n    }\r\n    protected abstract valueImpl(): number;\r\n\r\n    private _deriv = new Map<Variable, number>();\r\n    deriv(v: Variable): number {\r\n        if (!this._deriv.has(v)) {\r\n            this._deriv.set(v, this.derivImpl(v));\r\n        }\r\n        return this._deriv.get(v) as number;\r\n    }\r\n    protected abstract derivImpl(_v: Variable): number;\r\n\r\n    abstract print(): string;\r\n\r\n    reset() {\r\n        this._value = NaN;\r\n        this._deriv.clear();\r\n    }\r\n}\r\n\r\nabstract class ExprUnary extends Expression {\r\n    protected arg: Differentiable;\r\n\r\n    constructor(arg: Differentiable) {\r\n        super();\r\n        this.arg = arg;\r\n    }\r\n}\r\n\r\nabstract class ExprBinary extends Expression {\r\n    protected left: Differentiable;\r\n    protected right: Differentiable;\r\n\r\n    constructor(left: Differentiable, right: Differentiable) {\r\n        super();\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\n\r\nabstract class ExprVariadic extends Expression {\r\n    protected terms: Differentiable[];\r\n\r\n    constructor(...terms: Differentiable[]) {\r\n        super();\r\n        this.terms = terms;\r\n    }\r\n}\r\n\r\nexport default Expression;\r\nexport { ExprUnary, ExprBinary, ExprVariadic };\r\n","import Differentiable from \"./differentiable\";\r\n\r\nclass Variable implements Differentiable {\r\n    private name: string;\r\n    private val: number;\r\n\r\n    constructor(name: string, val: number = 0) {\r\n        this.name = name;\r\n        this.val = val;\r\n    }\r\n\r\n    bind(val: number) { this.val = val; }\r\n\r\n    value(): number { return this.val; }\r\n    deriv(v: Variable): number { return (v === this) ? 1 : 0; }\r\n\r\n    print(): string { return this.name; }\r\n}\r\n\r\nexport default Variable;\r\n","import { ExprBinary, ExprVariadic } from \"./expression\";\r\nimport Variable from \"./variable\";\r\n\r\nclass BinProduct extends ExprBinary {\r\n    protected valueImpl(): number {\r\n        return this.left.value() * this.right.value();\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        const dlr = this.left.deriv(v) * this.right.value();\r\n        const ldr = this.left.value() * this.right.deriv(v);\r\n        return dlr + ldr;\r\n    }\r\n\r\n    print(): string {\r\n        return this.left.print() + \" * \" + this.right.print();\r\n    }\r\n}\r\n\r\nclass VarSum extends ExprVariadic {\r\n    protected valueImpl(): number {\r\n        return this.terms.reduce((acc, t) => acc + t.value(), 0);\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        return this.terms.reduce((acc, t) => acc + t.deriv(v), 0);\r\n    }\r\n\r\n    print(): string {\r\n        return \"(\" + this.terms.map((t) => t.print()).join(\" + \") + \")\";\r\n    }\r\n}\r\n\r\nexport { BinProduct, VarSum };\r\n","import { Differentiable, ExprUnary, Variable } from \"../diffable/diffable\";\r\n\r\n// Vanishing gradient countermeasures\r\nfunction positive(x: number): number {\r\n    return (isFinite(x) && x > 0) ? x : Number.MIN_VALUE;\r\n}\r\nfunction product(x: number, y: number): number {\r\n    const xy = x * y;\r\n    return (xy === 0) ? (Math.sign(x) * Math.sign(y) * Number.MIN_VALUE) : xy;\r\n}\r\n\r\nclass ActivationLogistic extends ExprUnary {\r\n    static isSymmetric: Boolean = true;\r\n\r\n    protected valueImpl(): number {\r\n        return positive(1 / (1 + Math.exp(-this.arg.value())));\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        const val = this.arg.value();\r\n        const d = positive(1 / (Math.exp(val) + 2 + Math.exp(-val)));\r\n        return product(this.arg.deriv(v), d);\r\n    }\r\n\r\n    print(): string {\r\n        return \"σ(\" + this.arg.print() + \")\";\r\n    }\r\n}\r\n\r\nclass ActivationSoftplus extends ExprUnary {\r\n    static isSymmetric: Boolean = false;\r\n\r\n    protected valueImpl(): number {\r\n        const x = this.arg.value();\r\n        const y = 1 + Math.exp(x);\r\n        return isFinite(y) ? positive(Math.log(y)) : x;\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        const d = positive(1 / (1 + Math.exp(-this.arg.value())));\r\n        return product(this.arg.deriv(v), d);\r\n    }\r\n\r\n    print(): string {\r\n        return \"ReLU(\" + this.arg.print() + \")\";\r\n    }\r\n}\r\n\r\nexport interface ActivationClass {\r\n    isSymmetric: Boolean\r\n    new(arg: Differentiable): ExprUnary;\r\n}\r\nexport { ActivationLogistic, ActivationSoftplus };\r\n","import { Differentiable, ExprBinary, Variable } from \"../diffable/diffable\";\r\n\r\nclass ErrorSquared extends ExprBinary {\r\n    protected valueImpl(): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        return diff * diff;\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        return 2 * diff * (this.left.deriv(v) - this.right.deriv(v));\r\n    }\r\n\r\n    print(): string {\r\n        return \"(\" + this.left.print() + \" - \" + this.right.value() + \")^2\";\r\n    }\r\n}\r\n\r\nclass ErrorTessaracted extends ExprBinary {\r\n    protected valueImpl(): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        let dsq = diff * diff;\r\n        return dsq * dsq;\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        return 4 * diff * diff * diff * (this.left.deriv(v) - this.right.deriv(v));\r\n    }\r\n\r\n    print(): string {\r\n        return \"(\" + this.left.print() + \" - \" + this.right.value() + \")^4\";\r\n    }\r\n}\r\n\r\nexport interface ErrorClass {\r\n    new(left: Differentiable, right: Differentiable): ExprBinary;\r\n}\r\nexport { ErrorSquared, ErrorTessaracted };\r\n","import { Differentiable, Variable, BinProduct } from \"../diffable/diffable\";\r\nimport Trainable from \"./trainable\";\r\nimport Neuron from \"./neurons\";\r\n\r\nabstract class Parameter implements Trainable {\r\n    private adjustments: number[];\r\n    private velocity: number;\r\n\r\n    constructor() {\r\n        this.adjustments = [];\r\n        this.velocity = 0;\r\n    }\r\n\r\n    abstract get(): Variable;\r\n    value(): number { return this.get().value(); }\r\n    print(): string { return this.get().print(); }\r\n\r\n    abstract getExpr(): Differentiable;\r\n\r\n    study(err: Differentiable) {\r\n        this.adjustments.push(-this.studyImpl(err));\r\n    }\r\n    protected abstract studyImpl(error: Differentiable): number;\r\n\r\n    learn(sensitivity: number, friction: number) {\r\n        if (this.adjustments.length > 0) {\r\n            const adjustment = this.adjustments.reduce(\r\n                (acc, t) => acc + t, 0\r\n            ) * sensitivity / this.adjustments.length;\r\n            this.velocity = this.velocity * (1 - friction) + adjustment;\r\n            this.learnImpl(this.velocity);\r\n            this.adjustments = [];\r\n        }\r\n    }\r\n    protected abstract learnImpl(adjustment: number): void;\r\n}\r\n\r\nclass Weight extends Parameter {\r\n    private static count: number = 0;\r\n\r\n    private w: Variable;\r\n    private t: BinProduct;\r\n\r\n    constructor(n: Neuron, weight: number) {\r\n        super();\r\n        this.w = new Variable(\"w\" + Weight.count, weight);\r\n        this.t = new BinProduct(this.w, n.get());\r\n        ++Weight.count;\r\n    }\r\n\r\n    get(): Variable { return this.w; }\r\n    getExpr(): Differentiable { return this.t; }\r\n\r\n    protected studyImpl(err: Differentiable): number {\r\n        return err.deriv(this.w);\r\n    }\r\n    protected learnImpl(adjustment: number) {\r\n        this.w.bind(this.value() + adjustment);\r\n    }\r\n\r\n    reset() {\r\n        this.t.reset();\r\n    }\r\n}\r\n\r\nclass Bias extends Parameter {\r\n    static count: number = 0;\r\n\r\n    private b: Variable;\r\n\r\n    constructor() {\r\n        super();\r\n        this.b = new Variable(\"b\" + Bias.count, 0);\r\n        ++Bias.count;\r\n    }\r\n\r\n    get(): Variable { return this.b; }\r\n    getExpr(): Differentiable { return this.get(); }\r\n\r\n    protected studyImpl(error: Differentiable): number {\r\n        return error.deriv(this.b);\r\n    }\r\n    protected learnImpl(adjustment: number) {\r\n        this.b.bind(this.value() + adjustment);\r\n    }\r\n}\r\n\r\nexport { Weight, Bias };\r\n","import {\r\n    Differentiable,\r\n    ExprUnary, ExprBinary,\r\n    Variable,\r\n    VarSum\r\n} from \"../diffable/diffable\";\r\nimport Trainable from \"./trainable\";\r\nimport { Weight, Bias } from \"./parameters\";\r\nimport { ActivationClass } from \"./activation\";\r\nimport { ErrorClass } from \"./error\";\r\n\r\nabstract class Neuron {\r\n    abstract get(): Differentiable;\r\n    value(): number { return this.get().value(); }\r\n    abstract print(): string;\r\n}\r\n\r\nclass InputNeuron extends Neuron {\r\n    private x: Variable;\r\n\r\n    constructor(name: string) {\r\n        super();\r\n        this.x = new Variable(name);\r\n    }\r\n\r\n    get(): Differentiable { return this.x; }\r\n    print(): string { return this.x.print(); }\r\n\r\n    bind(val: number) { this.x.bind(val); }\r\n}\r\n\r\nabstract class TrainableNeuron extends Neuron implements Trainable {\r\n    private weights: Weight[];\r\n    private bias: Bias;\r\n    private sum: VarSum;\r\n    private exp: ExprUnary;\r\n\r\n    constructor(Act: ActivationClass, ...weights: Weight[]) {\r\n        super();\r\n        this.weights = weights;\r\n        this.bias = new Bias();\r\n\r\n        const terms = this.weights.map((c) => c.getExpr());\r\n        this.sum = new VarSum(...terms, this.bias.getExpr());\r\n        this.exp = new Act(this.sum);\r\n    }\r\n\r\n    get(): Differentiable { return this.exp; }\r\n    print(): string {\r\n        return \"[\" + this.weights.map(\r\n            (w) => w.value()\r\n        ).join(\" \") + \"] \" + this.bias.value();\r\n    }\r\n\r\n    getWeight(parentIndex: number): Weight { return this.weights[parentIndex]; }\r\n    getBias(): Bias { return this.bias; }\r\n\r\n    study(error: Differentiable) {\r\n        this.weights.forEach((w) => w.study(error));\r\n        this.bias.study(error);\r\n    }\r\n    learn(sensitivity: number, friction: number) {\r\n        this.weights.forEach((w) => w.learn(sensitivity, friction));\r\n        this.bias.learn(sensitivity, friction);\r\n    }\r\n\r\n    reset() {\r\n        this.exp.reset();\r\n        this.sum.reset();\r\n        this.weights.forEach((w) => w.reset());\r\n    }\r\n}\r\n\r\nclass HiddenNeuron extends TrainableNeuron {}\r\n\r\nclass OutputNeuron extends TrainableNeuron {\r\n    private y: Variable;\r\n    private err: ExprBinary;\r\n\r\n    constructor(\r\n        name: string,\r\n        Act: ActivationClass,\r\n        Err: ErrorClass,\r\n        ...weights: Weight[]\r\n    ) {\r\n        super(Act, ...weights);\r\n        this.y = new Variable(name);\r\n        this.err = new Err(this.get(), this.y);\r\n    }\r\n\r\n    getErr(): Differentiable { return this.err; }\r\n    valueErr(): number { return this.getErr().value(); }\r\n    printErr(): string { return this.getErr().print(); }\r\n\r\n    bind(val: number) { this.y.bind(val); }\r\n\r\n    reset() {\r\n        super.reset();\r\n        this.err.reset();\r\n    }\r\n}\r\n\r\nexport default Neuron;\r\nexport { InputNeuron, TrainableNeuron, HiddenNeuron, OutputNeuron };\r\n","function standardBasis(dim: number): number[][] {\r\n    let basis: number[][] = new Array(dim);\r\n    for (let i = 0; i < dim; ++i) {\r\n        basis[i] = new Array(dim).fill(0);\r\n        basis[i][i] = 1;\r\n    }\r\n    return basis;\r\n}\r\nfunction standardHalfCube(dim: number): number[][] {\r\n    const last: number = dim - 1;\r\n    const count: number = 1 << last; // 2^last\r\n    let vectors: number[][] = new Array(dim);\r\n    const srd: number = 1 / Math.sqrt(dim);\r\n    vectors[last] = new Array(count).fill(-srd)\r\n    for (let i = 0; i < last; ++i) {\r\n        const blockSize: number = 1 << i; // 2^i\r\n        vectors[i] = new Array(blockSize).fill(-srd).concat(\r\n            new Array(blockSize).fill(srd)\r\n        );\r\n        for (let j = i + 1; j < last; ++j) {\r\n            vectors[i] = vectors[i].concat(vectors[i]);\r\n        }\r\n    }\r\n    return vectors;\r\n}\r\n\r\nfunction orthoHalfBasis(dim: number): number[][] {\r\n    return concat(standardBasis(dim), standardHalfCube(dim));\r\n}\r\nfunction orthoFullBasis(dim: number): number[][] {\r\n    const half = concat(standardBasis(dim), standardHalfCube(dim));\r\n    return concat(half, half.map((row) => row.map((n) => -n)));\r\n}\r\nfunction orthoVectors(dim: number, count: number, full: boolean): number[][] {\r\n    const basis = (full) ? orthoFullBasis(dim) : orthoHalfBasis(dim);\r\n    let vectors: number[][] = []\r\n    while (vectors.length < count) {\r\n        vectors = vectors.concat(transpose(randomRotate(basis, 0)));\r\n    }\r\n    return vectors.slice(0, count);\r\n}\r\n\r\nfunction transpose(matrix: number[][]): number[][] {\r\n    const width = matrix[0].length;\r\n    let t = new Array(width);\r\n    for (let i = 0; i < width; ++i) {\r\n        t[i] = column(matrix, i);\r\n    }\r\n    return t;\r\n}\r\nfunction concat(a: number[][], b: number[][]): number[][] {\r\n    return a.map((row, index) => row.concat(b[index]));\r\n}\r\nfunction multiply(a: number[][], b: number[][]) {\r\n    const aHeight: number = a.length;\r\n    const bHeight: number = b.length;\r\n    const bWidth: number = b[0].length;\r\n    let c: number[][] = new Array(aHeight);\r\n    for (let i = 0; i < aHeight; ++i) {\r\n        c[i] = new Array(bWidth).fill(0);\r\n        for (let j = 0; j < bWidth; ++j) {\r\n            for (let k = 0; k < bHeight; ++k) {\r\n                c[i][j] += a[i][k] * b[k][j];\r\n            }\r\n        }\r\n    }\r\n    return c;\r\n}\r\n\r\nfunction randomRotation(dim: number, x: number, y: number): number[][] {\r\n    if (x > y) { return randomRotation(dim, y, x); }\r\n    let basis: number[][] = standardBasis(dim);\r\n    basis[x][x] = Math.random();\r\n    basis[y][y] = basis[x][x];\r\n    basis[y][x] = Math.sqrt(1 - basis[x][x] * basis[x][x]);\r\n    basis[x][y] = -basis[y][x];\r\n    return basis;\r\n}\r\nfunction randomRotate(matrix: number[][], x: number): number[][] {\r\n    const dim: number = matrix.length;\r\n    let rotations: number[][][] = new Array(dim - 1);\r\n    for (let i = 0; i < x; ++i) {\r\n        rotations[i] = randomRotation(dim, x, i);\r\n    }\r\n    for (let i = x + 1; i < dim; ++i) {\r\n        rotations[i - 1] = randomRotation(dim, x, i);\r\n    }\r\n    return multiply(rotations.reduce(\r\n        (acc, rotation) => {\r\n            const a = multiply(acc, rotation);\r\n            return a;\r\n        }, standardBasis(dim)\r\n    ), matrix);\r\n}\r\n\r\nfunction column(matrix: number[][], c: number): number[] {\r\n    return matrix.map((row) => row[c]);\r\n}\r\nfunction dotProduct(u: number[], v: number[]): number {\r\n    return u.reduce((acc, n, i) => acc + n * v[i], 0);\r\n}\r\n\r\nfunction print(matrix: number[][]): string {\r\n    return matrix.map((row) => row.join()).join('\\n');\r\n}\r\n\r\nexport {\r\n    standardBasis, standardHalfCube,\r\n    orthoHalfBasis, orthoFullBasis, orthoVectors,\r\n    transpose, concat, multiply,\r\n    randomRotation, randomRotate,\r\n    column, dotProduct,\r\n    print\r\n};\r\n","import Neuron, {\r\n    InputNeuron,\r\n    TrainableNeuron, HiddenNeuron, OutputNeuron\r\n} from \"./neurons\";\r\nimport { Differentiable, VarSum } from \"../diffable/diffable\";\r\nimport { ActivationClass } from \"./activation\";\r\nimport { ErrorClass } from \"./error\";\r\nimport { Weight, Bias } from \"./parameters\";\r\nimport Trainable from \"./trainable\";\r\nimport { orthoVectors } from \"./matrices\";\r\n\r\nabstract class Layer {\r\n    abstract get(): Neuron[];\r\n    print(): string {\r\n        return \"[\\n\" + this.get().map(\r\n            (n) => \"\\t\" + n.print()\r\n        ).join(\"\\n\") + \"\\n]\";\r\n    }\r\n\r\n    size(): number { return this.get().length; }\r\n}\r\n\r\nclass InputLayer extends Layer {\r\n    private neurons: Map<string, InputNeuron>;\r\n\r\n    constructor(...names: string[]) {\r\n        super();\r\n        this.neurons = new Map();\r\n        for (const name of names) {\r\n            this.neurons.set(name, new InputNeuron(name));\r\n        }\r\n    }\r\n\r\n    get(): Neuron[] { return Array.from(this.neurons.values()); }\r\n    getNeuron(name: string): Neuron | undefined {\r\n        return this.neurons.get(name);\r\n    }\r\n\r\n    values(): Map<string, number> {\r\n        let map = new Map<string, number>();\r\n        for (const [name, node] of this.neurons) {\r\n            map.set(name, node.value());\r\n        }\r\n        return map;\r\n    }\r\n\r\n    bind(vals: Map<string, number>) {\r\n        for (const [name, neuron] of this.neurons) {\r\n            neuron.bind(vals.get(name) ?? 0);\r\n        }\r\n    }\r\n}\r\n\r\nabstract class TrainableLayer extends Layer implements Trainable {\r\n    abstract get(): TrainableNeuron[];\r\n\r\n    study(error: Differentiable) {\r\n        this.get().forEach((n) => n.study(error));\r\n    }\r\n    learn(sensitivity: number, friction: number) {\r\n        this.get().forEach((n) => n.learn(sensitivity, friction));\r\n    }\r\n\r\n    reset() {\r\n        this.get().forEach((n) => n.reset());\r\n    }\r\n}\r\n\r\nclass HiddenLayer extends TrainableLayer {\r\n    private neurons: TrainableNeuron[];\r\n\r\n    constructor(parent: Layer, Act: ActivationClass, size: number) {\r\n        super();\r\n        this.neurons = [];\r\n        const parentNeurons: Neuron[] = parent.get();\r\n        const weightVectors: number[][] = orthoVectors(\r\n            parentNeurons.length,\r\n            size,\r\n            !Act.isSymmetric\r\n        );\r\n        for (let i = 0; i < size; ++i) {\r\n            this.neurons.push(new HiddenNeuron(Act, ...parentNeurons.map(\r\n                (n, j) => new Weight(n, weightVectors[i][j])\r\n            )));\r\n        }\r\n    }\r\n\r\n    get(): TrainableNeuron[] { return this.neurons; }\r\n    getNeuron(index: number): Neuron {\r\n        return this.neurons[index];\r\n    }\r\n\r\n    getWeight(childIndex: number, parentIndex: number): Weight {\r\n        return this.neurons[childIndex].getWeight(parentIndex);\r\n    }\r\n    getBias(childIndex: number): Bias {\r\n        return this.neurons[childIndex].getBias();\r\n    }\r\n\r\n    values(): number[] { return this.neurons.map((n) => n.value())};\r\n}\r\n\r\nclass OutputLayer extends TrainableLayer {\r\n    private neurons: Map<string, OutputNeuron>;\r\n    private err: VarSum;\r\n\r\n    constructor(\r\n        parent: Layer,\r\n        Act: ActivationClass,\r\n        Err: ErrorClass,\r\n        ...names: string[]\r\n    ) {\r\n        super();\r\n        this.neurons = new Map();\r\n        const parentNeurons: Neuron[] = parent.get();\r\n        const weightVectors: number[][] = orthoVectors(\r\n            parentNeurons.length,\r\n            names.length,\r\n            !Act.isSymmetric\r\n        );\r\n        for (let i = 0; i < names.length; ++i) {\r\n            this.neurons.set(\r\n                names[i],\r\n                new OutputNeuron(names[i], Act, Err, ...parentNeurons.map(\r\n                    (n, j) => new Weight(n, weightVectors[i][j])\r\n                ))\r\n            );\r\n        }\r\n        this.err = new VarSum(\r\n            ...Array.from(this.neurons.values()).map((n) => n.getErr())\r\n        );\r\n    }\r\n\r\n    get(): TrainableNeuron[] { return Array.from(this.neurons.values()); }\r\n    getNeuron(name: string): Neuron | undefined {\r\n        return this.neurons.get(name);\r\n    }\r\n\r\n    getWeight(childName: string, parentIndex: number): Weight | undefined {\r\n        return this.neurons.get(childName)?.getWeight(parentIndex);\r\n    }\r\n    getBias(name: string): Bias | undefined {\r\n        return this.neurons.get(name)?.getBias();\r\n    }\r\n\r\n    getErr(): Differentiable { return this.err; }\r\n    valueErr(): number { return this.getErr().value(); }\r\n    printErr(): string { return this.getErr().print(); }\r\n\r\n    values(): Map<string, number> {\r\n        let map = new Map<string, number>();\r\n        for (const [name, node] of this.neurons) {\r\n            map.set(name, node.value());\r\n        }\r\n        return map;\r\n    }\r\n\r\n    bind(vals: Map<string, number>) {\r\n        for (const [name, neuron] of this.neurons) {\r\n            neuron.bind(vals.get(name) ?? 0);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        this.err.reset();\r\n    }\r\n}\r\n\r\nexport default Layer;\r\nexport { InputLayer, HiddenLayer, OutputLayer };\r\n","import Layer, { InputLayer, HiddenLayer, OutputLayer } from \"./layers\";\r\nimport { ActivationClass } from \"./activation\";\r\nimport { ErrorClass } from \"./error\";\r\nimport Differentiable from \"../diffable/differentiable\";\r\n\r\ntype Input = Map<string, number>;\r\ntype Output = Map<string, number>;\r\ntype Sample = { input: Input; output: Output; };\r\n\r\nabstract class Network {\r\n    private inputLayer: InputLayer;\r\n    private hiddenLayers: HiddenLayer[];\r\n    private outputLayer: OutputLayer;\r\n\r\n    protected studied: { sample: Sample, err: number }[];\r\n\r\n    protected abstract source(count: number): Sample[];\r\n    protected abstract Act(): ActivationClass;\r\n    protected abstract Err(): ErrorClass;\r\n    protected abstract hiddenSizes(): number[];\r\n\r\n    constructor() {\r\n        this.studied = [];\r\n\r\n        const { input, output } = this.source(1)[0];\r\n        const inputNames = Array.from(input.keys());\r\n        const outputNames = Array.from(output.keys());\r\n\r\n        this.inputLayer = new InputLayer(...inputNames);\r\n        this.hiddenLayers = [];\r\n        let last: Layer = this.inputLayer;\r\n        for (const size of this.hiddenSizes()) {\r\n            this.hiddenLayers.push(new HiddenLayer(last, this.Act(), size));\r\n            last = this.hiddenLayers[this.hiddenLayers.length - 1];\r\n        }\r\n        this.outputLayer = new OutputLayer(\r\n            last,\r\n            this.Act(),\r\n            this.Err(),\r\n            ...outputNames\r\n        );\r\n    }\r\n\r\n    print(): string {\r\n        return this.hiddenLayers.map(\r\n            (n) => n.print()\r\n        ).join(\"\\n\") + \"\\n\" + this.outputLayer.print();\r\n    }\r\n\r\n    getInputLayer(): InputLayer { return this.inputLayer; }\r\n    getHiddenLayer(i: number): HiddenLayer { return this.hiddenLayers[i]; }\r\n    getOutputLayer(): OutputLayer { return this.outputLayer; }\r\n\r\n    getErr(): Differentiable { return this.outputLayer.getErr(); }\r\n    valueErr(): number { return this.outputLayer.valueErr(); }\r\n    printErr(): string { return this.outputLayer.printErr(); }\r\n\r\n    avgErr(): number {\r\n        return this.studied.reduce(\r\n            (acc, study) => acc + study.err, 0\r\n        ) / this.studied.length;\r\n    }\r\n\r\n    bind(input: Input, output: Output | null = null) {\r\n        this.reset();\r\n        this.inputLayer.bind(input);\r\n        if (output) { this.outputLayer.bind(output); }\r\n    }\r\n    getOutput(input: Input): Output {\r\n        this.bind(input);\r\n        return this.outputLayer.values();\r\n    }\r\n\r\n    study(count: number) {\r\n        this.studied = this.source(count).map((sample) => {\r\n            this.bind(sample.input, sample.output);\r\n            const err = this.outputLayer.getErr();\r\n            this.hiddenLayers.forEach((layer) => layer.study(err));\r\n            this.outputLayer.study(err);\r\n            return { sample: sample, err: err.value() };\r\n        });\r\n    }\r\n    learn(sensitivity: number, friction: number) {\r\n        this.hiddenLayers.forEach(\r\n            (layer) => layer.learn(sensitivity, friction)\r\n        );\r\n        this.outputLayer.learn(sensitivity, friction);\r\n    }\r\n\r\n    reset() {\r\n        this.hiddenLayers.forEach((layer) => layer.reset());\r\n        this.outputLayer.reset();\r\n    }\r\n}\r\n\r\nabstract class TestableNetwork extends Network {\r\n    protected abstract tests(): Sample[];\r\n    rsq(): number {\r\n        const tests = this.tests();\r\n        return tests.reduce((acc, { input, output }) => {\r\n            this.bind(input, output);\r\n            return acc + this.valueErr();\r\n        }, 0) / tests.length;\r\n    }\r\n}\r\n\r\nexport { Network, TestableNetwork };\r\n","import * as Neuro from \"../neuro/neuro\";\r\n\r\nclass Network42 extends Neuro.TestableNetwork {\r\n    protected source(count: number) {\r\n        this.studied.sort((a, b) => b.err - a.err);\r\n        let arr = this.studied.slice(0, count / 2).map(\r\n            (study) => study.sample\r\n        );\r\n        console.log(arr);\r\n        for (let i = arr.length; i < count; ++i) {\r\n            arr.push({\r\n                input: new Map<string, number>([['x', Math.random()]]),\r\n                output: new Map<string, number>([['y', 42]])\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n    protected Act() { return Neuro.ActivationSoftplus; }\r\n    protected Err() { return Neuro.ErrorSquared; }\r\n    protected hiddenSizes() { return []; }\r\n\r\n    private cachedTests = [\r\n        {\r\n            input: new Map<string, number>([['x', 0]]),\r\n            output: new Map<string, number>([['y', 42]])\r\n        },\r\n        {\r\n            input: new Map<string, number>([['x', 1]]),\r\n            output: new Map<string, number>([['y', 42]])\r\n        }\r\n    ];\r\n    protected tests() { return this.cachedTests; }\r\n\r\n    // Convenience Methods\r\n\r\n    m(): number {\r\n        return this.getOutputLayer().getWeight('y', 0)!.value();\r\n    }\r\n    b(): number {\r\n        return this.getOutputLayer().getBias('y')!.value();\r\n    }\r\n\r\n    value(x: number): number {\r\n        return this.getOutput(new Map<string, number>([['x', x]])).get('y')!;\r\n    }\r\n}\r\n\r\nexport default Network42;\r\n","import React, { Component } from \"react\";\r\nimport Table, { TableRow } from \"./Table\";\r\nimport Form, { FormState } from \"../Form\";\r\nimport Network42 from \"./Network42\";\r\n\r\nclass Asteria42 extends Component<{}> {\r\n    net: Network42;\r\n\r\n    state: { data: TableRow[]; input: number };\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.net = new Network42();\r\n        this.state = {\r\n            data: [{ m: this.net.m(), b: this.net.b(), r: undefined }],\r\n            input: 0,\r\n        };\r\n    }\r\n\r\n    train(samples: number, sensitivity: number, friction: number) {\r\n        this.net.study(samples);\r\n        const rsq = this.net.rsq();\r\n        let { data } = this.state;\r\n        this.net.learn(sensitivity, friction);\r\n        data[data.length - 1].r = Math.sqrt(rsq);\r\n        data.push({ m: this.net.m(), b: this.net.b(), r: undefined });\r\n        this.setState({ data: data });\r\n    }\r\n\r\n    handleChange = (event: { target: { name: any; value: any }; }) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmit = (state: FormState) => {\r\n        for (let i: number = 0; i < state.generations; ++i) {\r\n            this.train(state.samples, state.sensitivity, state.friction);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { data, input } = this.state;\r\n\r\n        let output: number = NaN;\r\n        if (isFinite(input)) {\r\n            output = this.net.value(input);\r\n        }\r\n\r\n        return (\r\n          <div className=\"Asteria42\">\r\n            <h2>About</h2>\r\n            <p>Asteria wants to learn the answer to life, the universe, and everything, but she needs your help!<br />\r\n            Asteria is the simplest possible neural network: a single input neuron linked to a single output neuron.<br />\r\n            She has no hidden layers, so Asteria is really just a linear relation passed through an activation function (softplus).<br />\r\n            The full equation for Asteria is y=ReLU(mx+b). Her initial state is y=ReLU(mx), where m ranges randomly between -1 and 1.<br />\r\n            Asteria will be trained to minimize R^2, the mean of (y-42)^2 over randomly-sampled values of x ranging from 0 to 1.</p>\r\n\r\n            <h2>Testing</h2>\r\n            <p>If she has learned well, Asteria should output 42 no matter what input we give her. Test it out here!</p>\r\n            <label>x=</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"input\"\r\n              value={input}\r\n              onChange={this.handleChange} />\r\n            <br />\r\n            <label>y=</label>\r\n            <input readOnly\r\n              type=\"text\"\r\n              name=\"output\"\r\n              value={output} />\r\n\r\n            <h2>Training</h2>\r\n            <p>We want Asteria to ultimately settle on y=42~ReLU(42), where m=0 and b=42.<br />\r\n            To determine how to adjust m and b, Asteria samples values of x between 0 to 1 (you decide how many) and does fancy backpropagation.<br />\r\n            Sensitivity determines the strength of the adjustments to m and b in each generation of Asteria.<br />\r\n            Friction determines how much of the previous adjustment Asteria repeats in the next generation.<br />\r\n            If sensitivity is negative, Asteria will try to maximize error instead of minimizing it.<br />\r\n            If sensitivity is too large or friction is too low, Asteria will overshoot on her adjustments and fail to settle anywhere.</p>\r\n            <Form handleSubmit={this.handleSubmit} />\r\n            <Table data={data} />\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Asteria42;\r\n","import React from \"react\";\r\n\r\nexport type TableRow = {\r\n    r: number | undefined;\r\n};\r\n\r\nfunction TableHeader(): JSX.Element {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          <th>G</th>\r\n          <th>R</th>\r\n        </tr>\r\n      </thead>\r\n    );\r\n}\r\n\r\nfunction TableBody(props: { data: TableRow[] }): JSX.Element {\r\n    const rows = props.data.map((row: TableRow, index: number) => {\r\n        const { r } = row;\r\n        return (\r\n          <tr key={index}>\r\n            <td>{index}</td>\r\n            <td>{r ?? \"\"}</td>\r\n          </tr>\r\n        )\r\n    }).reverse();\r\n    return (\r\n        <tbody>{rows}</tbody>\r\n    );\r\n}\r\n\r\nfunction Table(props: { data: TableRow[] }) {\r\n    const { data } = props;\r\n    return (\r\n      <table>\r\n        <TableHeader />\r\n        <TableBody data={data} />\r\n      </table>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import * as Neuro from \"../neuro/neuro\";\r\n\r\nclass NetworkNAND extends Neuro.TestableNetwork {\r\n    protected source(count: number) {\r\n        this.studied.sort((a, b) => b.err - a.err);\r\n        const quarter = count / 4;\r\n        let arr = this.studied.slice(quarter, 2 * quarter).map(\r\n            (study) => study.sample\r\n        );\r\n        for (let i = arr.length; i < count; ++i) {\r\n            const x = Math.random();\r\n            const y = Math.random();\r\n            const xNANDy = (x > 0.5 && y > 0.5) ? 0 : 1;\r\n            arr.push({\r\n                input: new Map<string, number>([['x', x], ['y', y]]),\r\n                output: new Map<string, number>([[\"xNANDy\", xNANDy]])\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n    protected Act() { return Neuro.ActivationLogistic; }\r\n    protected Err() { return Neuro.ErrorSquared; }\r\n    protected hiddenSizes() { return [2]; }\r\n\r\n    private cachedTests = (() => {\r\n        let tests = [];\r\n        for (let x = 0; x <= 1; x += 0.1) {\r\n            for (let y = 0; y <= 1; y += 0.1) {\r\n                const xNANDy = (x > 0.5 && y > 0.5) ? 0 : 1;\r\n                tests.push({\r\n                    input: new Map<string, number>([['x', x], ['y', y]]),\r\n                    output: new Map<string, number>([[\"xNANDy\", xNANDy]])\r\n                });\r\n            }\r\n        }\r\n        return tests;\r\n    })();\r\n    protected tests() { return this.cachedTests; }\r\n\r\n    // Convenience Methods\r\n\r\n    value(x: number, y: number): number {\r\n        return this.getOutput(\r\n            new Map<string, number>([['x', x], ['y', y]])\r\n        ).get(\"xNANDy\")!;\r\n    }\r\n}\r\n\r\nexport default NetworkNAND;\r\n","import React, { Component } from \"react\";\r\nimport Table, { TableRow } from \"./Table\";\r\nimport Form, { FormState } from \"../Form\";\r\nimport NetworkNAND from \"./NetworkNAND\";\r\n\r\nclass AsteriaNAND extends Component<{}> {\r\n    net: NetworkNAND;\r\n\r\n    state: { data: TableRow[]; x: 0, y: 0 };\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.net = new NetworkNAND();\r\n        this.state = { data: [{ r: undefined }], x: 0, y: 0 };\r\n    }\r\n\r\n    train(samples: number, sensitivity: number, friction: number) {\r\n        this.net.study(samples);\r\n        const rsq = this.net.rsq();\r\n        let { data } = this.state;\r\n        data[data.length - 1].r = Math.sqrt(rsq);\r\n        this.net.learn(sensitivity, friction);\r\n        data.push({ r: undefined });\r\n        this.setState({ data: data });\r\n    }\r\n\r\n    handleChange = (event: { target: { name: any; value: any }; }) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmit = (state: FormState) => {\r\n        for (let i: number = 0; i < state.generations; ++i) {\r\n            this.train(state.samples, state.sensitivity, state.friction);\r\n        }\r\n        console.log(this.net.print());\r\n    };\r\n\r\n    render() {\r\n        const { data, x, y } = this.state;\r\n\r\n        let output: number = NaN;\r\n        if (isFinite(x) && isFinite(y)) {\r\n            output = this.net.value(x, y);\r\n        }\r\n\r\n        return (\r\n          <div className=\"Asteria42\">\r\n            <h2>Testing</h2>\r\n            <label>x</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"x\"\r\n              value={x}\r\n              onChange={this.handleChange} />\r\n            <br />\r\n            <label>y</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"y\"\r\n              value={y}\r\n              onChange={this.handleChange} />\r\n            <br />\r\n            <label>Output</label>\r\n            <input readOnly\r\n              type=\"text\"\r\n              name=\"output\"\r\n              value={output} />\r\n\r\n            <h2>Training</h2>\r\n            <Form handleSubmit={this.handleSubmit} />\r\n            <Table data={data} />\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AsteriaNAND;\r\n","import React from \"react\";\r\n\r\nexport type TableRow = {\r\n    r: number | undefined;\r\n};\r\n\r\nfunction TableHeader(): JSX.Element {\r\n    return (\r\n      <thead>\r\n        <tr>\r\n          <th>G</th>\r\n          <th>R</th>\r\n        </tr>\r\n      </thead>\r\n    );\r\n}\r\n\r\nfunction TableBody(props: { data: TableRow[] }): JSX.Element {\r\n    const rows = props.data.map((row: TableRow, index: number) => {\r\n        const { r } = row;\r\n        return (\r\n          <tr key={index}>\r\n            <td>{index}</td>\r\n            <td>{r ?? \"\"}</td>\r\n          </tr>\r\n        )\r\n    }).reverse();\r\n    return (\r\n        <tbody>{rows}</tbody>\r\n    );\r\n}\r\n\r\nfunction Table(props: { data: TableRow[] }) {\r\n    const { data } = props;\r\n    return (\r\n      <table>\r\n        <TableHeader />\r\n        <TableBody data={data} />\r\n      </table>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import * as Neuro from \"../neuro/neuro\";\r\n\r\nclass NetworkXOR extends Neuro.Network {\r\n    protected source(count: number) {\r\n        let arr = [];\r\n        for (let i = 0; i < count; ++i) {\r\n            const x = Math.random();\r\n            const y = Math.random();\r\n            const xXORy = ((x > 0.5) === (y > 0.5)) ? 0 : 1;\r\n            arr.push({\r\n                input: new Map<string, number>([['x', x], ['y', y]]),\r\n                output: new Map<string, number>([[\"xXORy\", xXORy]])\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n    protected Act() { return Neuro.ActivationLogistic; }\r\n    protected Err() { return Neuro.ErrorSquared; }\r\n    protected hiddenSizes() { return [4, 4, 4, 2]; }\r\n\r\n    // Convenience Methods\r\n\r\n    value(x: number, y: number): number {\r\n        return this.getOutput(\r\n            new Map<string, number>([['x', x], ['y', y]])\r\n        ).get(\"xXORy\")!;\r\n    }\r\n}\r\n\r\nexport default NetworkXOR;\r\n","import React, { Component } from \"react\";\r\nimport Table, { TableRow } from \"./Table\";\r\nimport Form, { FormState } from \"../Form\";\r\nimport NetworkXOR from \"./NetworkXOR\";\r\n\r\nclass AsteriaXOR extends Component<{}> {\r\n    net: NetworkXOR;\r\n\r\n    state: { data: TableRow[]; x: 0, y: 0 };\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.net = new NetworkXOR();\r\n        this.state = { data: [{ r: undefined }], x: 0, y: 0 };\r\n    }\r\n\r\n    train(samples: number, sensitivity: number, friction: number) {\r\n        this.net.study(samples);\r\n        const rsq = this.net.avgErr();\r\n        let { data } = this.state;\r\n        data[data.length - 1].r = rsq;\r\n        this.net.learn(sensitivity, friction);\r\n        data.push({ r: undefined });\r\n        this.setState({ data: data });\r\n    }\r\n\r\n    handleChange = (event: { target: { name: any; value: any }; }) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmit = (state: FormState) => {\r\n        for (let i: number = 0; i < state.generations; ++i) {\r\n            this.train(state.samples, state.sensitivity, state.friction);\r\n        }\r\n        console.log(this.net.print());\r\n    };\r\n\r\n    render() {\r\n        const { data, x, y } = this.state;\r\n\r\n        let output: number = NaN;\r\n        if (isFinite(x) && isFinite(y)) {\r\n            output = this.net.value(x, y);\r\n        }\r\n\r\n        return (\r\n          <div className=\"Asteria42\">\r\n            <h2>Testing</h2>\r\n            <label>x</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"x\"\r\n              value={x}\r\n              onChange={this.handleChange} />\r\n            <br />\r\n            <label>y</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"y\"\r\n              value={y}\r\n              onChange={this.handleChange} />\r\n            <br />\r\n            <label>Output</label>\r\n            <input readOnly\r\n              type=\"text\"\r\n              name=\"output\"\r\n              value={output} />\r\n\r\n            <h2>Training</h2>\r\n            <Form handleSubmit={this.handleSubmit} />\r\n            <Table data={data} />\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AsteriaXOR;\r\n","import React from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport Asteria42 from \"./asteria42/Asteria42\";\r\nimport AsteriaNAND from \"./asteriaNAND/AsteriaNAND\";\r\nimport AsteriaXOR from \"./asteriaXOR/AsteriaXOR\";\r\n\r\nfunction App() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <nav>\r\n            [<Link to=\"/Asteria/42\">42</Link>]\r\n            [<Link to=\"/Asteria/NAND\">NAND</Link>]\r\n            [<Link to=\"/Asteria/XOR\">XOR</Link>]\r\n\t\t\t\t\t</nav>\r\n\t\t\t\t</div>\r\n        <Switch>\r\n          <Route path=\"/Asteria/42\">\r\n            <Asteria42 />\r\n          </Route>\r\n          <Route path=\"/Asteria/NAND\">\r\n            <AsteriaNAND />\r\n          </Route>\r\n          <Route path=\"/Asteria/XOR\">\r\n            <AsteriaXOR />\r\n          </Route>\r\n        </Switch>\r\n\t\t\t</Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}