{"version":3,"sources":["Table.tsx","Form.tsx","diffable/variable.ts","diffable/expression.ts","diffable/operations.ts","neuro/activation.ts","neuro/error.ts","App.tsx","index.tsx"],"names":["TableHeader","TableBody","props","data","map","row","index","m","b","r","key","isFinite","reverse","Table","Form","state","handleSubmit","handleChange","event","target","name","value","setState","submitForm","samples","sensitivity","generations","this","type","min","onChange","onClick","Component","Variable","val","v","Expression","_value","NaN","_deriv","Map","valueImpl","has","set","derivImpl","get","clear","ExprUnary","arg","ExprBinary","left","right","ExprVariadic","terms","BinProduct","deriv","print","VarSum","reduce","acc","term","join","ActivationSoftplus","x","y","Math","exp","log","df","ErrorSquared","diff","App","e","expressions","i","train","Diff","Neuro","input","length","bind","sumM","sumB","sumR","reset","random","sqrt","push","forEach","expr","output","className","readOnly","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.912ef5c2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport type TableRow = {\r\n    m: number;\r\n    b: number;\r\n    r: number;\r\n};\r\n\r\nfunction TableHeader(): JSX.Element {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>G</th>\r\n                <th>m</th>\r\n                <th>b</th>\r\n                <th>R</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nfunction TableBody(props: { data: TableRow[] }): JSX.Element {\r\n    return (\r\n        <tbody>{props.data.map((row: TableRow, index: number) => {\r\n            const { m, b, r } = row;\r\n            return (\r\n                <tr key={index}>\r\n                    <td>{index}</td>\r\n                    <td>{isFinite(m) ? m : \"\"}</td>\r\n                    <td>{isFinite(b) ? b : \"\"}</td>\r\n                    <td>{isFinite(r) ? r : \"\"}</td>\r\n                </tr>\r\n            )\r\n        }).reverse()}</tbody>\r\n    );\r\n}\r\n\r\nfunction Table(props: { data: TableRow[] }) {\r\n    const { data } = props;\r\n\r\n    return (\r\n        <table>\r\n            <TableHeader />\r\n            <TableBody data={data} />\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from 'react';\r\n\r\nexport type FormState = {\r\n    samples: number;\r\n    sensitivity: number;\r\n    generations: number;\r\n};\r\n\r\nexport type FormProps = {\r\n    handleSubmit: (state: FormState) => void;\r\n};\r\n\r\nclass Form extends Component<FormProps> {\r\n    state: FormState;\r\n    handleSubmit: (state: FormState) => void;\r\n\r\n    constructor(props: FormProps) {\r\n        super(props);\r\n\r\n        this.state = { samples: 1, sensitivity: 1, generations: 1 };\r\n        this.handleSubmit = (props as any).handleSubmit;\r\n    }\r\n\r\n    handleChange = (event: { target: { name: any; value: any; }; }) => {\r\n        const { name, value } = event.target;\r\n\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    submitForm = () => {\r\n        (this.props as any).handleSubmit(this.state)\r\n    }\r\n\r\n    render() {\r\n        const { samples, sensitivity, generations } = this.state;\r\n\r\n        return (\r\n            <form>\r\n                <label>Samples</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"samples\"\r\n                    value={isFinite(samples) ? samples : \"\"}\r\n                    min=\"1\"\r\n                    onChange={this.handleChange} />\r\n                <br />\r\n                <label>Sensitivity</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"sensitivity\"\r\n                    value={isFinite(sensitivity) ? sensitivity : \"\"}\r\n                    onChange={this.handleChange} />\r\n                <br />\r\n                <label>Generations</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"generations\"\r\n                    value={isFinite(generations) ? generations : \"\"}\r\n                    min=\"0\"\r\n                    onChange={this.handleChange} />\r\n                <br />\r\n                <input type=\"button\" value=\"Train\" onClick={this.submitForm} />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n","import Differentiable from './differentiable';\r\n\r\nclass Variable implements Differentiable {\r\n    name: string;\r\n    val: number;\r\n\r\n    constructor(name: string, val: number) {\r\n        this.name = name;\r\n        this.val = val;\r\n    }\r\n\r\n    bind(val: number) { this.val = val; }\r\n\r\n    value(): number { return this.val; }\r\n    deriv(v: Variable): number { return (v === this) ? 1 : 0; }\r\n\r\n    print(): string { return this.name; }\r\n}\r\n\r\nexport default Variable;\r\n","import Differentiable from './differentiable';\r\nimport Variable from './variable';\r\n\r\nabstract class Expression implements Differentiable {\r\n    private _value: number = NaN;\r\n    value(): number {\r\n        if (!isFinite(this._value)) {\r\n            this._value = this.valueImpl();\r\n        }\r\n        return this._value;\r\n    }\r\n    protected abstract valueImpl(): number;\r\n\r\n    private _deriv = new Map<Variable, number>();\r\n    deriv(v: Variable): number {\r\n        if (!this._deriv.has(v)) {\r\n            this._deriv.set(v, this.derivImpl(v));\r\n        }\r\n        return this._deriv.get(v) as number;\r\n    }\r\n    protected abstract derivImpl(_v: Variable): number;\r\n\r\n    abstract print(): string;\r\n\r\n    reset() {\r\n        this._value = NaN;\r\n        this._deriv.clear();\r\n    }\r\n}\r\n\r\nabstract class ExprUnary extends Expression {\r\n    arg: Differentiable;\r\n\r\n    constructor(arg: Differentiable) {\r\n        super();\r\n        this.arg = arg;\r\n    }\r\n}\r\n\r\nabstract class ExprBinary extends Expression {\r\n    left: Differentiable;\r\n    right: Differentiable;\r\n\r\n    constructor(left: Differentiable, right: Differentiable) {\r\n        super();\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\n\r\nabstract class ExprVariadic extends Expression {\r\n    terms: Differentiable[];\r\n\r\n    constructor(...terms: Differentiable[]) {\r\n        super();\r\n        this.terms = terms;\r\n    }\r\n}\r\n\r\nexport default Expression;\r\nexport { ExprUnary, ExprBinary, ExprVariadic };\r\n","import { ExprBinary, ExprVariadic } from './expression';\r\nimport Variable from './variable';\r\n\r\nclass BinProduct extends ExprBinary {\r\n    protected valueImpl(): number {\r\n        return this.left.value() * this.right.value();\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        let dlr = this.left.deriv(v) * this.right.value();\r\n        let ldr = this.left.value() * this.right.deriv(v);\r\n        return dlr + ldr;\r\n    }\r\n\r\n    print(): string {\r\n        return this.left.print() + \" * \" + this.right.print();\r\n    }\r\n}\r\n\r\nclass VarSum extends ExprVariadic {\r\n    protected valueImpl(): number {\r\n        return this.terms.reduce((acc, term) => acc + term.value(), 0);\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        return this.terms.reduce((acc, term) => acc + term.deriv(v), 0);\r\n    }\r\n\r\n    print(): string {\r\n        return \"(\" + this.terms.map((term) => term.print()).join(\" + \") + \")\";\r\n    }\r\n}\r\n\r\nexport { BinProduct, VarSum };\r\n","import { ExprUnary } from '../diffable/expression';\r\nimport DVariable from '../diffable/variable';\r\n\r\nclass ActivationLogistic extends ExprUnary {\r\n    protected valueImpl(): number {\r\n        let x = this.arg.value();\r\n        let y = 1 / (1 + Math.exp(-x));\r\n        return isFinite(y) ? y : ((x < 0) ? 0 : 1);\r\n    }\r\n\r\n    protected derivImpl(v: DVariable): number {\r\n        let val = this.arg.value();\r\n        let d = this.arg.deriv(v) / (Math.exp(val) + 2 + Math.exp(-val));\r\n        return isFinite(d) ? d : 0;\r\n    }\r\n\r\n    print(): string {\r\n        return \"σ(\" + this.arg.print() + \")\";\r\n    }\r\n}\r\n\r\nclass ActivationSoftplus extends ExprUnary {\r\n    protected valueImpl(): number {\r\n        let x = this.arg.value();\r\n        let y = 1 + Math.exp(x);\r\n        return isFinite(y) ? Math.log(y) : x;\r\n    }\r\n\r\n    protected derivImpl(v: DVariable): number {\r\n        let x = this.arg.value();\r\n        let df = 1 / (1 + Math.exp(-x));\r\n        df = isFinite(df) ? df : 0;\r\n        return df * this.arg.deriv(v);\r\n    }\r\n\r\n    print(): string {\r\n        return \"ReLU(\" + this.arg.print() + \")\";\r\n    }\r\n}\r\n\r\nexport { ActivationLogistic, ActivationSoftplus };\r\n","import { ExprBinary } from '../diffable/expression';\r\nimport Variable from '../diffable/variable';\r\n\r\nclass ErrorSquared extends ExprBinary {\r\n    protected valueImpl(): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        return diff * diff;\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        return 2 * diff * (this.left.deriv(v) - this.right.deriv(v));\r\n    }\r\n\r\n    print(): string {\r\n        return \"(\" + this.left.print() + \" - \" + this.right.value() + \")^2\";\r\n    }\r\n}\r\n\r\nexport { ErrorSquared };\r\n","import React, { Component } from 'react';\r\nimport Table, { TableRow } from './Table';\r\nimport Form, { FormState } from './Form';\r\nimport * as Diff from './diffable/diffable';\r\nimport * as Neuro from './neuro/neuro';\r\n\r\nclass App extends Component<{}> {\r\n    x: Diff.Variable;\r\n    m: Diff.Variable;\r\n    b: Diff.Variable;\r\n    e: Diff.Variable;\r\n    y: Neuro.ActivationSoftplus;\r\n    r: Neuro.ErrorSquared;\r\n\r\n    expressions: Diff.Expression[];\r\n\r\n    state: { data: TableRow[]; input: number };\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.x = new Diff.Variable('x', 0);\r\n        this.m = new Diff.Variable('m', 1);\r\n        this.b = new Diff.Variable('b', 0);\r\n        this.e = new Diff.Variable(\"expect\", 42);\r\n\r\n        this.expressions = [];\r\n        this.expressions[0] = new Diff.BinProduct(this.m, this.x);\r\n        this.expressions[1] = new Diff.VarSum(this.expressions[0], this.b);\r\n\r\n        this.y = new Neuro.ActivationSoftplus(this.expressions[1]);\r\n        this.expressions[2] = this.y;\r\n\r\n        this.r = new Neuro.ErrorSquared(this.y, this.e);\r\n        this.expressions[3] = this.r;\r\n\r\n        this.state = { data: [{ m: 1, b: 0, r: NaN }], input: 0 };\r\n    }\r\n\r\n    train(samples: number, sensitivity: number) {\r\n        if (!isFinite(samples)) { return; }\r\n        if (!isFinite(sensitivity)) { return; }\r\n        if (samples <= 0) { return; }\r\n\r\n        let { data } = this.state;\r\n        let { m, b } = data[data.length - 1];\r\n\r\n        this.m.bind(m);\r\n        this.b.bind(b);\r\n\r\n        let sumM: number = 0, sumB: number = 0, sumR: number = 0;\r\n        for (let i = 0; i < samples; ++i) {\r\n            this.reset();\r\n            this.x.bind(Math.random());\r\n\r\n            sumM += this.r.deriv(this.m);\r\n            sumB += this.r.deriv(this.b);\r\n            sumR += this.r.value();\r\n        }\r\n\r\n        m -= sumM * sensitivity / samples;\r\n        b -= sumB * sensitivity / samples;\r\n\r\n        data[data.length - 1].r = Math.sqrt(sumR / samples);\r\n        data.push({ m: m, b: b, r: NaN });\r\n        this.setState({ data: data });\r\n    }\r\n\r\n    reset() {\r\n        this.expressions.forEach((expr) => { expr.reset(); });\r\n    }\r\n\r\n    handleChange = (event: { target: { name: any; value: any }; }) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmit = (state: FormState) => {\r\n        for (let i: number = 0; i < state.generations; ++i) {\r\n            this.train(state.samples, state.sensitivity);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { data, input } = this.state;\r\n\r\n        let output: number = NaN;\r\n        if (isFinite(input)) {\r\n            const { m, b } = data[data.length - 1];\r\n            this.reset();\r\n            this.m.bind(m);\r\n            this.b.bind(b);\r\n            this.x.bind(input);\r\n            output = this.y.value();\r\n        }\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h1>Asteria</h1>\r\n                    <p>Asteria wants to learn the answer to life, the universe, and everything, but she needs your help!</p>\r\n                </header>\r\n\r\n                <h2>About</h2>\r\n                <p>Asteria is the simplest possible neural network: a single input neuron linked to a single output neuron.<br />\r\n                She has no hidden layers, so Asteria is really just a linear relation passed through an activation function (softplus).<br />\r\n                The full equation for Asteria is y=ReLU(mx+b). Her initial state is y=ReLU(x), where m=1 and b=0.<br />\r\n                Asteria will be trained to minimize R^2, the mean of (y-42)^2 over randomly-sampled values of x ranging from 0 to 1.</p>\r\n\r\n                <h2>Testing</h2>\r\n                <p>If she has learned well, Asteria should output 42 no matter what input we give her. Test it out here!</p>\r\n                <label>Input</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"input\"\r\n                    value={input}\r\n                    onChange={this.handleChange} />\r\n                <br />\r\n                <label>Output</label>\r\n                <input readOnly\r\n                    type=\"text\"\r\n                    name=\"output\"\r\n                    value={output} />\r\n\r\n                <h2>Training</h2>\r\n                <p>We want Asteria to ultimately settle on y=42~RELU(42), where m=0 and b=42.<br />\r\n                To determine how to adjust m and b, Asteria samples values of x between 0 to 1 (you decide how many) and does fancy backpropogation.<br />\r\n                Sensitivity determines the strength of the adjustments to m and b in each generation of Asteria.<br />\r\n                If sensitivity is negative, Asteria will try to maximize error instead of minimizing it.<br />\r\n                If sensitivity is too large (the upper bound is around 0.75), Asteria will overshoot on her adjustments and fail to settle anywhere.</p>\r\n                <Form handleSubmit={this.handleSubmit} />\r\n                <Table data={data} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}