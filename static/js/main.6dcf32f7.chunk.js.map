{"version":3,"sources":["Test.tsx","Train.tsx","Table.tsx","Asteria.tsx","diffable/expression.ts","diffable/variable.ts","diffable/operations.ts","neuro/activation.ts","neuro/error.ts","neuro/parameters.ts","neuro/neurons.ts","neuro/matrices.ts","neuro/layers.ts","neuro/network.ts","asteria42/Network42.ts","asteria42/Asteria42.tsx","asteriaNAND/NetworkNAND.ts","asteriaNAND/AsteriaNAND.tsx","asteriaXOR/NetworkXOR.ts","asteriaXOR/AsteriaXOR.tsx","App.tsx","index.tsx"],"names":["Test","props","net","state","network","inputs","Map","getInputLayer","get","map","neuron","print","outputs","getOutput","event","target","name","value","this","set","setState","inputsTSX","push","key","input","type","onChange","handleInput","bind","outputsTSX","output","readOnly","className","Component","Train","samples","sensitivity","friction","generations","onTrain","isFinite","min","handleChange","onClick","submitForm","TableHeader","names","header","TableBody","rows","row","values","Table","Array","from","keys","g","Asteria","makeRow","makeRowExtras","r","i","study","learn","unshift","length","AboutContents","TestingContents","TrainingContents","About","Testing","Training","Expression","_value","NaN","_deriv","valueImpl","v","has","derivImpl","clear","ExprUnary","arg","ExprBinary","left","right","ExprVariadic","terms","Variable","val","BinProduct","deriv","VarSum","reduce","acc","t","positive","x","Number","MIN_VALUE","product","y","xy","Math","sign","ActivationLogistic","exp","d","isSymmetric","ActivationSoftplus","log","ErrorSquared","diff","Parameter","adjustments","velocity","err","studyImpl","adjustment","learnImpl","Weight","n","weight","w","count","reset","Bias","b","error","Neuron","InputNeuron","TrainableNeuron","Act","weights","bias","sum","c","getExpr","join","parentIndex","forEach","HiddenNeuron","OutputNeuron","Err","getErr","standardBasis","dim","basis","fill","standardHalfCube","last","vectors","srd","sqrt","blockSize","concat","j","orthoVectors","full","half","orthoFullBasis","orthoHalfBasis","transpose","randomRotate","slice","matrix","width","column","a","index","multiply","aHeight","bHeight","bWidth","k","randomRotation","random","rotations","rotation","Layer","InputLayer","neurons","node","vals","TrainableLayer","HiddenLayer","parent","size","parentNeurons","weightVectors","childIndex","getWeight","getBias","OutputLayer","childName","TestableNetwork","tests","valueErr","rsq","inputLayer","hiddenLayers","outputLayer","studied","source","inputNames","outputNames","hiddenSizes","sample","layer","Network42","cachedTests","sort","arr","Neuro","getOutputLayer","Asteria42","_net","undefined","m","NetworkNAND","xNANDy","quarter","AsteriaNAND","NetworkXOR","xXORy","AsteriaXOR","App","to","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6dcf32f7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { TestableNetwork } from \"./neuro/neuro\";\r\n\r\ntype TestProps = {\r\n    network: TestableNetwork;\r\n}\r\n\r\nclass Test extends Component<TestProps> {\r\n    net: TestableNetwork;\r\n    state: {\r\n        inputs: Map<string, number>;\r\n        outputs: Map<string, number>;\r\n    }\r\n\r\n    constructor(props: TestProps) {\r\n        super(props);\r\n\r\n        this.net = props.network;\r\n        const inputs = new Map(this.net.getInputLayer().get().map(\r\n            (neuron) => [neuron.print(), 0]\r\n        ));\r\n        this.state = {\r\n            inputs: inputs,\r\n            outputs: this.net.getOutput(inputs),\r\n        }\r\n    }\r\n\r\n    handleInput(event: { target: { name: string; value: any; }; }) {\r\n        const { name, value } = event.target;\r\n        const { inputs } = this.state;\r\n        inputs.set(name, value);\r\n        this.setState({ inputs: inputs, outputs: this.net.getOutput(inputs) });\r\n    }\r\n\r\n    render() {\r\n      const input: string = \"input\";\r\n      const output: string = \"output\";\r\n\r\n      let inputsTSX: JSX.Element[] = [];\r\n      for (const [name, value] of this.state.inputs) {\r\n          inputsTSX.push(\r\n            <div key={input + \"-\" + name}>\r\n            <label>{name}=</label>\r\n            <input\r\n              type=\"number\"\r\n              name={name}\r\n              value={value}\r\n              onChange={this.handleInput.bind(this)} />\r\n            </div>\r\n          );\r\n      }\r\n\r\n      let outputsTSX: JSX.Element[] = [];\r\n      for (const [name, value] of this.state.outputs) {\r\n          outputsTSX.push(\r\n            <div key={output + \"-\" + name}>\r\n            <label>{name}=</label>\r\n            <input readOnly\r\n              type=\"number\"\r\n              name={name}\r\n              value={value}/>\r\n            </div>\r\n          );\r\n      }\r\n\r\n      return (\r\n        <form className=\"Test\">\r\n          <h3>Inputs</h3>\r\n          {inputsTSX}\r\n          <h3>Outputs</h3>\r\n          {outputsTSX}\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Test;\r\n","import React, { Component } from \"react\";\r\n\r\ntype TrainProps = {\r\n    onTrain: (\r\n        samples: number,\r\n        sensitivity: number,\r\n        friction: number,\r\n        generations: number\r\n    ) => void;\r\n};\r\n\r\nclass Train extends Component<TrainProps> {\r\n    state: {\r\n        samples: number;\r\n        sensitivity: number;\r\n        friction: number;\r\n        generations: number;\r\n    };\r\n\r\n    constructor(props: TrainProps) {\r\n        super(props);\r\n        this.state = {\r\n            samples: 1,\r\n            sensitivity: 1,\r\n            friction: 1,\r\n            generations: 1,\r\n        };\r\n    }\r\n\r\n    handleChange(event: { target: { name: string; value: any; }; }) {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    submitForm() {\r\n        const { samples, sensitivity, friction, generations, } = this.state;\r\n        this.props.onTrain(samples, sensitivity, friction, generations);\r\n    }\r\n\r\n    render() {\r\n        const { samples, sensitivity, friction, generations, } = this.state;\r\n        return (\r\n          <form className=\"Train\">\r\n            <label>Samples</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"samples\"\r\n              value={isFinite(samples) ? samples : \"\"}\r\n              min=\"1\"\r\n              onChange={this.handleChange.bind(this)} />\r\n            <br />\r\n\r\n            <label>Sensitivity</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"sensitivity\"\r\n              value={isFinite(sensitivity) ? sensitivity : \"\"}\r\n              onChange={this.handleChange.bind(this)} />\r\n            <br />\r\n\r\n            <label>Friction</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"friction\"\r\n              value={isFinite(friction) ? friction : \"\"}\r\n              onChange={this.handleChange.bind(this)} />\r\n            <br />\r\n\r\n            <label>Generations</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"generations\"\r\n              value={isFinite(generations) ? generations : \"\"}\r\n              min=\"0\"\r\n              onChange={this.handleChange.bind(this)} />\r\n            <br />\r\n\r\n            <input\r\n              type=\"button\"\r\n              value=\"Train\"\r\n              onClick={this.submitForm.bind(this)} />\r\n          </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Train;\r\n","import React from \"react\";\r\n\r\nexport class Row {\r\n    constructor(public key: number, public values: Map<string, any>) {}\r\n}\r\n\r\nfunction TableHeader(props: { names: string[] }) {\r\n    const header=\"header\";\r\n    return (\r\n      <thead>\r\n        <tr key={header}>\r\n          {props.names.map((name) => <th key={header + '-' + name}>{name}</th>)}\r\n        </tr>\r\n      </thead>\r\n    );\r\n}\r\n\r\nfunction TableBody(props: { names: string[], rows: Row[] }) {\r\n    const rows = props.rows.map((row) => (\r\n      <tr key={row.key}>\r\n        {props.names.map(\r\n            (name) => <td key={row.key + '-' + name}>{row.values.get(name)}</td>\r\n        )}\r\n      </tr>\r\n    ));\r\n    return (\r\n      <tbody>{rows}</tbody>\r\n    );\r\n}\r\n\r\nfunction Table(props: { rows: Row[] }) {\r\n    const { rows } = props;\r\n    const names = Array.from(rows[0].values.keys());\r\n    return (\r\n      <table>\r\n        <TableHeader names={names} />\r\n        <TableBody names={names} rows={rows} />\r\n      </table>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport { TestableNetwork } from \"./neuro/neuro\";\r\nimport Test from \"./Test\"\r\nimport Train from \"./Train\";\r\nimport Table, { Row } from \"./Table\";\r\n\r\nconst g = 'G', r = 'R';\r\n\r\nabstract class Asteria extends Component<{}> {\r\n    state: { rows: Row[]; input: number; };\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = { rows: [this.makeRow(0)], input: 0 };\r\n    }\r\n\r\n    protected abstract net(): TestableNetwork;\r\n\r\n    private makeRow(key: number): Row {\r\n        return {\r\n            key: key,\r\n            values: new Map([\r\n                [g, key],\r\n                ...this.makeRowExtras(),\r\n                [r, this.net().r()],\r\n            ]),\r\n        };\r\n    }\r\n    protected makeRowExtras(): Map<string, number> { return new Map(); }\r\n\r\n    private onTrain(samples: number, sensitivity: number, friction: number, generations: number) {\r\n        for (let i = 0; i < generations; ++i) {\r\n            this.net().study(samples);\r\n            this.net().learn(sensitivity, friction);\r\n\r\n            let { rows } = this.state;\r\n            rows.unshift(this.makeRow(rows.length));\r\n            this.setState({ rows: rows });\r\n        }\r\n    };\r\n\r\n    private About(): JSX.Element {\r\n        const AboutContents = this.AboutContents.bind(this);\r\n        return (\r\n          <div>\r\n            <h2>About</h2>\r\n            <AboutContents />\r\n          </div>\r\n        )\r\n    }\r\n    protected AboutContents(): JSX.Element { return <div />; }\r\n\r\n    private Testing(): JSX.Element {\r\n        const TestingContents = this.TestingContents.bind(this);\r\n        return (\r\n          <div>\r\n            <h2>Testing</h2>\r\n            <TestingContents />\r\n            <Test network={this.net()} />\r\n          </div>\r\n        )\r\n    }\r\n    protected TestingContents(): JSX.Element { return <div />; }\r\n\r\n    private Training(): JSX.Element {\r\n        const { rows } = this.state;\r\n        const TrainingContents = this.TrainingContents.bind(this);\r\n        return (\r\n          <div>\r\n            <h2>Training</h2>\r\n            <TrainingContents />\r\n            <Train onTrain={this.onTrain.bind(this)}/>\r\n            <Table rows={rows} />\r\n          </div>\r\n        )\r\n    }\r\n    protected TrainingContents(): JSX.Element { return <div />; }\r\n\r\n    render() {\r\n        const About = this.About.bind(this);\r\n        const Testing = this.Testing.bind(this);\r\n        const Training = this.Training.bind(this);\r\n        return (\r\n          <div className=\"Asteria42\">\r\n            <About />\r\n            <Testing />\r\n            <Training />\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Asteria;\r\n","import Differentiable from \"./differentiable\";\r\nimport Variable from \"./variable\";\r\n\r\nabstract class Expression implements Differentiable {\r\n    private _value: number = NaN;\r\n    value(): number {\r\n        if (!isFinite(this._value)) {\r\n            this._value = this.valueImpl();\r\n        }\r\n        return this._value;\r\n    }\r\n    protected abstract valueImpl(): number;\r\n\r\n    private _deriv = new Map<Variable, number>();\r\n    deriv(v: Variable): number {\r\n        if (!this._deriv.has(v)) {\r\n            this._deriv.set(v, this.derivImpl(v));\r\n        }\r\n        return this._deriv.get(v) as number;\r\n    }\r\n    protected abstract derivImpl(_v: Variable): number;\r\n\r\n    // abstract print(): string;\r\n\r\n    reset() {\r\n        this._value = NaN;\r\n        this._deriv.clear();\r\n    }\r\n}\r\n\r\nabstract class ExprUnary extends Expression {\r\n    protected arg: Differentiable;\r\n\r\n    constructor(arg: Differentiable) {\r\n        super();\r\n        this.arg = arg;\r\n    }\r\n}\r\n\r\nabstract class ExprBinary extends Expression {\r\n    protected left: Differentiable;\r\n    protected right: Differentiable;\r\n\r\n    constructor(left: Differentiable, right: Differentiable) {\r\n        super();\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\n\r\nabstract class ExprVariadic extends Expression {\r\n    protected terms: Differentiable[];\r\n\r\n    constructor(...terms: Differentiable[]) {\r\n        super();\r\n        this.terms = terms;\r\n    }\r\n}\r\n\r\nexport default Expression;\r\nexport { ExprUnary, ExprBinary, ExprVariadic };\r\n","import Differentiable from \"./differentiable\";\r\n\r\nclass Variable implements Differentiable {\r\n    private name: string;\r\n    private val: number;\r\n\r\n    constructor(name: string, val: number = 0) {\r\n        this.name = name;\r\n        this.val = val;\r\n    }\r\n\r\n    bind(val: number) { this.val = val; }\r\n\r\n    value(): number { return this.val; }\r\n    deriv(v: Variable): number { return (v === this) ? 1 : 0; }\r\n\r\n    print(): string { return this.name; }\r\n}\r\n\r\nexport default Variable;\r\n","import { ExprBinary, ExprVariadic } from \"./expression\";\r\nimport Variable from \"./variable\";\r\n\r\nclass BinProduct extends ExprBinary {\r\n    protected valueImpl(): number {\r\n        return this.left.value() * this.right.value();\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        const dlr = this.left.deriv(v) * this.right.value();\r\n        const ldr = this.left.value() * this.right.deriv(v);\r\n        return dlr + ldr;\r\n    }\r\n\r\n    // print(): string {\r\n    //     return this.left.print() + \" * \" + this.right.print();\r\n    // }\r\n}\r\n\r\nclass VarSum extends ExprVariadic {\r\n    protected valueImpl(): number {\r\n        return this.terms.reduce((acc, t) => acc + t.value(), 0);\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        return this.terms.reduce((acc, t) => acc + t.deriv(v), 0);\r\n    }\r\n\r\n    // print(): string {\r\n    //     return \"(\" + this.terms.map((t) => t.print()).join(\" + \") + \")\";\r\n    // }\r\n}\r\n\r\nexport { BinProduct, VarSum };\r\n","import { Differentiable, ExprUnary, Variable } from \"../diffable/diffable\";\r\n\r\n// Vanishing gradient countermeasures\r\nfunction positive(x: number): number {\r\n    return (isFinite(x) && x > 0) ? x : Number.MIN_VALUE;\r\n}\r\nfunction product(x: number, y: number): number {\r\n    const xy = x * y;\r\n    return (xy === 0) ? (Math.sign(x) * Math.sign(y) * Number.MIN_VALUE) : xy;\r\n}\r\n\r\nclass ActivationLogistic extends ExprUnary {\r\n    static isSymmetric: Boolean = true;\r\n\r\n    protected valueImpl(): number {\r\n        return positive(1 / (1 + Math.exp(-this.arg.value())));\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        const val = this.arg.value();\r\n        const d = positive(1 / (Math.exp(val) + 2 + Math.exp(-val)));\r\n        return product(this.arg.deriv(v), d);\r\n    }\r\n\r\n    // print(): string {\r\n    //     return \"σ(\" + this.arg.print() + \")\";\r\n    // }\r\n}\r\n\r\nclass ActivationSoftplus extends ExprUnary {\r\n    static isSymmetric: Boolean = false;\r\n\r\n    protected valueImpl(): number {\r\n        const x = this.arg.value();\r\n        const y = 1 + Math.exp(x);\r\n        return isFinite(y) ? positive(Math.log(y)) : x;\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        const d = positive(1 / (1 + Math.exp(-this.arg.value())));\r\n        return product(this.arg.deriv(v), d);\r\n    }\r\n\r\n    // print(): string {\r\n    //     return \"ReLU(\" + this.arg.print() + \")\";\r\n    // }\r\n}\r\n\r\nexport interface ActivationClass {\r\n    isSymmetric: Boolean\r\n    new(arg: Differentiable): ExprUnary;\r\n}\r\nexport { ActivationLogistic, ActivationSoftplus };\r\n","import { Differentiable, ExprBinary, Variable } from \"../diffable/diffable\";\r\n\r\nclass ErrorSquared extends ExprBinary {\r\n    protected valueImpl(): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        return diff * diff;\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        return 2 * diff * (this.left.deriv(v) - this.right.deriv(v));\r\n    }\r\n\r\n    // print(): string {\r\n    //     return \"(\" + this.left.print() + \" - \" + this.right.value() + \")^2\";\r\n    // }\r\n}\r\n\r\nclass ErrorTessaracted extends ExprBinary {\r\n    protected valueImpl(): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        let dsq = diff * diff;\r\n        return dsq * dsq;\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        return 4 * diff * diff * diff * (this.left.deriv(v) - this.right.deriv(v));\r\n    }\r\n\r\n    // print(): string {\r\n    //     return \"(\" + this.left.print() + \" - \" + this.right.value() + \")^4\";\r\n    // }\r\n}\r\n\r\nexport interface ErrorClass {\r\n    new(left: Differentiable, right: Differentiable): ExprBinary;\r\n}\r\nexport { ErrorSquared, ErrorTessaracted };\r\n","import { Differentiable, Variable, BinProduct } from \"../diffable/diffable\";\r\nimport Trainable from \"./trainable\";\r\nimport Neuron from \"./neurons\";\r\n\r\nabstract class Parameter implements Trainable {\r\n    private adjustments: number[];\r\n    private velocity: number;\r\n\r\n    constructor() {\r\n        this.adjustments = [];\r\n        this.velocity = 0;\r\n    }\r\n\r\n    abstract get(): Variable;\r\n    value(): number { return this.get().value(); }\r\n    print(): string { return this.get().print(); }\r\n\r\n    abstract getExpr(): Differentiable;\r\n\r\n    study(err: Differentiable) {\r\n        this.adjustments.push(-this.studyImpl(err));\r\n    }\r\n    protected abstract studyImpl(error: Differentiable): number;\r\n\r\n    learn(sensitivity: number, friction: number) {\r\n        if (this.adjustments.length > 0) {\r\n            const adjustment = this.adjustments.reduce(\r\n                (acc, t) => acc + t, 0\r\n            ) * sensitivity / this.adjustments.length;\r\n            this.velocity = this.velocity * (1 - friction) + adjustment;\r\n            this.learnImpl(this.velocity);\r\n            this.adjustments = [];\r\n        }\r\n    }\r\n    protected abstract learnImpl(adjustment: number): void;\r\n}\r\n\r\nclass Weight extends Parameter {\r\n    private static count: number = 0;\r\n\r\n    private w: Variable;\r\n    private t: BinProduct;\r\n\r\n    constructor(n: Neuron, weight: number) {\r\n        super();\r\n        this.w = new Variable(\"w\" + Weight.count, weight);\r\n        this.t = new BinProduct(this.w, n.get());\r\n        ++Weight.count;\r\n    }\r\n\r\n    get(): Variable { return this.w; }\r\n    getExpr(): Differentiable { return this.t; }\r\n\r\n    protected studyImpl(err: Differentiable): number {\r\n        return err.deriv(this.w);\r\n    }\r\n    protected learnImpl(adjustment: number) {\r\n        this.w.bind(this.value() + adjustment);\r\n    }\r\n\r\n    reset() {\r\n        this.t.reset();\r\n    }\r\n}\r\n\r\nclass Bias extends Parameter {\r\n    static count: number = 0;\r\n\r\n    private b: Variable;\r\n\r\n    constructor() {\r\n        super();\r\n        this.b = new Variable(\"b\" + Bias.count, 0);\r\n        ++Bias.count;\r\n    }\r\n\r\n    get(): Variable { return this.b; }\r\n    getExpr(): Differentiable { return this.get(); }\r\n\r\n    protected studyImpl(error: Differentiable): number {\r\n        return error.deriv(this.b);\r\n    }\r\n    protected learnImpl(adjustment: number) {\r\n        this.b.bind(this.value() + adjustment);\r\n    }\r\n}\r\n\r\nexport { Weight, Bias };\r\n","import {\r\n    Differentiable,\r\n    ExprUnary, ExprBinary,\r\n    Variable,\r\n    VarSum\r\n} from \"../diffable/diffable\";\r\nimport Trainable from \"./trainable\";\r\nimport { Weight, Bias } from \"./parameters\";\r\nimport { ActivationClass } from \"./activation\";\r\nimport { ErrorClass } from \"./error\";\r\n\r\nabstract class Neuron {\r\n    abstract get(): Differentiable;\r\n    value(): number { return this.get().value(); }\r\n    abstract print(): string;\r\n}\r\n\r\nclass InputNeuron extends Neuron {\r\n    private x: Variable;\r\n\r\n    constructor(name: string) {\r\n        super();\r\n        this.x = new Variable(name);\r\n    }\r\n\r\n    get(): Differentiable { return this.x; }\r\n    print(): string { return this.x.print(); }\r\n\r\n    bind(val: number) { this.x.bind(val); }\r\n}\r\n\r\nabstract class TrainableNeuron extends Neuron implements Trainable {\r\n    private weights: Weight[];\r\n    private bias: Bias;\r\n    private sum: VarSum;\r\n    private exp: ExprUnary;\r\n\r\n    constructor(Act: ActivationClass, ...weights: Weight[]) {\r\n        super();\r\n        this.weights = weights;\r\n        this.bias = new Bias();\r\n\r\n        const terms = this.weights.map((c) => c.getExpr());\r\n        this.sum = new VarSum(...terms, this.bias.getExpr());\r\n        this.exp = new Act(this.sum);\r\n    }\r\n\r\n    get(): Differentiable { return this.exp; }\r\n    print(): string {\r\n        return \"[\" + this.weights.map(\r\n            (w) => w.value()\r\n        ).join(\" \") + \"] \" + this.bias.value();\r\n    }\r\n\r\n    getWeight(parentIndex: number): Weight { return this.weights[parentIndex]; }\r\n    getBias(): Bias { return this.bias; }\r\n\r\n    study(error: Differentiable) {\r\n        this.weights.forEach((w) => w.study(error));\r\n        this.bias.study(error);\r\n    }\r\n    learn(sensitivity: number, friction: number) {\r\n        this.weights.forEach((w) => w.learn(sensitivity, friction));\r\n        this.bias.learn(sensitivity, friction);\r\n    }\r\n\r\n    reset() {\r\n        this.exp.reset();\r\n        this.sum.reset();\r\n        this.weights.forEach((w) => w.reset());\r\n    }\r\n}\r\n\r\nclass HiddenNeuron extends TrainableNeuron {}\r\n\r\nclass OutputNeuron extends TrainableNeuron {\r\n    private y: Variable;\r\n    private err: ExprBinary;\r\n\r\n    constructor(\r\n        name: string,\r\n        Act: ActivationClass,\r\n        Err: ErrorClass,\r\n        ...weights: Weight[]\r\n    ) {\r\n        super(Act, ...weights);\r\n        this.y = new Variable(name);\r\n        this.err = new Err(this.get(), this.y);\r\n    }\r\n\r\n    getErr(): Differentiable { return this.err; }\r\n    valueErr(): number { return this.getErr().value(); }\r\n\r\n    bind(val: number) { this.y.bind(val); }\r\n\r\n    reset() {\r\n        super.reset();\r\n        this.err.reset();\r\n    }\r\n}\r\n\r\nexport default Neuron;\r\nexport { InputNeuron, TrainableNeuron, HiddenNeuron, OutputNeuron };\r\n","function standardBasis(dim: number): number[][] {\r\n    let basis: number[][] = new Array(dim);\r\n    for (let i = 0; i < dim; ++i) {\r\n        basis[i] = new Array(dim).fill(0);\r\n        basis[i][i] = 1;\r\n    }\r\n    return basis;\r\n}\r\nfunction standardHalfCube(dim: number): number[][] {\r\n    const last: number = dim - 1;\r\n    const count: number = 1 << last; // 2^last\r\n    let vectors: number[][] = new Array(dim);\r\n    const srd: number = 1 / Math.sqrt(dim);\r\n    vectors[last] = new Array(count).fill(-srd)\r\n    for (let i = 0; i < last; ++i) {\r\n        const blockSize: number = 1 << i; // 2^i\r\n        vectors[i] = new Array(blockSize).fill(-srd).concat(\r\n            new Array(blockSize).fill(srd)\r\n        );\r\n        for (let j = i + 1; j < last; ++j) {\r\n            vectors[i] = vectors[i].concat(vectors[i]);\r\n        }\r\n    }\r\n    return vectors;\r\n}\r\n\r\nfunction orthoHalfBasis(dim: number): number[][] {\r\n    return concat(standardBasis(dim), standardHalfCube(dim));\r\n}\r\nfunction orthoFullBasis(dim: number): number[][] {\r\n    const half = concat(standardBasis(dim), standardHalfCube(dim));\r\n    return concat(half, half.map((row) => row.map((n) => -n)));\r\n}\r\nfunction orthoVectors(dim: number, count: number, full: boolean): number[][] {\r\n    const basis = (full) ? orthoFullBasis(dim) : orthoHalfBasis(dim);\r\n    let vectors: number[][] = []\r\n    while (vectors.length < count) {\r\n        vectors = vectors.concat(transpose(randomRotate(basis, 0)));\r\n    }\r\n    return vectors.slice(0, count);\r\n}\r\n\r\nfunction transpose(matrix: number[][]): number[][] {\r\n    const width = matrix[0].length;\r\n    let t = new Array(width);\r\n    for (let i = 0; i < width; ++i) {\r\n        t[i] = column(matrix, i);\r\n    }\r\n    return t;\r\n}\r\nfunction concat(a: number[][], b: number[][]): number[][] {\r\n    return a.map((row, index) => row.concat(b[index]));\r\n}\r\nfunction multiply(a: number[][], b: number[][]) {\r\n    const aHeight: number = a.length;\r\n    const bHeight: number = b.length;\r\n    const bWidth: number = b[0].length;\r\n    let c: number[][] = new Array(aHeight);\r\n    for (let i = 0; i < aHeight; ++i) {\r\n        c[i] = new Array(bWidth).fill(0);\r\n        for (let j = 0; j < bWidth; ++j) {\r\n            for (let k = 0; k < bHeight; ++k) {\r\n                c[i][j] += a[i][k] * b[k][j];\r\n            }\r\n        }\r\n    }\r\n    return c;\r\n}\r\n\r\nfunction randomRotation(dim: number, x: number, y: number): number[][] {\r\n    if (x > y) { return randomRotation(dim, y, x); }\r\n    let basis: number[][] = standardBasis(dim);\r\n    basis[x][x] = Math.random();\r\n    basis[y][y] = basis[x][x];\r\n    basis[y][x] = Math.sqrt(1 - basis[x][x] * basis[x][x]);\r\n    basis[x][y] = -basis[y][x];\r\n    return basis;\r\n}\r\nfunction randomRotate(matrix: number[][], x: number): number[][] {\r\n    const dim: number = matrix.length;\r\n    let rotations: number[][][] = new Array(dim - 1);\r\n    for (let i = 0; i < x; ++i) {\r\n        rotations[i] = randomRotation(dim, x, i);\r\n    }\r\n    for (let i = x + 1; i < dim; ++i) {\r\n        rotations[i - 1] = randomRotation(dim, x, i);\r\n    }\r\n    return multiply(rotations.reduce(\r\n        (acc, rotation) => {\r\n            const a = multiply(acc, rotation);\r\n            return a;\r\n        }, standardBasis(dim)\r\n    ), matrix);\r\n}\r\n\r\nfunction column(matrix: number[][], c: number): number[] {\r\n    return matrix.map((row) => row[c]);\r\n}\r\nfunction dotProduct(u: number[], v: number[]): number {\r\n    return u.reduce((acc, n, i) => acc + n * v[i], 0);\r\n}\r\n\r\nfunction print(matrix: number[][]): string {\r\n    return matrix.map((row) => row.join()).join('\\n');\r\n}\r\n\r\nexport {\r\n    standardBasis, standardHalfCube,\r\n    orthoHalfBasis, orthoFullBasis, orthoVectors,\r\n    transpose, concat, multiply,\r\n    randomRotation, randomRotate,\r\n    column, dotProduct,\r\n    print\r\n};\r\n","import Neuron, {\r\n    InputNeuron,\r\n    TrainableNeuron, HiddenNeuron, OutputNeuron\r\n} from \"./neurons\";\r\nimport { Differentiable, VarSum } from \"../diffable/diffable\";\r\nimport { ActivationClass } from \"./activation\";\r\nimport { ErrorClass } from \"./error\";\r\nimport { Weight, Bias } from \"./parameters\";\r\nimport Trainable from \"./trainable\";\r\nimport { orthoVectors } from \"./matrices\";\r\n\r\nabstract class Layer {\r\n    abstract get(): Neuron[];\r\n    print(): string {\r\n        return \"[\\n\" + this.get().map(\r\n            (n) => \"\\t\" + n.print()\r\n        ).join(\"\\n\") + \"\\n]\";\r\n    }\r\n\r\n    size(): number { return this.get().length; }\r\n}\r\n\r\nclass InputLayer extends Layer {\r\n    private neurons: Map<string, InputNeuron>;\r\n\r\n    constructor(...names: string[]) {\r\n        super();\r\n        this.neurons = new Map();\r\n        for (const name of names) {\r\n            this.neurons.set(name, new InputNeuron(name));\r\n        }\r\n    }\r\n\r\n    get(): Neuron[] { return Array.from(this.neurons.values()); }\r\n    getNeuron(name: string): Neuron | undefined {\r\n        return this.neurons.get(name);\r\n    }\r\n\r\n    values(): Map<string, number> {\r\n        let map = new Map<string, number>();\r\n        for (const [name, node] of this.neurons) {\r\n            map.set(name, node.value());\r\n        }\r\n        return map;\r\n    }\r\n\r\n    bind(vals: Map<string, number>) {\r\n        for (const [name, neuron] of this.neurons) {\r\n            neuron.bind(vals.get(name) ?? 0);\r\n        }\r\n    }\r\n}\r\n\r\nabstract class TrainableLayer extends Layer implements Trainable {\r\n    abstract get(): TrainableNeuron[];\r\n\r\n    study(error: Differentiable) {\r\n        this.get().forEach((n) => n.study(error));\r\n    }\r\n    learn(sensitivity: number, friction: number) {\r\n        this.get().forEach((n) => n.learn(sensitivity, friction));\r\n    }\r\n\r\n    reset() {\r\n        this.get().forEach((n) => n.reset());\r\n    }\r\n}\r\n\r\nclass HiddenLayer extends TrainableLayer {\r\n    private neurons: TrainableNeuron[];\r\n\r\n    constructor(parent: Layer, Act: ActivationClass, size: number) {\r\n        super();\r\n        this.neurons = [];\r\n        const parentNeurons: Neuron[] = parent.get();\r\n        const weightVectors: number[][] = orthoVectors(\r\n            parentNeurons.length,\r\n            size,\r\n            !Act.isSymmetric\r\n        );\r\n        for (let i = 0; i < size; ++i) {\r\n            this.neurons.push(new HiddenNeuron(Act, ...parentNeurons.map(\r\n                (n, j) => new Weight(n, weightVectors[i][j])\r\n            )));\r\n        }\r\n    }\r\n\r\n    get(): TrainableNeuron[] { return this.neurons; }\r\n    getNeuron(index: number): Neuron {\r\n        return this.neurons[index];\r\n    }\r\n\r\n    getWeight(childIndex: number, parentIndex: number): Weight {\r\n        return this.neurons[childIndex].getWeight(parentIndex);\r\n    }\r\n    getBias(childIndex: number): Bias {\r\n        return this.neurons[childIndex].getBias();\r\n    }\r\n\r\n    values(): number[] { return this.neurons.map((n) => n.value())};\r\n}\r\n\r\nclass OutputLayer extends TrainableLayer {\r\n    private neurons: Map<string, OutputNeuron>;\r\n    private err: VarSum;\r\n\r\n    constructor(\r\n        parent: Layer,\r\n        Act: ActivationClass,\r\n        Err: ErrorClass,\r\n        ...names: string[]\r\n    ) {\r\n        super();\r\n        this.neurons = new Map();\r\n        const parentNeurons: Neuron[] = parent.get();\r\n        const weightVectors: number[][] = orthoVectors(\r\n            parentNeurons.length,\r\n            names.length,\r\n            !Act.isSymmetric\r\n        );\r\n        for (let i = 0; i < names.length; ++i) {\r\n            this.neurons.set(\r\n                names[i],\r\n                new OutputNeuron(names[i], Act, Err, ...parentNeurons.map(\r\n                    (n, j) => new Weight(n, weightVectors[i][j])\r\n                ))\r\n            );\r\n        }\r\n        this.err = new VarSum(\r\n            ...Array.from(this.neurons.values()).map((n) => n.getErr())\r\n        );\r\n    }\r\n\r\n    get(): TrainableNeuron[] { return Array.from(this.neurons.values()); }\r\n    getNeuron(name: string): Neuron | undefined {\r\n        return this.neurons.get(name);\r\n    }\r\n\r\n    getWeight(childName: string, parentIndex: number): Weight | undefined {\r\n        return this.neurons.get(childName)?.getWeight(parentIndex);\r\n    }\r\n    getBias(name: string): Bias | undefined {\r\n        return this.neurons.get(name)?.getBias();\r\n    }\r\n\r\n    getErr(): Differentiable { return this.err; }\r\n    valueErr(): number { return this.getErr().value(); }\r\n\r\n    values(): Map<string, number> {\r\n        let map = new Map<string, number>();\r\n        for (const [name, node] of this.neurons) {\r\n            map.set(name, node.value());\r\n        }\r\n        return map;\r\n    }\r\n\r\n    bind(vals: Map<string, number>) {\r\n        for (const [name, neuron] of this.neurons) {\r\n            neuron.bind(vals.get(name) ?? 0);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        this.err.reset();\r\n    }\r\n}\r\n\r\nexport default Layer;\r\nexport { InputLayer, HiddenLayer, OutputLayer };\r\n","import Layer, { InputLayer, HiddenLayer, OutputLayer } from \"./layers\";\r\nimport { ActivationClass } from \"./activation\";\r\nimport { ErrorClass, ErrorSquared } from \"./error\";\r\nimport Differentiable from \"../diffable/differentiable\";\r\n\r\ntype Input = Map<string, number>;\r\ntype Output = Map<string, number>;\r\ntype Sample = { input: Input; output: Output; };\r\n\r\nabstract class Network {\r\n    private inputLayer: InputLayer;\r\n    private hiddenLayers: HiddenLayer[];\r\n    private outputLayer: OutputLayer;\r\n\r\n    protected studied: { sample: Sample, err: number }[];\r\n\r\n    protected abstract source(count: number): Sample[];\r\n    protected abstract Act(): ActivationClass;\r\n    protected abstract Err(): ErrorClass;\r\n    protected abstract hiddenSizes(): number[];\r\n\r\n    constructor() {\r\n        this.studied = [];\r\n\r\n        const { input, output } = this.source(1)[0];\r\n        const inputNames = Array.from(input.keys());\r\n        const outputNames = Array.from(output.keys());\r\n\r\n        this.inputLayer = new InputLayer(...inputNames);\r\n        this.hiddenLayers = [];\r\n        let last: Layer = this.inputLayer;\r\n        for (const size of this.hiddenSizes()) {\r\n            this.hiddenLayers.push(new HiddenLayer(last, this.Act(), size));\r\n            last = this.hiddenLayers[this.hiddenLayers.length - 1];\r\n        }\r\n        this.outputLayer = new OutputLayer(\r\n            last,\r\n            this.Act(),\r\n            this.Err(),\r\n            ...outputNames\r\n        );\r\n    }\r\n\r\n    print(): string {\r\n        return this.hiddenLayers.map(\r\n            (n) => n.print()\r\n        ).join(\"\\n\") + \"\\n\" + this.outputLayer.print();\r\n    }\r\n\r\n    getInputLayer(): InputLayer { return this.inputLayer; }\r\n    getHiddenLayer(i: number): HiddenLayer { return this.hiddenLayers[i]; }\r\n    getOutputLayer(): OutputLayer { return this.outputLayer; }\r\n\r\n    getErr(): Differentiable { return this.outputLayer.getErr(); }\r\n    valueErr(): number { return this.outputLayer.valueErr(); }\r\n\r\n    avgErr(): number {\r\n        return this.studied.reduce(\r\n            (acc, study) => acc + study.err, 0\r\n        ) / this.studied.length;\r\n    }\r\n\r\n    bind(input: Input, output: Output | null = null) {\r\n        this.reset();\r\n        this.inputLayer.bind(input);\r\n        if (output) { this.outputLayer.bind(output); }\r\n    }\r\n    getOutput(input: Input): Output {\r\n        this.bind(input);\r\n        return this.outputLayer.values();\r\n    }\r\n\r\n    study(count: number) {\r\n        this.studied = this.source(count).map((sample) => {\r\n            this.bind(sample.input, sample.output);\r\n            const err = this.outputLayer.getErr();\r\n            this.hiddenLayers.forEach((layer) => layer.study(err));\r\n            this.outputLayer.study(err);\r\n            return { sample: sample, err: err.value() };\r\n        });\r\n    }\r\n    learn(sensitivity: number, friction: number) {\r\n        this.hiddenLayers.forEach(\r\n            (layer) => layer.learn(sensitivity, friction)\r\n        );\r\n        this.outputLayer.learn(sensitivity, friction);\r\n    }\r\n\r\n    reset() {\r\n        this.hiddenLayers.forEach((layer) => layer.reset());\r\n        this.outputLayer.reset();\r\n    }\r\n}\r\n\r\nabstract class TestableNetwork extends Network {\r\n    protected Err(): ErrorClass { return ErrorSquared; }\r\n\r\n    protected abstract tests(): Sample[];\r\n    rsq(): number {\r\n        const tests = this.tests();\r\n        return tests.reduce((acc, { input, output }) => {\r\n            this.bind(input, output);\r\n            return acc + this.valueErr();\r\n        }, 0) / tests.length;\r\n    }\r\n    r(): number {\r\n        return Math.sqrt(this.rsq());\r\n    }\r\n}\r\n\r\nexport { Network, TestableNetwork };\r\n","import * as Neuro from \"../neuro/neuro\";\r\n\r\nclass Network42 extends Neuro.TestableNetwork {\r\n    protected source(count: number) {\r\n        this.studied.sort((a, b) => b.err - a.err);\r\n        let arr = this.studied.slice(0, count / 2).map(\r\n            (study) => study.sample\r\n        );\r\n        for (let i = arr.length; i < count; ++i) {\r\n            arr.push({\r\n                input: new Map<string, number>([['x', Math.random()]]),\r\n                output: new Map<string, number>([['y', 42]])\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n    protected Act() { return Neuro.ActivationSoftplus; }\r\n    protected Err() { return Neuro.ErrorSquared; }\r\n    protected hiddenSizes() { return []; }\r\n\r\n    private cachedTests = [\r\n        {\r\n            input: new Map<string, number>([['x', 0]]),\r\n            output: new Map<string, number>([['y', 42]])\r\n        },\r\n        {\r\n            input: new Map<string, number>([['x', 1]]),\r\n            output: new Map<string, number>([['y', 42]])\r\n        }\r\n    ];\r\n    protected tests() { return this.cachedTests; }\r\n\r\n    // Convenience Methods\r\n\r\n    m(): number {\r\n        return this.getOutputLayer().getWeight('y', 0)!.value();\r\n    }\r\n    b(): number {\r\n        return this.getOutputLayer().getBias('y')!.value();\r\n    }\r\n\r\n    value(x: number): number {\r\n        return this.getOutput(new Map<string, number>([['x', x]])).get('y')!;\r\n    }\r\n}\r\n\r\nexport default Network42;\r\n","import React from \"react\";\r\nimport Asteria from \"../Asteria\";\r\nimport Network42 from \"./Network42\";\r\n\r\nconst m = 'm', b = 'b';\r\n\r\nclass Asteria42 extends Asteria {\r\n    private _net: Network42 | undefined = undefined;\r\n    protected net() {\r\n        if (!this._net) { this._net = new Network42(); }\r\n        return this._net!;\r\n    }\r\n\r\n    protected makeRowExtras() {\r\n        return new Map([\r\n            [m, this.net().m()],\r\n            [b, this.net().b()],\r\n        ]);\r\n    }\r\n\r\n    protected AboutContents() {\r\n        return (\r\n          <p>Asteria wants to learn the answer to life, the universe, and everything, but she needs your help!<br />\r\n          Asteria is the simplest possible neural network: a single input neuron linked to a single output neuron.<br />\r\n          The full equation for Asteria is y=ReLU(mx+b). Her initial state is y=ReLU(x), where m=1.<br />\r\n          Asteria will be trained to minimize R^2, the mean of (y-42)^2 over randomly-sampled values of x ranging from 0 to 1.</p>\r\n        )\r\n    }\r\n    protected TestingContents() {\r\n        return (\r\n          <p>Asteria should output 42 no matter what input we give her.</p>\r\n        )\r\n    }\r\n    protected TrainingContents() {\r\n        return (\r\n          <p>We want Asteria to reach y=42~ReLU(42), where m=0 and b~42.<br />\r\n            To adjust m and b, Asteria samples values of x between 0 to 1 and does fancy backpropagation.</p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Asteria42;\r\n","import * as Neuro from \"../neuro/neuro\";\r\n\r\nclass NetworkNAND extends Neuro.TestableNetwork {\r\n    protected source(count: number) {\r\n        this.studied.sort((a, b) => b.err - a.err);\r\n        const quarter = count / 4;\r\n        let arr = this.studied.slice(quarter, 2 * quarter).map(\r\n            (study) => study.sample\r\n        );\r\n        for (let i = arr.length; i < count; ++i) {\r\n            const x = Math.random();\r\n            const y = Math.random();\r\n            const xNANDy = (x > 0.5 && y > 0.5) ? 0 : 1;\r\n            arr.push({\r\n                input: new Map<string, number>([['x', x], ['y', y]]),\r\n                output: new Map<string, number>([[\"xNANDy\", xNANDy]])\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n    protected Act() { return Neuro.ActivationLogistic; }\r\n    protected Err() { return Neuro.ErrorSquared; }\r\n    protected hiddenSizes() { return [2]; }\r\n\r\n    private cachedTests = (() => {\r\n        let tests = [];\r\n        for (let x = 0; x <= 1; x += 0.1) {\r\n            for (let y = 0; y <= 1; y += 0.1) {\r\n                const xNANDy = (x > 0.5 && y > 0.5) ? 0 : 1;\r\n                tests.push({\r\n                    input: new Map<string, number>([['x', x], ['y', y]]),\r\n                    output: new Map<string, number>([[\"xNANDy\", xNANDy]])\r\n                });\r\n            }\r\n        }\r\n        return tests;\r\n    })();\r\n    protected tests() { return this.cachedTests; }\r\n\r\n    // Convenience Methods\r\n\r\n    value(x: number, y: number): number {\r\n        return this.getOutput(\r\n            new Map<string, number>([['x', x], ['y', y]])\r\n        ).get(\"xNANDy\")!;\r\n    }\r\n}\r\n\r\nexport default NetworkNAND;\r\n","import Asteria from \"../Asteria\";\r\nimport NetworkNAND from \"./NetworkNAND\";\r\n\r\nclass AsteriaNAND extends Asteria {\r\n    private _net: NetworkNAND | undefined = undefined;\r\n    protected net() {\r\n        if (!this._net) { this._net = new NetworkNAND(); }\r\n        return this._net!;\r\n    }\r\n}\r\n\r\nexport default AsteriaNAND;\r\n","import * as Neuro from \"../neuro/neuro\";\r\n\r\nclass NetworkXOR extends Neuro.TestableNetwork {\r\n    protected source(count: number) {\r\n      this.studied.sort((a, b) => b.err - a.err);\r\n      const quarter = count / 4;\r\n      let arr = this.studied.slice(quarter, 2 * quarter).map(\r\n          (study) => study.sample\r\n      );\r\n      for (let i = 0; i < count; ++i) {\r\n            const x = Math.random();\r\n            const y = Math.random();\r\n            const xXORy = ((x > 0.5) === (y > 0.5)) ? 0 : 1;\r\n            arr.push({\r\n                input: new Map<string, number>([['x', x], ['y', y]]),\r\n                output: new Map<string, number>([[\"xXORy\", xXORy]])\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n    protected Act() { return Neuro.ActivationLogistic; }\r\n    protected Err() { return Neuro.ErrorSquared; }\r\n    protected hiddenSizes() { return [2, 4, 4]; }\r\n\r\n    private cachedTests = (() => {\r\n        let tests = [];\r\n        for (let x = 0; x <= 1; x += 0.1) {\r\n            for (let y = 0; y <= 1; y += 0.1) {\r\n              const xXORy = ((x > 0.5) === (y > 0.5)) ? 0 : 1;\r\n                tests.push({\r\n                    input: new Map<string, number>([['x', x], ['y', y]]),\r\n                    output: new Map<string, number>([[\"xXORy\", xXORy]])\r\n                });\r\n            }\r\n        }\r\n        return tests;\r\n    })();\r\n    protected tests() { return this.cachedTests; }\r\n\r\n    // Convenience Methods\r\n\r\n    value(x: number, y: number): number {\r\n        return this.getOutput(\r\n            new Map<string, number>([['x', x], ['y', y]])\r\n        ).get(\"xXORy\")!;\r\n    }\r\n}\r\n\r\nexport default NetworkXOR;\r\n","import Asteria from \"../Asteria\";\r\nimport NetworkXOR from \"./NetworkXOR\";\r\n\r\nclass AsteriaXOR extends Asteria {\r\n    private _net: NetworkXOR | undefined = undefined;\r\n    protected net() {\r\n        if (!this._net) { this._net = new NetworkXOR(); }\r\n        return this._net!;\r\n    }\r\n}\r\n\r\nexport default AsteriaXOR;\r\n","import React from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport Asteria42 from \"./asteria42/Asteria42\";\r\nimport AsteriaNAND from \"./asteriaNAND/AsteriaNAND\";\r\nimport AsteriaXOR from \"./asteriaXOR/AsteriaXOR\";\r\n\r\nfunction App() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <nav>\r\n            [<Link to=\"/Asteria/42\">42</Link>]\r\n            [<Link to=\"/Asteria/NAND\">NAND</Link>]\r\n            [<Link to=\"/Asteria/XOR\">XOR</Link>]\r\n\t\t\t\t\t</nav>\r\n\t\t\t\t</div>\r\n        <Switch>\r\n          <Route path=\"/Asteria/42\">\r\n            <Asteria42 />\r\n          </Route>\r\n          <Route path=\"/Asteria/NAND\">\r\n            <AsteriaNAND />\r\n          </Route>\r\n          <Route path=\"/Asteria/XOR\">\r\n            <AsteriaXOR />\r\n          </Route>\r\n        </Switch>\r\n\t\t\t</Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}