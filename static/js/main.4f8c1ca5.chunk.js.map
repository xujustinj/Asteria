{"version":3,"sources":["Table.js","Form.js","diffable/expression.js","diffable/variable.js","diffable/operation.js","diffable/error.js","diffable/activation.js","App.js","index.js"],"names":["TableHeader","TableBody","props","data","map","row","index","key","m","b","r","Table","Form","handleChange","event","target","name","value","setState","submitForm","handleSubmit","state","samples","sensitivity","this","type","min","onChange","onClick","Component","Differentiable","Error","Expression","_value","_deriv","Map","valueImpl","has","set","derivImpl","get","Variable","val","BinaryProduct","left","right","deriv","print","Sum","terms","reduce","acc","term","join","SquaredError","actual","expect","diff","Softplus","arg","x","y","Math","exp","isFinite","log","df","App","Diff","e","expressions","input","length","bind","sumM","sumB","sumR","i","random","forEach","expr","reset","sqrt","push","output","className","readOnly","train","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4f8c1ca5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction TableHeader() {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>G</th>\r\n                <th>m</th>\r\n                <th>b</th>\r\n                <th>R</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nfunction TableBody(props) {\r\n    return (\r\n        <tbody>{props.data.map((row, index) => {\r\n            return (\r\n                <tr key={index}>\r\n                    <td>{index}</td>\r\n                    <td>{row.m}</td>\r\n                    <td>{row.b}</td>\r\n                    <td>{row.r}</td>\r\n                </tr>\r\n            )\r\n        })}</tbody>\r\n    );\r\n}\r\n\r\nfunction Table(props) {\r\n    const { data } = props;\r\n\r\n    return (\r\n        <table>\r\n            <TableHeader />\r\n            <TableBody data={data} />\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = { samples: \"\", sensitivity: \"\" };\r\n    }\r\n\r\n    handleChange = event => {\r\n        const { name, value } = event.target;\r\n\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    submitForm = () => {\r\n        this.props.handleSubmit(this.state)\r\n    }\r\n\r\n    render() {\r\n        const { samples, sensitivity } = this.state;\r\n\r\n        return (\r\n            <form>\r\n                <label> Samples </label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"samples\"\r\n                    value={samples}\r\n                    min=\"1\"\r\n                    onChange={this.handleChange} />\r\n                <br />\r\n                <label> Sensitivity </label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"sensitivity\"\r\n                    value={sensitivity}\r\n                    onChange={this.handleChange} />\r\n                <br />\r\n                <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n","class Differentiable {\r\n    value() { throw new Error(\"Cannot call abstract method!\"); }\r\n    deriv(name) { throw new Error(\"Cannot call abstract method!\"); }\r\n\r\n    print() { throw new Error(\"Cannot call abstract method!\"); }\r\n}\r\n\r\nclass Expression extends Differentiable {\r\n    _value = null;\r\n    value() {\r\n        if (this._value === null) {\r\n            this._value = this.valueImpl();\r\n        }\r\n        return this._value;\r\n    }\r\n    valueImpl(name) {\r\n        throw new Error(\"Cannot call abstract method!\");\r\n    }\r\n\r\n    _deriv = new Map();\r\n    deriv(name) {\r\n        if (!this._deriv.has(name)) {\r\n            this._deriv.set(name, this.derivImpl(name));\r\n        }\r\n        return this._deriv.get(name);\r\n    }\r\n    derivImpl(name) {\r\n        throw new Error(\"Cannot call abstract method!\");\r\n    }\r\n\r\n    reset() {\r\n        this._value = null;\r\n        this._deriv = new Map();\r\n    }\r\n}\r\n\r\nexport default Expression;\r\nexport { Differentiable };\r\n","import { Differentiable } from './expression.js';\r\n\r\nclass Variable extends Differentiable {\r\n    constructor(name, val) {\r\n        super();\r\n        this.name = name;\r\n        this.val = val;\r\n    }\r\n\r\n    bind(val) { this.val = val; }\r\n\r\n    value() { return this.val; }\r\n    deriv(name) { return (name === this.name) ? 1 : 0; }\r\n\r\n    print() { return this.name; }\r\n}\r\n\r\nexport { Variable };\r\n","import Expression from './expression.js';\r\n\r\nclass BinaryProduct extends Expression {\r\n    constructor(left, right) {\r\n        super();\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n\r\n    valueImpl() {\r\n        return this.left.value() * this.right.value();\r\n    }\r\n\r\n    derivImpl(name) {\r\n        let dlr = this.left.deriv(name) * this.right.value();\r\n        let ldr = this.left.value() * this.right.deriv(name);\r\n        return dlr + ldr;\r\n    }\r\n\r\n    print() {\r\n        return this.left.print() + \" * \" + this.right.print();\r\n    }\r\n}\r\n\r\nclass Sum extends Expression {\r\n    constructor(...terms) {\r\n        super();\r\n        this.terms = terms;\r\n    }\r\n\r\n    valueImpl() {\r\n        return this.terms.reduce((acc, term) => acc + term.value(), 0);\r\n    }\r\n\r\n    derivImpl(name) {\r\n        return this.terms.reduce((acc, term) => acc + term.deriv(name), 0);\r\n    }\r\n\r\n    print() {\r\n        return \"(\" + this.terms.map((term) => term.print()).join(\" + \") + \")\";\r\n    }\r\n}\r\n\r\nexport { BinaryProduct, Sum };\r\n","import Expression from './expression.js';\r\n\r\nclass SquaredError extends Expression {\r\n    constructor(actual, expect) {\r\n        super();\r\n        this.actual = actual;\r\n        this.expect = expect;\r\n    }\r\n\r\n    valueImpl() {\r\n        let diff = this.actual.value() - this.expect.value();\r\n        return diff * diff;\r\n    }\r\n\r\n    derivImpl(name) {\r\n        let diff = this.actual.value() - this.expect.value();\r\n        return 2 * diff * (this.actual.deriv(name) - this.expect.deriv(name));\r\n    }\r\n\r\n    print() {\r\n        return \"(\" + this.actual.print() + \" - \" + this.expect.value() + \")^2\";\r\n    }\r\n}\r\n\r\nexport { SquaredError };\r\n","import Expression from './expression.js';\r\n\r\nclass Logistic extends Expression {\r\n    constructor(arg) {\r\n        super();\r\n        this.arg = arg;\r\n    }\r\n\r\n    valueImpl() {\r\n        let x = this.arg.value();\r\n        let y = 1 / (1 + Math.exp(-x));\r\n        return isFinite(y) ? y : ((x < 0) ? 0 : 1);\r\n    }\r\n\r\n    derivImpl(name) {\r\n        let val = this.arg.value();\r\n        let d = this.arg.deriv(name) / (Math.exp(val) + 2 + Math.exp(-val));\r\n        return isFinite(d) ? d : 0;\r\n    }\r\n\r\n    print() {\r\n        return \"σ(\" + this.arg.print() + \")\";\r\n    }\r\n}\r\n\r\nclass Softplus extends Expression {\r\n    constructor(arg) {\r\n        super();\r\n        this.arg = arg;\r\n    }\r\n\r\n    valueImpl() {\r\n        let x = this.arg.value();\r\n        let y = 1 + Math.exp(x);\r\n        return isFinite(y) ? Math.log(y) : x;\r\n    }\r\n\r\n    derivImpl(name) {\r\n        let x = this.arg.value();\r\n        let df = 1 / (1 + Math.exp(-x));\r\n        df = isFinite(df) ? df : 0;\r\n        return df * this.arg.deriv(name);\r\n    }\r\n\r\n    print() {\r\n        return \"ReLU(\" + this.arg.print() + \")\";\r\n    }\r\n}\r\n\r\nexport { Logistic, Softplus };\r\n","import React, { Component } from 'react';\nimport Table from './Table.js';\nimport Form from './Form.js';\nimport * as Diff from './diffable/diffable.js';\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.x = new Diff.Variable('x', 0);\n        this.m = new Diff.Variable('m', 1);\n        this.b = new Diff.Variable('b', 0);\n        this.e = new Diff.Variable(\"expect\", 42);\n\n        this.expressions = [];\n        this.expressions[0] = new Diff.BinaryProduct(this.m, this.x);\n        this.expressions[1] = new Diff.Sum(this.expressions[0], this.b);\n\n        this.y = new Diff.Softplus(this.expressions[1]);\n        this.expressions[2] = this.y;\n\n        this.r = new Diff.SquaredError(this.y, this.e);\n        this.expressions[3] = this.r;\n\n        this.state = { data: [{ m: 1, b: 0, r: \"\" }], input: 0 };\n    }\n\n    train(samples, sensitivity) {\n        if (!isFinite(samples)) { return; }\n        if (!isFinite(sensitivity)) { return; }\n        if (samples <= 0) { return; }\n\n        let { data } = this.state;\n        let { m, b } = data[data.length - 1];\n\n        this.m.bind(m);\n        this.b.bind(b);\n\n        let sumM = 0;\n        let sumB = 0;\n        let sumR = 0;\n        for (let i = 0; i < samples; ++i) {\n            this.x.bind(Math.random());\n            sumM += this.r.deriv('m');\n            sumB += this.r.deriv('b');\n            sumR += this.r.value();\n\n            this.expressions.forEach((expr) => { expr.reset(); });\n        }\n\n        m -= sumM * sensitivity / samples;\n        b -= sumB * sensitivity / samples;\n\n        data[data.length - 1].r = Math.sqrt(sumR / samples);\n        data.push({ m: m, b: b, r: \"\" });\n        this.setState({ data: data });\n    }\n\n    handleChange = event => {\n        const { name, value } = event.target;\n\n        this.setState({ [name]: value });\n    }\n\n    render() {\n        let { data } = this.state;\n        let { m, b } = data[data.length - 1];\n\n        this.m.bind(m);\n        this.b.bind(b);\n\n        let { input } = this.state;\n\n        let output = \"\";\n        if (isFinite(input)) {\n            this.x.bind(input);\n            output = this.y.value();\n        }\n\n        this.expressions.forEach((expr) => { expr.reset(); });\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>Asteria</h1>\n                    <p>Asteria wants to learn the answer to life, the universe, and everything, but she needs your help!</p>\n                </header>\n\n                <h2>About</h2>\n                <p>Asteria is the simplest possible neural network: a single input neuron linked to a single output neuron.<br />\n                She has no hidden layers, so Asteria is really just a linear relation passed through an activation function (softplus).<br />\n                The full equation for Asteria is y=ReLU(mx+b). Her initial state is y=ReLU(x), where m=1 and b=0.<br />\n                Asteria will be trained to minimize R^2, the mean of (y-42)^2 over randomly-sampled values of x ranging from 0 to 1.<br /></p>\n\n                <h2>Testing</h2>\n                <p>If she has learned well, Asteria should output 42 no matter what input we give her. Test it out here!</p>\n                <label>Input</label>\n                <input\n                    type=\"number\"\n                    name=\"input\"\n                    value={input}\n                    onChange={this.handleChange} />\n                <br />\n                <label>Output</label>\n                <input readOnly\n                    type=\"text\"\n                    name=\"output\"\n                    value={output} />\n\n                <h2>Training</h2>\n                <Form handleSubmit={(state) => {\n                    this.train(state.samples, state.sensitivity);\n                }} />\n                <Table data={data} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}