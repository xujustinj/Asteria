{"version":3,"sources":["Test.tsx","Train.tsx","Table.tsx","Asteria.tsx","diffable/expression.ts","diffable/variable.ts","diffable/operations.ts","neuro/activations.ts","neuro/errors.ts","neuro/parameters.ts","neuro/neurons.ts","matrices/matrix.ts","matrices/standard.ts","matrices/operations.ts","matrices/rotations.ts","neuro/layers.ts","neuro/network.ts","asteria42/Network42.ts","asteria42/Asteria42.tsx","asteriaNAND/NetworkNAND.ts","asteriaNAND/AsteriaNAND.tsx","asteriaXOR/NetworkXOR.ts","asteriaXOR/AsteriaXOR.tsx","App.tsx","index.tsx"],"names":["Test","props","net","state","network","inputs","Map","getInputLayer","get","map","neuron","print","outputs","getOutput","event","target","name","value","this","set","setState","inputsTSX","push","key","input","type","onChange","handleInput","bind","outputsTSX","output","readOnly","className","Component","Train","samples","sensitivity","friction","generations","onTrain","isFinite","min","handleChange","onClick","submitForm","TableHeader","names","header","TableBody","rows","row","values","Table","Array","from","keys","g","Asteria","makeRow","makeRowExtras","r","i","study","learn","unshift","length","AboutContents","TestingContents","TrainingContents","About","Testing","Training","Expression","_value","NaN","_deriv","valueImpl","v","has","derivImpl","clear","ExprUnary","arg","ExprBinary","left","right","ExprVariadic","terms","Variable","val","BinProduct","deriv","VarSum","reduce","acc","t","positive","x","Number","MIN_VALUE","product","y","xy","Math","sign","ActivationLogistic","exp","d","ActivationSoftplus","log","ErrorSquared","diff","Parameter","adjustments","velocity","err","studyImpl","adjustment","learnImpl","Weight","n","weight","w","count","reset","Bias","b","error","Neuron","InputNeuron","TrainableNeuron","Act","weights","bias","sum","c","getExpr","join","parentIndex","forEach","HiddenNeuron","OutputNeuron","Err","getErr","SymMatrix","entries","size","undefined","j","AsymMatrix","height","width","transpose","h","setT","standardBasis","dim","scale","basis","fill","matrixProduct","a","cols","col","randomRotation","planes","cos","random","sin","sqrt","randomRotate","matrix","even","half","z","planess","pop","shift","reduceRight","orthoVectors","vectors","concat","slice","Layer","InputLayer","neurons","node","vals","TrainableLayer","HiddenLayer","parent","parentNeurons","weightVectors","index","childIndex","getWeight","getBias","OutputLayer","childName","TestableNetwork","tests","valueErr","rsq","inputLayer","hiddenLayers","outputLayer","studied","source","inputNames","outputNames","last","hiddenSizes","sample","layer","Network42","cachedTests","sort","arr","Neuro","getOutputLayer","Asteria42","_net","m","NetworkNAND","xNANDy","quarter","AsteriaNAND","NetworkXOR","xXORy","AsteriaXOR","App","to","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8d3704bc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { TestableNetwork } from \"./neuro\";\r\n\r\ntype TestProps = {\r\n    network: TestableNetwork;\r\n}\r\n\r\nclass Test extends Component<TestProps> {\r\n    net: TestableNetwork;\r\n    state: {\r\n        inputs: Map<string, number>;\r\n        outputs: Map<string, number>;\r\n    }\r\n\r\n    constructor(props: TestProps) {\r\n        super(props);\r\n\r\n        this.net = props.network;\r\n        const inputs = new Map(this.net.getInputLayer().get().map(\r\n            (neuron) => [neuron.print(), 0]\r\n        ));\r\n        this.state = {\r\n            inputs: inputs,\r\n            outputs: this.net.getOutput(inputs),\r\n        }\r\n    }\r\n\r\n    handleInput(event: { target: { name: string; value: any; }; }) {\r\n        const { name, value } = event.target;\r\n        const { inputs } = this.state;\r\n        inputs.set(name, value);\r\n        this.setState({ inputs: inputs, outputs: this.net.getOutput(inputs) });\r\n    }\r\n\r\n    render() {\r\n      const input: string = \"input\";\r\n      const output: string = \"output\";\r\n\r\n      let inputsTSX: JSX.Element[] = [];\r\n      for (const [name, value] of this.state.inputs) {\r\n          inputsTSX.push(\r\n            <div key={input + \"-\" + name}>\r\n            <label>{name}=</label>\r\n            <input\r\n              type=\"number\"\r\n              name={name}\r\n              value={value}\r\n              onChange={this.handleInput.bind(this)} />\r\n            </div>\r\n          );\r\n      }\r\n\r\n      let outputsTSX: JSX.Element[] = [];\r\n      for (const [name, value] of this.state.outputs) {\r\n          outputsTSX.push(\r\n            <div key={output + \"-\" + name}>\r\n            <label>{name}=</label>\r\n            <input readOnly\r\n              type=\"number\"\r\n              name={name}\r\n              value={value}/>\r\n            </div>\r\n          );\r\n      }\r\n\r\n      return (\r\n        <form className=\"Test\">\r\n          <h3>Inputs</h3>\r\n          {inputsTSX}\r\n          <h3>Outputs</h3>\r\n          {outputsTSX}\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Test;\r\n","import React, { Component } from \"react\";\r\n\r\ntype TrainProps = {\r\n    onTrain: (\r\n        samples: number,\r\n        sensitivity: number,\r\n        friction: number,\r\n        generations: number\r\n    ) => void;\r\n};\r\n\r\nclass Train extends Component<TrainProps> {\r\n    state: {\r\n        samples: number;\r\n        sensitivity: number;\r\n        friction: number;\r\n        generations: number;\r\n    };\r\n\r\n    constructor(props: TrainProps) {\r\n        super(props);\r\n        this.state = {\r\n            samples: 1,\r\n            sensitivity: 1,\r\n            friction: 1,\r\n            generations: 1,\r\n        };\r\n    }\r\n\r\n    handleChange(event: { target: { name: string; value: any; }; }) {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    submitForm() {\r\n        const { samples, sensitivity, friction, generations, } = this.state;\r\n        this.props.onTrain(samples, sensitivity, friction, generations);\r\n    }\r\n\r\n    render() {\r\n        const { samples, sensitivity, friction, generations, } = this.state;\r\n        return (\r\n          <form className=\"Train\">\r\n            <label>Samples</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"samples\"\r\n              value={isFinite(samples) ? samples : \"\"}\r\n              min=\"1\"\r\n              onChange={this.handleChange.bind(this)} />\r\n            <br />\r\n\r\n            <label>Sensitivity</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"sensitivity\"\r\n              value={isFinite(sensitivity) ? sensitivity : \"\"}\r\n              onChange={this.handleChange.bind(this)} />\r\n            <br />\r\n\r\n            <label>Friction</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"friction\"\r\n              value={isFinite(friction) ? friction : \"\"}\r\n              onChange={this.handleChange.bind(this)} />\r\n            <br />\r\n\r\n            <label>Generations</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"generations\"\r\n              value={isFinite(generations) ? generations : \"\"}\r\n              min=\"0\"\r\n              onChange={this.handleChange.bind(this)} />\r\n            <br />\r\n\r\n            <input\r\n              type=\"button\"\r\n              value=\"Train\"\r\n              onClick={this.submitForm.bind(this)} />\r\n          </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Train;\r\n","import React from \"react\";\r\n\r\nexport class Row {\r\n    constructor(public key: number, public values: Map<string, any>) {}\r\n}\r\n\r\nfunction TableHeader(props: { names: string[] }) {\r\n    const header=\"header\";\r\n    return (\r\n      <thead>\r\n        <tr key={header}>\r\n          {props.names.map((name) => <th key={header + '-' + name}>{name}</th>)}\r\n        </tr>\r\n      </thead>\r\n    );\r\n}\r\n\r\nfunction TableBody(props: { names: string[], rows: Row[] }) {\r\n    const rows = props.rows.map((row) => (\r\n      <tr key={row.key}>\r\n        {props.names.map(\r\n            (name) => <td key={row.key + '-' + name}>{row.values.get(name)}</td>\r\n        )}\r\n      </tr>\r\n    ));\r\n    return (\r\n      <tbody>{rows}</tbody>\r\n    );\r\n}\r\n\r\nfunction Table(props: { rows: Row[] }) {\r\n    const { rows } = props;\r\n    const names = Array.from(rows[0].values.keys());\r\n    return (\r\n      <table>\r\n        <TableHeader names={names} />\r\n        <TableBody names={names} rows={rows} />\r\n      </table>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport { TestableNetwork } from \"./neuro\";\r\nimport Test from \"./Test\"\r\nimport Train from \"./Train\";\r\nimport Table, { Row } from \"./Table\";\r\n\r\nconst g = 'G', r = 'R';\r\n\r\nabstract class Asteria extends Component<{}> {\r\n    state: { rows: Row[]; input: number; };\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = { rows: [this.makeRow(0)], input: 0 };\r\n    }\r\n\r\n    protected abstract net(): TestableNetwork;\r\n\r\n    private makeRow(key: number): Row {\r\n        return {\r\n            key: key,\r\n            values: new Map([\r\n                [g, key],\r\n                ...this.makeRowExtras(),\r\n                [r, this.net().r()],\r\n            ]),\r\n        };\r\n    }\r\n    protected makeRowExtras(): Map<string, number> { return new Map(); }\r\n\r\n    private onTrain(samples: number, sensitivity: number, friction: number, generations: number) {\r\n        for (let i = 0; i < generations; ++i) {\r\n            this.net().study(samples);\r\n            this.net().learn(sensitivity, friction);\r\n\r\n            let { rows } = this.state;\r\n            rows.unshift(this.makeRow(rows.length));\r\n            this.setState({ rows: rows });\r\n        }\r\n    };\r\n\r\n    private About(): JSX.Element {\r\n        const AboutContents = this.AboutContents.bind(this);\r\n        return (\r\n          <div>\r\n            <h2>About</h2>\r\n            <AboutContents />\r\n          </div>\r\n        )\r\n    }\r\n    protected AboutContents(): JSX.Element { return <div />; }\r\n\r\n    private Testing(): JSX.Element {\r\n        const TestingContents = this.TestingContents.bind(this);\r\n        return (\r\n          <div>\r\n            <h2>Testing</h2>\r\n            <TestingContents />\r\n            <Test network={this.net()} />\r\n          </div>\r\n        )\r\n    }\r\n    protected TestingContents(): JSX.Element { return <div />; }\r\n\r\n    private Training(): JSX.Element {\r\n        const { rows } = this.state;\r\n        const TrainingContents = this.TrainingContents.bind(this);\r\n        return (\r\n          <div>\r\n            <h2>Training</h2>\r\n            <TrainingContents />\r\n            <Train onTrain={this.onTrain.bind(this)}/>\r\n            <Table rows={rows} />\r\n          </div>\r\n        )\r\n    }\r\n    protected TrainingContents(): JSX.Element { return <div />; }\r\n\r\n    render() {\r\n        const About = this.About.bind(this);\r\n        const Testing = this.Testing.bind(this);\r\n        const Training = this.Training.bind(this);\r\n        return (\r\n          <div className=\"Asteria42\">\r\n            <About />\r\n            <Testing />\r\n            <Training />\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Asteria;\r\n","import Differentiable from \"./differentiable\";\r\nimport Variable from \"./variable\";\r\n\r\nabstract class Expression implements Differentiable {\r\n    private _value: number = NaN;\r\n    value(): number {\r\n        if (!isFinite(this._value)) {\r\n            this._value = this.valueImpl();\r\n        }\r\n        return this._value;\r\n    }\r\n    protected abstract valueImpl(): number;\r\n\r\n    private _deriv = new Map<Variable, number>();\r\n    deriv(v: Variable): number {\r\n        if (!this._deriv.has(v)) {\r\n            this._deriv.set(v, this.derivImpl(v));\r\n        }\r\n        return this._deriv.get(v) as number;\r\n    }\r\n    protected abstract derivImpl(_v: Variable): number;\r\n\r\n    // abstract print(): string;\r\n\r\n    reset() {\r\n        this._value = NaN;\r\n        this._deriv.clear();\r\n    }\r\n}\r\n\r\nabstract class ExprUnary extends Expression {\r\n    protected arg: Differentiable;\r\n\r\n    constructor(arg: Differentiable) {\r\n        super();\r\n        this.arg = arg;\r\n    }\r\n}\r\n\r\nabstract class ExprBinary extends Expression {\r\n    protected left: Differentiable;\r\n    protected right: Differentiable;\r\n\r\n    constructor(left: Differentiable, right: Differentiable) {\r\n        super();\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\n\r\nabstract class ExprVariadic extends Expression {\r\n    protected terms: Differentiable[];\r\n\r\n    constructor(...terms: Differentiable[]) {\r\n        super();\r\n        this.terms = terms;\r\n    }\r\n}\r\n\r\nexport default Expression;\r\nexport { ExprUnary, ExprBinary, ExprVariadic };\r\n","import Differentiable from \"./differentiable\";\r\n\r\nclass Variable implements Differentiable {\r\n    private name: string;\r\n    private val: number;\r\n\r\n    constructor(name: string, val: number = 0) {\r\n        this.name = name;\r\n        this.val = val;\r\n    }\r\n\r\n    bind(val: number) { this.val = val; }\r\n\r\n    value(): number { return this.val; }\r\n    deriv(v: Variable): number { return (v === this) ? 1 : 0; }\r\n\r\n    print(): string { return this.name; }\r\n}\r\n\r\nexport default Variable;\r\n","import { ExprBinary, ExprVariadic } from \"./expression\";\r\nimport Variable from \"./variable\";\r\n\r\nclass BinProduct extends ExprBinary {\r\n    protected valueImpl(): number {\r\n        return this.left.value() * this.right.value();\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        const dlr = this.left.deriv(v) * this.right.value();\r\n        const ldr = this.left.value() * this.right.deriv(v);\r\n        return dlr + ldr;\r\n    }\r\n\r\n    // print(): string {\r\n    //     return this.left.print() + \" * \" + this.right.print();\r\n    // }\r\n}\r\n\r\nclass VarSum extends ExprVariadic {\r\n    protected valueImpl(): number {\r\n        return this.terms.reduce((acc, t) => acc + t.value(), 0);\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        return this.terms.reduce((acc, t) => acc + t.deriv(v), 0);\r\n    }\r\n\r\n    // print(): string {\r\n    //     return \"(\" + this.terms.map((t) => t.print()).join(\" + \") + \")\";\r\n    // }\r\n}\r\n\r\nexport { BinProduct, VarSum };\r\n","import { Differentiable, ExprUnary, Variable } from \"../diffable\";\r\n\r\n// Vanishing gradient countermeasures\r\nfunction positive(x: number): number {\r\n    return (isFinite(x) && x > 0) ? x : Number.MIN_VALUE;\r\n}\r\nfunction product(x: number, y: number): number {\r\n    const xy = x * y;\r\n    return (xy === 0) ? (Math.sign(x) * Math.sign(y) * Number.MIN_VALUE) : xy;\r\n}\r\n\r\nclass ActivationLogistic extends ExprUnary {\r\n    protected valueImpl(): number {\r\n        return positive(1 / (1 + Math.exp(-this.arg.value())));\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        const val = this.arg.value();\r\n        const d = positive(1 / (Math.exp(val) + 2 + Math.exp(-val)));\r\n        return product(this.arg.deriv(v), d);\r\n    }\r\n\r\n    // print(): string {\r\n    //     return \"σ(\" + this.arg.print() + \")\";\r\n    // }\r\n}\r\n\r\nclass ActivationSoftplus extends ExprUnary {\r\n    protected valueImpl(): number {\r\n        const x = this.arg.value();\r\n        const y = 1 + Math.exp(x);\r\n        return isFinite(y) ? positive(Math.log(y)) : x;\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        const d = positive(1 / (1 + Math.exp(-this.arg.value())));\r\n        return product(this.arg.deriv(v), d);\r\n    }\r\n\r\n    // print(): string {\r\n    //     return \"ReLU(\" + this.arg.print() + \")\";\r\n    // }\r\n}\r\n\r\nexport interface ActivationClass {\r\n    new(arg: Differentiable): ExprUnary;\r\n}\r\nexport { ActivationLogistic, ActivationSoftplus };\r\n","import { Differentiable, ExprBinary, Variable } from \"../diffable\";\r\n\r\nclass ErrorSquared extends ExprBinary {\r\n    protected valueImpl(): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        return diff * diff;\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        return 2 * diff * (this.left.deriv(v) - this.right.deriv(v));\r\n    }\r\n\r\n    // print(): string {\r\n    //     return \"(\" + this.left.print() + \" - \" + this.right.value() + \")^2\";\r\n    // }\r\n}\r\n\r\nclass ErrorTessaracted extends ExprBinary {\r\n    protected valueImpl(): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        let dsq = diff * diff;\r\n        return dsq * dsq;\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        return 4 * diff * diff * diff * (this.left.deriv(v) - this.right.deriv(v));\r\n    }\r\n\r\n    // print(): string {\r\n    //     return \"(\" + this.left.print() + \" - \" + this.right.value() + \")^4\";\r\n    // }\r\n}\r\n\r\nexport interface ErrorClass {\r\n    new(left: Differentiable, right: Differentiable): ExprBinary;\r\n}\r\nexport { ErrorSquared, ErrorTessaracted };\r\n","import { Differentiable, Variable, BinProduct } from \"../diffable\";\r\nimport Trainable from \"./trainable\";\r\nimport Neuron from \"./neurons\";\r\n\r\nabstract class Parameter implements Trainable {\r\n    private adjustments: number[];\r\n    private velocity: number;\r\n\r\n    constructor() {\r\n        this.adjustments = [];\r\n        this.velocity = 0;\r\n    }\r\n\r\n    abstract get(): Variable;\r\n    value(): number { return this.get().value(); }\r\n    print(): string { return this.get().print(); }\r\n\r\n    abstract getExpr(): Differentiable;\r\n\r\n    study(err: Differentiable) {\r\n        this.adjustments.push(-this.studyImpl(err));\r\n    }\r\n    protected abstract studyImpl(error: Differentiable): number;\r\n\r\n    learn(sensitivity: number, friction: number) {\r\n        if (this.adjustments.length > 0) {\r\n            const adjustment = this.adjustments.reduce(\r\n                (acc, t) => acc + t, 0\r\n            ) * sensitivity / this.adjustments.length;\r\n            this.velocity = this.velocity * (1 - friction) + adjustment;\r\n            this.learnImpl(this.velocity);\r\n            this.adjustments = [];\r\n        }\r\n    }\r\n    protected abstract learnImpl(adjustment: number): void;\r\n}\r\n\r\nclass Weight extends Parameter {\r\n    private static count: number = 0;\r\n\r\n    private w: Variable;\r\n    private t: BinProduct;\r\n\r\n    constructor(n: Neuron, weight: number) {\r\n        super();\r\n        this.w = new Variable(\"w\" + Weight.count, weight);\r\n        this.t = new BinProduct(this.w, n.get());\r\n        ++Weight.count;\r\n    }\r\n\r\n    get(): Variable { return this.w; }\r\n    getExpr(): Differentiable { return this.t; }\r\n\r\n    protected studyImpl(err: Differentiable): number {\r\n        return err.deriv(this.w);\r\n    }\r\n    protected learnImpl(adjustment: number) {\r\n        this.w.bind(this.value() + adjustment);\r\n    }\r\n\r\n    reset() {\r\n        this.t.reset();\r\n    }\r\n}\r\n\r\nclass Bias extends Parameter {\r\n    static count: number = 0;\r\n\r\n    private b: Variable;\r\n\r\n    constructor() {\r\n        super();\r\n        this.b = new Variable(\"b\" + Bias.count, 0);\r\n        ++Bias.count;\r\n    }\r\n\r\n    get(): Variable { return this.b; }\r\n    getExpr(): Differentiable { return this.get(); }\r\n\r\n    protected studyImpl(error: Differentiable): number {\r\n        return error.deriv(this.b);\r\n    }\r\n    protected learnImpl(adjustment: number) {\r\n        this.b.bind(this.value() + adjustment);\r\n    }\r\n}\r\n\r\nexport { Weight, Bias };\r\n","import {\r\n    Differentiable,\r\n    ExprUnary, ExprBinary,\r\n    Variable,\r\n    VarSum\r\n} from \"../diffable\";\r\nimport Trainable from \"./trainable\";\r\nimport { Weight, Bias } from \"./parameters\";\r\nimport { ActivationClass } from \"./activations\";\r\nimport { ErrorClass } from \"./errors\";\r\n\r\nabstract class Neuron {\r\n    abstract get(): Differentiable;\r\n    value(): number { return this.get().value(); }\r\n    abstract print(): string;\r\n}\r\n\r\nclass InputNeuron extends Neuron {\r\n    private x: Variable;\r\n\r\n    constructor(name: string) {\r\n        super();\r\n        this.x = new Variable(name);\r\n    }\r\n\r\n    get(): Differentiable { return this.x; }\r\n    print(): string { return this.x.print(); }\r\n\r\n    bind(val: number) { this.x.bind(val); }\r\n}\r\n\r\nabstract class TrainableNeuron extends Neuron implements Trainable {\r\n    private weights: Weight[];\r\n    private bias: Bias;\r\n    private sum: VarSum;\r\n    private exp: ExprUnary;\r\n\r\n    constructor(Act: ActivationClass, ...weights: Weight[]) {\r\n        super();\r\n        this.weights = weights;\r\n        this.bias = new Bias();\r\n\r\n        const terms = this.weights.map((c) => c.getExpr());\r\n        this.sum = new VarSum(...terms, this.bias.getExpr());\r\n        this.exp = new Act(this.sum);\r\n    }\r\n\r\n    get(): Differentiable { return this.exp; }\r\n    print(): string {\r\n        return \"[\" + this.weights.map(\r\n            (w) => w.value()\r\n        ).join(\" \") + \"] \" + this.bias.value();\r\n    }\r\n\r\n    getWeight(parentIndex: number): Weight { return this.weights[parentIndex]; }\r\n    getBias(): Bias { return this.bias; }\r\n\r\n    study(error: Differentiable) {\r\n        this.weights.forEach((w) => w.study(error));\r\n        this.bias.study(error);\r\n    }\r\n    learn(sensitivity: number, friction: number) {\r\n        this.weights.forEach((w) => w.learn(sensitivity, friction));\r\n        this.bias.learn(sensitivity, friction);\r\n    }\r\n\r\n    reset() {\r\n        this.exp.reset();\r\n        this.sum.reset();\r\n        this.weights.forEach((w) => w.reset());\r\n    }\r\n}\r\n\r\nclass HiddenNeuron extends TrainableNeuron {}\r\n\r\nclass OutputNeuron extends TrainableNeuron {\r\n    private y: Variable;\r\n    private err: ExprBinary;\r\n\r\n    constructor(\r\n        name: string,\r\n        Act: ActivationClass,\r\n        Err: ErrorClass,\r\n        ...weights: Weight[]\r\n    ) {\r\n        super(Act, ...weights);\r\n        this.y = new Variable(name);\r\n        this.err = new Err(this.get(), this.y);\r\n    }\r\n\r\n    getErr(): Differentiable { return this.err; }\r\n    valueErr(): number { return this.getErr().value(); }\r\n\r\n    bind(val: number) { this.y.bind(val); }\r\n\r\n    reset() {\r\n        super.reset();\r\n        this.err.reset();\r\n    }\r\n}\r\n\r\nexport default Neuron;\r\nexport { InputNeuron, TrainableNeuron, HiddenNeuron, OutputNeuron };\r\n","class SymMatrix implements Matrix {\r\n    entries: number[][];\r\n    size: number;\r\n\r\n    constructor(\r\n        entries: number[][],\r\n        size: number | undefined = undefined\r\n    ) {\r\n        this.entries = entries;\r\n        this.size = (size === undefined) ? this.entries.length : size;\r\n    }\r\n\r\n    get(i: number, j: number): number { return this.entries[i][j]; }\r\n    row(i: number): number[] { return this.entries[i]; }\r\n    col(j: number): number[] { return this.entries[j]; }\r\n    rows(): number[][] { return this.entries; }\r\n    cols(): number[][] { return this.entries; }\r\n\r\n    height(): number { return this.size; }\r\n    width(): number { return this.size; }\r\n    transpose(): SymMatrix { return this; }\r\n\r\n    print(): string {\r\n        return this.entries.map((row) => row.join()).join('\\n');\r\n    }\r\n}\r\n\r\nclass AsymMatrix {\r\n    entries: number[][];\r\n    h: number;\r\n    w: number;\r\n    t: number[][] | null;\r\n\r\n    // height, width, and transpose can all be computed from the given entries at the cost of performance.\r\n    constructor(\r\n        entries: number[][],\r\n        height: number | undefined = undefined,\r\n        width: number | undefined = undefined,\r\n        transpose: number[][] | undefined = undefined\r\n    ) {\r\n        this.entries = entries;\r\n        this.h = (height === undefined) ? entries.length : height;\r\n        this.w = (width === undefined) ? entries[0].length : width;\r\n        this.t = (transpose === undefined) ? null : transpose;\r\n    }\r\n\r\n    get(i: number, j: number): number { return this.entries[i][j]; }\r\n    row(i: number): number[] { return this.entries[i]; }\r\n    col(j: number): number[] { this.setT(); return this.t![j]; }\r\n    rows(): number[][] { return this.entries; }\r\n    cols(): number[][] { this.setT(); return this.t!; }\r\n\r\n    height(): number { return this.h; }\r\n    width(): number { return this.w; }\r\n    transpose(): AsymMatrix {\r\n        this.setT();\r\n        return new AsymMatrix(this.t!, this.w, this.h, this.entries);\r\n    }\r\n    setT() {\r\n        if (this.t === null) {\r\n            this.t = new Array(this.w);\r\n            for (let i = 0; i < this.w; ++i) {\r\n                this.t[i] = this.entries.map((row) => row[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    print(): string {\r\n        return this.entries.map((row) => row.join()).join('\\n');\r\n    }\r\n}\r\n\r\nexport default interface Matrix {\r\n    get(i: number, j: number): number;\r\n    row(i: number): number[];\r\n    col(j: number): number[];\r\n    rows(): number[][];\r\n    cols(): number[][];\r\n\r\n    height(): number;\r\n    width(): number;\r\n    transpose(): Matrix;\r\n\r\n    print(): string;\r\n}\r\nexport { SymMatrix, AsymMatrix };\r\n","import { SymMatrix } from \"./matrix\";\r\n\r\nfunction standardBasis(dim: number, scale: number = 1): SymMatrix {\r\n    let basis: number[][] = new Array(dim);\r\n    for (let i = 0; i < dim; ++i) {\r\n        basis[i] = new Array(dim).fill(0);\r\n        basis[i][i] = scale;\r\n    }\r\n    return new SymMatrix(basis, dim);\r\n}\r\n\r\nexport default standardBasis;\r\n","import Matrix, { AsymMatrix } from \"./matrix\";\r\n\r\nfunction dotProduct(u: number[], v: number[]): number {\r\n  return u.reduce((acc, n, i) => acc + n * v[i], 0);\r\n}\r\nfunction matrixProduct(a: Matrix, b: Matrix): AsymMatrix {\r\n    return new AsymMatrix(a.rows().map((row) =>\r\n        b.cols().map((col) =>\r\n            dotProduct(row, col)\r\n        )\r\n    ), a.height(), b.width());\r\n}\r\n\r\nexport { dotProduct, matrixProduct };\r\n","import Matrix, { AsymMatrix } from \"./matrix\";\r\nimport standardBasis from \"./standard\";\r\nimport { matrixProduct } from \"./operations\";\r\n\r\ntype Plane = { x: number; y: number; };\r\n\r\nfunction randomRotation(dim: number, ...planes: Plane[]): AsymMatrix {\r\n    let basis: number[][] = new Array(dim);\r\n    for (let i = 0; i < dim; ++i) {\r\n        basis[i] = new Array(dim).fill(0);\r\n        basis[i][i] = 1;\r\n    }\r\n    let transpose = basis;\r\n    for (const { x, y } of planes) {\r\n          if (x < dim && y < dim) {\r\n            const cos = 2 * Math.random() - 1;\r\n            const sin = Math.sqrt(1 - cos * cos);\r\n            basis[x][x] = cos;\r\n            basis[y][y] = cos;\r\n            if (Math.random() < 0.5) {\r\n                basis[x][y] = sin;\r\n                basis[y][x] = -sin;\r\n                transpose[x][y] = -sin;\r\n                transpose[y][x] = sin;\r\n            } else {\r\n                basis[x][y] = -sin;\r\n                basis[y][x] = sin;\r\n                transpose[x][y] = sin;\r\n                transpose[y][x] = -sin;\r\n            }\r\n        }\r\n    }\r\n    return new AsymMatrix(basis, dim, dim, transpose);\r\n}\r\n\r\nfunction randomRotate(matrix: Matrix): Matrix {\r\n    const dim: number = matrix.height();\r\n    const even: number = (dim % 2 === 0) ? dim : dim + 1;\r\n    const half: number = even / 2;\r\n\r\n    let x: number[] = [];\r\n    let y: number[] = [];\r\n    let z: number = even - 1;\r\n    let planess: Plane[][] = [];\r\n    for (let i = 1; i < half; ++i) {\r\n        x.push(i);\r\n        y.push(z - i);\r\n    }\r\n    for (let i = 0; i <= even - 2; ++i) {\r\n        planess[i] = [{ x: 0, y: z }];\r\n        for (let j = 0; j < x.length; ++j) {\r\n            planess[i].push({ x: x[j], y: y[j] });\r\n        }\r\n        x.unshift(z);\r\n        y.push(x.pop()!);\r\n        z = y.shift()!;\r\n    }\r\n\r\n    return planess.map((planes) =>\r\n        randomRotation(dim, ...planes)\r\n    ).reduceRight(matrixProduct, matrix);\r\n}\r\n\r\nfunction orthoVectors(dim: number, count: number, scale = 1): number[][] {\r\n    const basis = standardBasis(dim, scale);\r\n    let vectors: number[][] = [];\r\n    while (vectors.length < count) {\r\n        vectors = vectors.concat(randomRotate(basis).cols());\r\n    }\r\n    return vectors.slice(0, count);\r\n}\r\n\r\nexport { standardBasis, randomRotation, randomRotate, orthoVectors };\r\n","import Neuron, {\r\n    InputNeuron,\r\n    TrainableNeuron, HiddenNeuron, OutputNeuron\r\n} from \"./neurons\";\r\nimport { Differentiable, VarSum } from \"../diffable\";\r\nimport { ActivationClass } from \"./activations\";\r\nimport { ErrorClass } from \"./errors\";\r\nimport { Weight, Bias } from \"./parameters\";\r\nimport Trainable from \"./trainable\";\r\nimport { orthoVectors } from \"../matrices\";\r\n\r\nabstract class Layer {\r\n    abstract get(): Neuron[];\r\n    print(): string {\r\n        return \"[\\n\" + this.get().map(\r\n            (n) => \"\\t\" + n.print()\r\n        ).join(\"\\n\") + \"\\n]\";\r\n    }\r\n\r\n    size(): number { return this.get().length; }\r\n}\r\n\r\nclass InputLayer extends Layer {\r\n    private neurons: Map<string, InputNeuron>;\r\n\r\n    constructor(...names: string[]) {\r\n        super();\r\n        this.neurons = new Map();\r\n        for (const name of names) {\r\n            this.neurons.set(name, new InputNeuron(name));\r\n        }\r\n    }\r\n\r\n    get(): Neuron[] { return Array.from(this.neurons.values()); }\r\n    getNeuron(name: string): Neuron | undefined {\r\n        return this.neurons.get(name);\r\n    }\r\n\r\n    values(): Map<string, number> {\r\n        let map = new Map<string, number>();\r\n        for (const [name, node] of this.neurons) {\r\n            map.set(name, node.value());\r\n        }\r\n        return map;\r\n    }\r\n\r\n    bind(vals: Map<string, number>) {\r\n        for (const [name, neuron] of this.neurons) {\r\n            neuron.bind(vals.get(name) ?? 0);\r\n        }\r\n    }\r\n}\r\n\r\nabstract class TrainableLayer extends Layer implements Trainable {\r\n    abstract get(): TrainableNeuron[];\r\n\r\n    study(error: Differentiable) {\r\n        this.get().forEach((n) => n.study(error));\r\n    }\r\n    learn(sensitivity: number, friction: number) {\r\n        this.get().forEach((n) => n.learn(sensitivity, friction));\r\n    }\r\n\r\n    reset() {\r\n        this.get().forEach((n) => n.reset());\r\n    }\r\n}\r\n\r\nclass HiddenLayer extends TrainableLayer {\r\n    private neurons: TrainableNeuron[];\r\n\r\n    constructor(parent: Layer, Act: ActivationClass, size: number) {\r\n        super();\r\n        this.neurons = [];\r\n        const parentNeurons: Neuron[] = parent.get();\r\n        const weightVectors: number[][] = orthoVectors(\r\n            parentNeurons.length,\r\n            size\r\n        );\r\n        for (let i = 0; i < size; ++i) {\r\n            this.neurons.push(new HiddenNeuron(Act, ...parentNeurons.map(\r\n                (n, j) => new Weight(n, weightVectors[i][j])\r\n            )));\r\n        }\r\n    }\r\n\r\n    get(): TrainableNeuron[] { return this.neurons; }\r\n    getNeuron(index: number): Neuron {\r\n        return this.neurons[index];\r\n    }\r\n\r\n    getWeight(childIndex: number, parentIndex: number): Weight {\r\n        return this.neurons[childIndex].getWeight(parentIndex);\r\n    }\r\n    getBias(childIndex: number): Bias {\r\n        return this.neurons[childIndex].getBias();\r\n    }\r\n\r\n    values(): number[] { return this.neurons.map((n) => n.value())};\r\n}\r\n\r\nclass OutputLayer extends TrainableLayer {\r\n    private neurons: Map<string, OutputNeuron>;\r\n    private err: VarSum;\r\n\r\n    constructor(\r\n        parent: Layer,\r\n        Act: ActivationClass,\r\n        Err: ErrorClass,\r\n        ...names: string[]\r\n    ) {\r\n        super();\r\n        this.neurons = new Map();\r\n        const parentNeurons: Neuron[] = parent.get();\r\n        const weightVectors: number[][] = orthoVectors(\r\n            parentNeurons.length,\r\n            names.length\r\n        );\r\n        for (let i = 0; i < names.length; ++i) {\r\n            this.neurons.set(\r\n                names[i],\r\n                new OutputNeuron(names[i], Act, Err, ...parentNeurons.map(\r\n                    (n, j) => new Weight(n, weightVectors[i][j])\r\n                ))\r\n            );\r\n        }\r\n        this.err = new VarSum(\r\n            ...Array.from(this.neurons.values()).map((n) => n.getErr())\r\n        );\r\n    }\r\n\r\n    get(): TrainableNeuron[] { return Array.from(this.neurons.values()); }\r\n    getNeuron(name: string): Neuron | undefined {\r\n        return this.neurons.get(name);\r\n    }\r\n\r\n    getWeight(childName: string, parentIndex: number): Weight | undefined {\r\n        return this.neurons.get(childName)?.getWeight(parentIndex);\r\n    }\r\n    getBias(name: string): Bias | undefined {\r\n        return this.neurons.get(name)?.getBias();\r\n    }\r\n\r\n    getErr(): Differentiable { return this.err; }\r\n    valueErr(): number { return this.getErr().value(); }\r\n\r\n    values(): Map<string, number> {\r\n        let map = new Map<string, number>();\r\n        for (const [name, node] of this.neurons) {\r\n            map.set(name, node.value());\r\n        }\r\n        return map;\r\n    }\r\n\r\n    bind(vals: Map<string, number>) {\r\n        for (const [name, neuron] of this.neurons) {\r\n            neuron.bind(vals.get(name) ?? 0);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        this.err.reset();\r\n    }\r\n}\r\n\r\nexport default Layer;\r\nexport { InputLayer, HiddenLayer, OutputLayer };\r\n","import Layer, { InputLayer, HiddenLayer, OutputLayer } from \"./layers\";\r\nimport { ActivationClass } from \"./activations\";\r\nimport { ErrorClass, ErrorSquared } from \"./errors\";\r\nimport { Differentiable } from \"../diffable\";\r\n\r\ntype Input = Map<string, number>;\r\ntype Output = Map<string, number>;\r\ntype Sample = { input: Input; output: Output; };\r\n\r\nabstract class Network {\r\n    private inputLayer: InputLayer;\r\n    private hiddenLayers: HiddenLayer[];\r\n    private outputLayer: OutputLayer;\r\n\r\n    protected studied: { sample: Sample, err: number }[];\r\n\r\n    protected abstract source(count: number): Sample[];\r\n    protected abstract Act(): ActivationClass;\r\n    protected abstract Err(): ErrorClass;\r\n    protected abstract hiddenSizes(): number[];\r\n\r\n    constructor() {\r\n        this.studied = [];\r\n\r\n        const { input, output } = this.source(1)[0];\r\n        const inputNames = Array.from(input.keys());\r\n        const outputNames = Array.from(output.keys());\r\n\r\n        this.inputLayer = new InputLayer(...inputNames);\r\n        this.hiddenLayers = [];\r\n        let last: Layer = this.inputLayer;\r\n        for (const size of this.hiddenSizes()) {\r\n            this.hiddenLayers.push(new HiddenLayer(last, this.Act(), size));\r\n            last = this.hiddenLayers[this.hiddenLayers.length - 1];\r\n        }\r\n        this.outputLayer = new OutputLayer(\r\n            last,\r\n            this.Act(),\r\n            this.Err(),\r\n            ...outputNames\r\n        );\r\n    }\r\n\r\n    print(): string {\r\n        return this.hiddenLayers.map(\r\n            (n) => n.print()\r\n        ).join(\"\\n\") + \"\\n\" + this.outputLayer.print();\r\n    }\r\n\r\n    getInputLayer(): InputLayer { return this.inputLayer; }\r\n    getHiddenLayer(i: number): HiddenLayer { return this.hiddenLayers[i]; }\r\n    getOutputLayer(): OutputLayer { return this.outputLayer; }\r\n\r\n    getErr(): Differentiable { return this.outputLayer.getErr(); }\r\n    valueErr(): number { return this.outputLayer.valueErr(); }\r\n\r\n    avgErr(): number {\r\n        return this.studied.reduce(\r\n            (acc, study) => acc + study.err, 0\r\n        ) / this.studied.length;\r\n    }\r\n\r\n    bind(input: Input, output: Output | null = null) {\r\n        this.reset();\r\n        this.inputLayer.bind(input);\r\n        if (output) { this.outputLayer.bind(output); }\r\n    }\r\n    getOutput(input: Input): Output {\r\n        this.bind(input);\r\n        return this.outputLayer.values();\r\n    }\r\n\r\n    study(count: number) {\r\n        this.studied = this.source(count).map((sample) => {\r\n            this.bind(sample.input, sample.output);\r\n            const err = this.outputLayer.getErr();\r\n            this.hiddenLayers.forEach((layer) => layer.study(err));\r\n            this.outputLayer.study(err);\r\n            return { sample: sample, err: err.value() };\r\n        });\r\n    }\r\n    learn(sensitivity: number, friction: number) {\r\n        this.hiddenLayers.forEach(\r\n            (layer) => layer.learn(sensitivity, friction)\r\n        );\r\n        this.outputLayer.learn(sensitivity, friction);\r\n    }\r\n\r\n    reset() {\r\n        this.hiddenLayers.forEach((layer) => layer.reset());\r\n        this.outputLayer.reset();\r\n    }\r\n}\r\n\r\nabstract class TestableNetwork extends Network {\r\n    protected Err(): ErrorClass { return ErrorSquared; }\r\n\r\n    protected abstract tests(): Sample[];\r\n    rsq(): number {\r\n        const tests = this.tests();\r\n        return tests.reduce((acc, { input, output }) => {\r\n            this.bind(input, output);\r\n            return acc + this.valueErr();\r\n        }, 0) / tests.length;\r\n    }\r\n    r(): number {\r\n        return Math.sqrt(this.rsq());\r\n    }\r\n}\r\n\r\nexport { Network, TestableNetwork };\r\n","import * as Neuro from \"../neuro\";\r\n\r\nclass Network42 extends Neuro.TestableNetwork {\r\n    protected source(count: number) {\r\n        this.studied.sort((a, b) => b.err - a.err);\r\n        let arr = this.studied.slice(0, count / 2).map(\r\n            (study) => study.sample\r\n        );\r\n        for (let i = arr.length; i < count; ++i) {\r\n            arr.push({\r\n                input: new Map<string, number>([['x', Math.random()]]),\r\n                output: new Map<string, number>([['y', 42]])\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n    protected Act() { return Neuro.ActivationSoftplus; }\r\n    protected Err() { return Neuro.ErrorSquared; }\r\n    protected hiddenSizes() { return []; }\r\n\r\n    private cachedTests = [\r\n        {\r\n            input: new Map<string, number>([['x', 0]]),\r\n            output: new Map<string, number>([['y', 42]])\r\n        },\r\n        {\r\n            input: new Map<string, number>([['x', 1]]),\r\n            output: new Map<string, number>([['y', 42]])\r\n        }\r\n    ];\r\n    protected tests() { return this.cachedTests; }\r\n\r\n    // Convenience Methods\r\n\r\n    m(): number {\r\n        return this.getOutputLayer().getWeight('y', 0)!.value();\r\n    }\r\n    b(): number {\r\n        return this.getOutputLayer().getBias('y')!.value();\r\n    }\r\n\r\n    value(x: number): number {\r\n        return this.getOutput(new Map<string, number>([['x', x]])).get('y')!;\r\n    }\r\n}\r\n\r\nexport default Network42;\r\n","import React from \"react\";\r\nimport Asteria from \"../Asteria\";\r\nimport Network42 from \"./Network42\";\r\n\r\nconst m = 'm', b = 'b';\r\n\r\nclass Asteria42 extends Asteria {\r\n    private _net: Network42 | undefined = undefined;\r\n    protected net() {\r\n        if (!this._net) { this._net = new Network42(); }\r\n        return this._net!;\r\n    }\r\n\r\n    protected makeRowExtras() {\r\n        return new Map([\r\n            [m, this.net().m()],\r\n            [b, this.net().b()],\r\n        ]);\r\n    }\r\n\r\n    protected AboutContents() {\r\n        return (\r\n          <p>Asteria wants to learn the answer to life, the universe, and everything, but she needs your help!<br />\r\n          Asteria is the simplest possible neural network: a single input neuron linked to a single output neuron.<br />\r\n          The full equation for Asteria is y=ReLU(mx+b). Her initial state is y=ReLU(x), where m=1.<br />\r\n          Asteria will be trained to minimize R^2, the mean of (y-42)^2 over randomly-sampled values of x ranging from 0 to 1.</p>\r\n        )\r\n    }\r\n    protected TestingContents() {\r\n        return (\r\n          <p>Asteria should output 42 no matter what input we give her.</p>\r\n        )\r\n    }\r\n    protected TrainingContents() {\r\n        return (\r\n          <p>We want Asteria to reach y=42~ReLU(42), where m=0 and b~42.<br />\r\n            To adjust m and b, Asteria samples values of x between 0 to 1 and does fancy backpropagation.</p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Asteria42;\r\n","import * as Neuro from \"../neuro\";\r\n\r\nclass NetworkNAND extends Neuro.TestableNetwork {\r\n    protected source(count: number) {\r\n        this.studied.sort((a, b) => b.err - a.err);\r\n        const quarter = count / 4;\r\n        let arr = this.studied.slice(quarter, 2 * quarter).map(\r\n            (study) => study.sample\r\n        );\r\n        for (let i = arr.length; i < count; ++i) {\r\n            const x = Math.random();\r\n            const y = Math.random();\r\n            const xNANDy = (x > 0.5 && y > 0.5) ? 0 : 1;\r\n            arr.push({\r\n                input: new Map<string, number>([['x', x], ['y', y]]),\r\n                output: new Map<string, number>([[\"xNANDy\", xNANDy]])\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n    protected Act() { return Neuro.ActivationLogistic; }\r\n    protected Err() { return Neuro.ErrorSquared; }\r\n    protected hiddenSizes() { return [2]; }\r\n\r\n    private cachedTests = (() => {\r\n        let tests = [];\r\n        for (let x = 0; x <= 1; x += 0.1) {\r\n            for (let y = 0; y <= 1; y += 0.1) {\r\n                const xNANDy = (x > 0.5 && y > 0.5) ? 0 : 1;\r\n                tests.push({\r\n                    input: new Map<string, number>([['x', x], ['y', y]]),\r\n                    output: new Map<string, number>([[\"xNANDy\", xNANDy]])\r\n                });\r\n            }\r\n        }\r\n        return tests;\r\n    })();\r\n    protected tests() { return this.cachedTests; }\r\n\r\n    // Convenience Methods\r\n\r\n    value(x: number, y: number): number {\r\n        return this.getOutput(\r\n            new Map<string, number>([['x', x], ['y', y]])\r\n        ).get(\"xNANDy\")!;\r\n    }\r\n}\r\n\r\nexport default NetworkNAND;\r\n","import Asteria from \"../Asteria\";\r\nimport NetworkNAND from \"./NetworkNAND\";\r\n\r\nclass AsteriaNAND extends Asteria {\r\n    private _net: NetworkNAND | undefined = undefined;\r\n    protected net() {\r\n        if (!this._net) { this._net = new NetworkNAND(); }\r\n        return this._net!;\r\n    }\r\n}\r\n\r\nexport default AsteriaNAND;\r\n","import * as Neuro from \"../neuro\";\r\n\r\nclass NetworkXOR extends Neuro.TestableNetwork {\r\n    protected source(count: number) {\r\n      this.studied.sort((a, b) => b.err - a.err);\r\n      const quarter = count / 4;\r\n      let arr = this.studied.slice(quarter, 2 * quarter).map(\r\n          (study) => study.sample\r\n      );\r\n      for (let i = 0; i < count; ++i) {\r\n            const x = Math.random();\r\n            const y = Math.random();\r\n            const xXORy = ((x > 0.5) === (y > 0.5)) ? 0 : 1;\r\n            arr.push({\r\n                input: new Map<string, number>([['x', x], ['y', y]]),\r\n                output: new Map<string, number>([[\"xXORy\", xXORy]])\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n    protected Act() { return Neuro.ActivationLogistic; }\r\n    protected Err() { return Neuro.ErrorSquared; }\r\n    protected hiddenSizes() { return [2, 4, 4]; }\r\n\r\n    private cachedTests = (() => {\r\n        let tests = [];\r\n        for (let x = 0; x <= 1; x += 0.1) {\r\n            for (let y = 0; y <= 1; y += 0.1) {\r\n              const xXORy = ((x > 0.5) === (y > 0.5)) ? 0 : 1;\r\n                tests.push({\r\n                    input: new Map<string, number>([['x', x], ['y', y]]),\r\n                    output: new Map<string, number>([[\"xXORy\", xXORy]])\r\n                });\r\n            }\r\n        }\r\n        return tests;\r\n    })();\r\n    protected tests() { return this.cachedTests; }\r\n\r\n    // Convenience Methods\r\n\r\n    value(x: number, y: number): number {\r\n        return this.getOutput(\r\n            new Map<string, number>([['x', x], ['y', y]])\r\n        ).get(\"xXORy\")!;\r\n    }\r\n}\r\n\r\nexport default NetworkXOR;\r\n","import Asteria from \"../Asteria\";\r\nimport NetworkXOR from \"./NetworkXOR\";\r\n\r\nclass AsteriaXOR extends Asteria {\r\n    private _net: NetworkXOR | undefined = undefined;\r\n    protected net() {\r\n        if (!this._net) { this._net = new NetworkXOR(); }\r\n        return this._net!;\r\n    }\r\n}\r\n\r\nexport default AsteriaXOR;\r\n","import React from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\nimport Asteria42 from \"./asteria42/Asteria42\";\r\nimport AsteriaNAND from \"./asteriaNAND/AsteriaNAND\";\r\nimport AsteriaXOR from \"./asteriaXOR/AsteriaXOR\";\r\n\r\nfunction App() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <nav>\r\n            [<Link to=\"/Asteria/42\">42</Link>]\r\n            [<Link to=\"/Asteria/NAND\">NAND</Link>]\r\n            [<Link to=\"/Asteria/XOR\">XOR</Link>]\r\n\t\t\t\t\t</nav>\r\n\t\t\t\t</div>\r\n        <Switch>\r\n          <Route path=\"/Asteria/42\">\r\n            <Asteria42 />\r\n          </Route>\r\n          <Route path=\"/Asteria/NAND\">\r\n            <AsteriaNAND />\r\n          </Route>\r\n          <Route path=\"/Asteria/XOR\">\r\n            <AsteriaXOR />\r\n          </Route>\r\n        </Switch>\r\n\t\t\t</Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}