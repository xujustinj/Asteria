{"version":3,"sources":["Table.tsx","Form.tsx","diffable/expression.ts","diffable/variable.ts","diffable/operations.ts","neuro/activation.ts","neuro/error.ts","neuro/parameters.ts","neuro/neurons.ts","App.tsx","index.tsx"],"names":["TableHeader","TableBody","props","data","map","row","index","m","b","r","key","isFinite","reverse","Table","Form","state","handleSubmit","handleChange","event","target","name","value","setState","submitForm","samples","sensitivity","generations","this","type","min","onChange","onClick","Component","Expression","_value","NaN","_deriv","Map","valueImpl","v","has","set","derivImpl","get","clear","ExprUnary","arg","ExprBinary","left","right","ExprVariadic","terms","Variable","val","BinProduct","deriv","print","VarSum","reduce","acc","t","join","ActivationSoftplus","x","y","Math","exp","log","df","ErrorSquared","diff","Parameter","adjustments","error","push","studyImpl","length","adjustment","learnImpl","Weight","n","w","count","bind","reset","Bias","Neuron","InputNeuron","OutputNeuron","Activation","Error","neurons","err","getErr","weights","bias","sum","p","c","forEach","study","learn","App","in","out","i","train","Neuro","input","rsq","random","valueErr","sqrt","output","className","readOnly","ReactDOM","render","document","getElementById"],"mappings":"4NAQA,SAASA,IACL,OACI,+BACI,4BACI,iCACA,iCACA,iCACA,mCAMhB,SAASC,EAAUC,GACf,OACI,+BAAQA,EAAMC,KAAKC,KAAI,SAACC,EAAeC,GAAmB,IAC9CC,EAAYF,EAAZE,EAAGC,EAASH,EAATG,EAAGC,EAAMJ,EAANI,EACd,OACI,wBAAIC,IAAKJ,GACL,4BAAKA,GACL,4BAAKK,SAASJ,GAAKA,EAAI,IACvB,4BAAKI,SAASH,GAAKA,EAAI,IACvB,4BAAKG,SAASF,GAAKA,EAAI,QAGhCG,WAcIC,MAVf,SAAeX,GAA8B,IACjCC,EAASD,EAATC,KACR,OACI,+BACI,kBAACH,EAAD,MACA,kBAACC,EAAD,CAAWE,KAAMA,MCsBdW,E,YAhDX,WAAYZ,GAAmB,IAAD,8BAC1B,4CAAMA,KAJVa,WAG8B,IAF9BC,kBAE8B,IAM9BC,aAAe,SAACC,GAAoD,IAAD,EACvCA,EAAMC,OAAtBC,EADuD,EACvDA,KAAMC,EADiD,EACjDA,MACd,EAAKC,SAAL,eAAiBF,EAAOC,KARE,EAW9BE,WAAa,WACR,EAAKrB,MAAcc,aAAa,EAAKD,QAVtC,EAAKA,MAAQ,CAAES,QAAS,EAAGC,YAAa,EAAGC,YAAa,GACxD,EAAKV,aAAgBd,EAAcc,aAHT,E,sEAepB,IAAD,EACyCW,KAAKZ,MAA3CS,EADH,EACGA,QAASC,EADZ,EACYA,YAAaC,EADzB,EACyBA,YAC9B,OACI,8BACI,0CACA,2BACIE,KAAK,SACLR,KAAK,UACLC,MAAOV,SAASa,GAAWA,EAAU,GACrCK,IAAI,IACJC,SAAUH,KAAKV,eACnB,6BACA,8CACA,2BACIW,KAAK,SACLR,KAAK,cACLC,MAAOV,SAASc,GAAeA,EAAc,GAC7CK,SAAUH,KAAKV,eACnB,6BACA,8CACA,2BACIW,KAAK,SACLR,KAAK,cACLC,MAAOV,SAASe,GAAeA,EAAc,GAC7CG,IAAI,IACJC,SAAUH,KAAKV,eACnB,6BACA,2BAAOW,KAAK,SAASP,MAAM,QAAQU,QAASJ,KAAKJ,kB,GA9C9CS,aCTJC,E,iDACHC,OAAiBC,I,KASjBC,OAAS,IAAIC,I,oDAJjB,OAHK1B,SAASgB,KAAKO,UACfP,KAAKO,OAASP,KAAKW,aAEhBX,KAAKO,S,4BAKVK,GAIF,OAHKZ,KAAKS,OAAOI,IAAID,IACjBZ,KAAKS,OAAOK,IAAIF,EAAGZ,KAAKe,UAAUH,IAE/BZ,KAAKS,OAAOO,IAAIJ,K,8BAOvBZ,KAAKO,OAASC,IACdR,KAAKS,OAAOQ,Y,KAILC,E,YAGX,WAAYC,GAAsB,IAAD,8BAC7B,+CAHMA,SAEuB,EAE7B,EAAKA,IAAMA,EAFkB,E,2BAHJb,GASlBc,E,YAIX,WAAYC,EAAsBC,GAAwB,IAAD,8BACrD,+CAJMD,UAG+C,IAF/CC,WAE+C,EAErD,EAAKD,KAAOA,EACZ,EAAKC,MAAQA,EAHwC,E,2BAJ3BhB,GAWnBiB,E,YAGX,aAAyC,IAAD,uBACpC,+CAHMC,WAE8B,6BAAzBA,EAAyB,yBAAzBA,EAAyB,uBAEpC,EAAKA,MAAQA,EAFuB,E,2BAHRlB,GC/BrBmB,E,WAbX,WAAYhC,GAAgC,IAAlBiC,EAAiB,uDAAH,EAAG,yBAHnCjC,UAGmC,OAFnCiC,SAEmC,EACvC1B,KAAKP,KAAOA,EACZO,KAAK0B,IAAMA,E,iDAGVA,GAAe1B,KAAK0B,IAAMA,I,8BAEb,OAAO1B,KAAK0B,M,4BACxBd,GAAuB,OAAQA,IAAMZ,KAAQ,EAAI,I,8BAErC,OAAOA,KAAKP,S,KCb5BkC,E,oLAEE,OAAO3B,KAAKqB,KAAK3B,QAAUM,KAAKsB,MAAM5B,U,gCAGtBkB,GAGhB,OAFYZ,KAAKqB,KAAKO,MAAMhB,GAAKZ,KAAKsB,MAAM5B,QAChCM,KAAKqB,KAAK3B,QAAUM,KAAKsB,MAAMM,MAAMhB,K,8BAKjD,OAAOZ,KAAKqB,KAAKQ,QAAU,MAAQ7B,KAAKsB,MAAMO,Y,GAZ7BT,GAgBnBU,E,oLAEE,OAAO9B,KAAKwB,MAAMO,QAAO,SAACC,EAAKC,GAAN,OAAYD,EAAMC,EAAEvC,UAAS,K,gCAGtCkB,GAChB,OAAOZ,KAAKwB,MAAMO,QAAO,SAACC,EAAKC,GAAN,OAAYD,EAAMC,EAAEL,MAAMhB,KAAI,K,8BAIvD,MAAO,IAAMZ,KAAKwB,MAAM/C,KAAI,SAACwD,GAAD,OAAOA,EAAEJ,WAASK,KAAK,OAAS,Q,GAV/CX,GCCfY,E,oLAEE,IAAIC,EAAIpC,KAAKmB,IAAIzB,QACb2C,EAAI,EAAIC,KAAKC,IAAIH,GACrB,OAAOpD,SAASqD,GAAKC,KAAKE,IAAIH,GAAKD,I,gCAGnBxB,GAChB,IAAIwB,EAAIpC,KAAKmB,IAAIzB,QACb+C,EAAK,GAAK,EAAIH,KAAKC,KAAKH,IAE5B,OADAK,EAAKzD,SAASyD,GAAMA,EAAK,GACbzC,KAAKmB,IAAIS,MAAMhB,K,8BAI3B,MAAO,QAAUZ,KAAKmB,IAAIU,QAAU,Q,GAfXX,GClB3BwB,E,oLAEE,IAAIC,EAAO3C,KAAKqB,KAAK3B,QAAUM,KAAKsB,MAAM5B,QAC1C,OAAOiD,EAAOA,I,gCAGE/B,GAEhB,OAAO,GADIZ,KAAKqB,KAAK3B,QAAUM,KAAKsB,MAAM5B,UACvBM,KAAKqB,KAAKO,MAAMhB,GAAKZ,KAAKsB,MAAMM,MAAMhB,M,8BAIzD,MAAO,IAAMZ,KAAKqB,KAAKQ,QAAU,MAAQ7B,KAAKsB,MAAM5B,QAAU,U,GAZ3C0B,GCEZwB,E,WAGX,aAAe,yBAFPC,iBAEM,EACV7C,KAAK6C,YAAc,G,kDAOjBC,GACF9C,KAAK6C,YAAYE,MAAM/C,KAAKgD,UAAUF,M,4BAIpChD,GACF,GAAIE,KAAK6C,YAAYI,OAAS,EAAG,CAC7B,IAAMC,EAAalD,KAAK6C,YAAYd,QAChC,SAACC,EAAKC,GAAN,OAAYD,EAAMC,IAAG,GACrBnC,EAAcE,KAAK6C,YAAYI,OACnCjD,KAAKmD,UAAUD,GACflD,KAAK6C,YAAc,Q,KAMzBO,E,YAMF,WAAYC,GAAY,IAAD,8BACnB,+CAJIC,OAGe,IAFfrB,OAEe,EAEnB,EAAKqB,EAAI,IAAI7B,EAAS,IAAM2B,EAAOG,MAAO,GAC1C,EAAKtB,EAAI,IAAIN,EAAW,EAAK2B,EAAGD,EAAErC,SAChCoC,EAAOG,MAJU,E,qEAOL,OAAOvD,KAAKsD,EAAE5D,U,4BACR,OAAOM,KAAKiC,I,8BAClB,OAAOjC,KAAKsD,EAAEzB,U,gCAEZiB,GAChB,OAAOA,EAAMlB,MAAM5B,KAAKsD,K,gCAERJ,GAChBlD,KAAKsD,EAAEE,KAAKxD,KAAKN,QAAUwD,K,8BAI3BlD,KAAKiC,EAAEwB,Y,GAzBMb,GAAfQ,EACaG,MAAgB,E,IA4B7BG,E,YAKF,aAAe,IAAD,8BACV,+CAHI7E,OAEM,EAEV,EAAKA,EAAI,IAAI4C,EAAS,IAAMiC,EAAKH,MAAO,KACtCG,EAAKH,MAHG,E,qEAMI,OAAOvD,KAAKnB,EAAEa,U,4BACR,OAAOM,KAAKnB,I,8BAClB,OAAOmB,KAAKnB,EAAEgD,U,gCAEZiB,GAChB,OAAOA,EAAMlB,MAAM5B,KAAKnB,K,gCAERqE,GAChBlD,KAAKnB,EAAE2E,KAAKxD,KAAKN,QAAUwD,O,GAnBhBN,GAAbc,EACKH,MAAgB,E,4BC9CZI,E,gGACO,OAAO3D,KAAKgB,MAAMtB,U,8BAElB,OAAOM,KAAKgB,MAAMa,Y,KAGlC+B,E,YAGF,WAAYnE,GAAe,IAAD,8BACtB,+CAHI2C,OAEkB,EAEtB,EAAKA,EAAI,IAAIX,EAAShC,GAFA,E,mEAKF,OAAOO,KAAKoC,I,2BAE/BV,GAAe1B,KAAKoC,EAAEoB,KAAK9B,O,GAVViC,GA+CpBE,E,YAIF,WACIpE,EAAcqE,EAA4BC,GAC3C,IAAD,mDADuEC,EACvE,iCADuEA,EACvE,yBACE,yDAAMF,GAAN,OAAqBE,MANjB3B,OAKN,IAJM4B,SAIN,EAEE,EAAK5B,EAAI,IAAIZ,EAAShC,GACtB,EAAKwE,IAAM,IAAIF,EAAM,EAAK/C,MAAO,EAAKqB,GAHxC,E,kEAMGX,GAAe1B,KAAKqC,EAAEmB,KAAK9B,K,iCAEX,OAAO1B,KAAKkE,SAASxE,U,+BACnB,OAAOM,KAAKiE,M,iCACd,OAAOjE,KAAKkE,SAASrC,U,8BAGtC,8DACA7B,KAAKkE,SAAST,Y,eAhDlB,WAAYK,GAAmD,IAAD,uBAC1D,+CANJK,aAK8D,IAJ9DC,UAI8D,IAHtDC,SAGsD,IAFtD9B,SAEsD,6BAAnByB,EAAmB,iCAAnBA,EAAmB,kBAE1D,EAAKG,QAAUH,EAAQvF,KAAI,SAAC6F,GAAD,OAAO,IAAIlB,EAAOkB,MAC7C,EAAKF,KAAO,IAAIV,EAEhB,IAAMlC,EAAQ,EAAK2C,QAAQ1F,KAAI,SAAC8F,GAAD,OAAOA,EAAEvD,SALkB,OAM1D,EAAKqD,IAAL,YAAevC,EAAf,YAAyBN,GAAzB,QAAgC,EAAK4C,KAAKpD,SAC1C,EAAKuB,IAAM,IAAIuB,EAAW,EAAKO,KAP2B,E,mEAUtC,OAAOrE,KAAKuC,M,4BAE9BO,GACF9C,KAAKmE,QAAQK,SAAQ,SAAClB,GAAD,OAAOA,EAAEmB,MAAM3B,MACpC9C,KAAKoE,KAAKK,MAAM3B,K,4BAEdhD,GACFE,KAAKmE,QAAQK,SAAQ,SAAClB,GAAD,OAAOA,EAAEoB,MAAM5E,MACpCE,KAAKoE,KAAKM,MAAM5E,K,8BAIhBE,KAAKuC,IAAIkB,QACTzD,KAAKqE,IAAIZ,QACTzD,KAAKmE,QAAQK,SAAQ,SAAClB,GAAD,OAAOA,EAAEG,e,GA9BRE,IC2EfgB,E,YAnGX,WAAYpG,GAAY,IAAD,8BACnB,4CAAMA,KANVqG,QAKuB,IAJvBC,SAIuB,IAFvBzF,WAEuB,IAqCvBE,aAAe,SAACC,GAAmD,IAAD,EACtCA,EAAMC,OAAtBC,EADsD,EACtDA,KAAMC,EADgD,EAChDA,MACd,EAAKC,SAAL,eAAiBF,EAAOC,KAvCL,EA0CvBL,aAAe,SAACD,GACZ,IAAK,IAAI0F,EAAY,EAAGA,EAAI1F,EAAMW,cAAe+E,EAC7C,EAAKC,MAAM3F,EAAMS,QAAST,EAAMU,cAzCpC,EAAK8E,GAAK,IAAII,EAAkB,KAChC,EAAKH,IAAM,IAAIG,EACX,IACAA,EACAA,EACA,EAAKJ,IAET,EAAKC,IAAIrB,KAAK,IAEd,EAAKpE,MAAQ,CAAEZ,KAAM,CAAC,CAAEI,EAAG,EAAGC,EAAG,EAAGC,EAAG0B,MAAQyE,MAAO,GAZnC,E,mEAejBpF,EAAiBC,GACnB,GAAKd,SAASa,IACTb,SAASc,MACVD,GAAW,GAAf,CAGA,IADA,IAAIqF,EAAM,EACDJ,EAAI,EAAGA,EAAIjF,IAAWiF,EAC3B9E,KAAK6E,IAAIpB,QACTzD,KAAK4E,GAAGpB,KAAKlB,KAAK6C,UAClBnF,KAAK6E,IAAIJ,MAAMzE,KAAK6E,IAAIX,UACxBgB,GAAOlF,KAAK6E,IAAIO,WAEpBpF,KAAK6E,IAAIH,MAAM5E,GAZyB,IAclCtB,EAASwB,KAAKZ,MAAdZ,KACAI,EAAIoB,KAAK6E,IAAIV,QAAQ,GAAGzE,QACxBb,EAAImB,KAAK6E,IAAIT,KAAK1E,QACxBlB,EAAKA,EAAKyE,OAAS,GAAGnE,EAAIwD,KAAK+C,KAAKH,EAAMrF,GAC1CrB,EAAKuE,KAAK,CAAEnE,EAAGA,EAAGC,EAAGA,EAAGC,EAAG0B,MAC3BR,KAAKL,SAAS,CAAEnB,KAAMA,O,+BAchB,IAAD,EACmBwB,KAAKZ,MAArBZ,EADH,EACGA,KAAMyG,EADT,EACSA,MAEVK,EAAiB9E,IAOrB,OANIxB,SAASiG,KACTjF,KAAK6E,IAAIpB,QACTzD,KAAK4E,GAAGpB,KAAKyB,GACbK,EAAStF,KAAK6E,IAAInF,SAIlB,yBAAK6F,UAAU,OACX,4BAAQA,UAAU,cACd,uCACA,iIAGJ,qCACA,sIAA2G,6BAA3G,0HACuH,6BADvH,oGAEiG,6BAFjG,wHAKA,uCACA,oIACA,wCACA,2BACItF,KAAK,SACLR,KAAK,QACLC,MAAOuF,EACP9E,SAAUH,KAAKV,eACnB,6BACA,yCACA,2BAAOkG,UAAQ,EACXvF,KAAK,OACLR,KAAK,SACLC,MAAO4F,IAEX,wCACA,wGAA6E,6BAA7E,uIACoI,6BADpI,mGAEgG,6BAFhG,2FAGwF,6BAHxF,wIAKA,kBAAC,EAAD,CAAMjG,aAAcW,KAAKX,eACzB,kBAAC,EAAD,CAAOb,KAAMA,S,GAnGX6B,aCDlBoF,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.29bc4eb6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport type TableRow = {\r\n    m: number;\r\n    b: number;\r\n    r: number;\r\n};\r\n\r\nfunction TableHeader(): JSX.Element {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>G</th>\r\n                <th>m</th>\r\n                <th>b</th>\r\n                <th>R</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nfunction TableBody(props: { data: TableRow[] }): JSX.Element {\r\n    return (\r\n        <tbody>{props.data.map((row: TableRow, index: number) => {\r\n            const { m, b, r } = row;\r\n            return (\r\n                <tr key={index}>\r\n                    <td>{index}</td>\r\n                    <td>{isFinite(m) ? m : \"\"}</td>\r\n                    <td>{isFinite(b) ? b : \"\"}</td>\r\n                    <td>{isFinite(r) ? r : \"\"}</td>\r\n                </tr>\r\n            )\r\n        }).reverse()}</tbody>\r\n    );\r\n}\r\n\r\nfunction Table(props: { data: TableRow[] }) {\r\n    const { data } = props;\r\n    return (\r\n        <table>\r\n            <TableHeader />\r\n            <TableBody data={data} />\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\n\r\nexport type FormState = {\r\n    samples: number;\r\n    sensitivity: number;\r\n    generations: number;\r\n};\r\n\r\nexport type FormProps = {\r\n    handleSubmit: (state: FormState) => void;\r\n};\r\n\r\nclass Form extends Component<FormProps> {\r\n    state: FormState;\r\n    handleSubmit: (state: FormState) => void;\r\n\r\n    constructor(props: FormProps) {\r\n        super(props);\r\n        this.state = { samples: 1, sensitivity: 1, generations: 1 };\r\n        this.handleSubmit = (props as any).handleSubmit;\r\n    }\r\n\r\n    handleChange = (event: { target: { name: any; value: any; }; }) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    submitForm = () => {\r\n        (this.props as any).handleSubmit(this.state)\r\n    }\r\n\r\n    render() {\r\n        const { samples, sensitivity, generations } = this.state;\r\n        return (\r\n            <form>\r\n                <label>Samples</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"samples\"\r\n                    value={isFinite(samples) ? samples : \"\"}\r\n                    min=\"1\"\r\n                    onChange={this.handleChange} />\r\n                <br />\r\n                <label>Sensitivity</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"sensitivity\"\r\n                    value={isFinite(sensitivity) ? sensitivity : \"\"}\r\n                    onChange={this.handleChange} />\r\n                <br />\r\n                <label>Generations</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"generations\"\r\n                    value={isFinite(generations) ? generations : \"\"}\r\n                    min=\"0\"\r\n                    onChange={this.handleChange} />\r\n                <br />\r\n                <input type=\"button\" value=\"Train\" onClick={this.submitForm} />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n","import Differentiable from \"./differentiable\";\r\nimport Variable from \"./variable\";\r\n\r\nabstract class Expression implements Differentiable {\r\n    private _value: number = NaN;\r\n    value(): number {\r\n        if (!isFinite(this._value)) {\r\n            this._value = this.valueImpl();\r\n        }\r\n        return this._value;\r\n    }\r\n    protected abstract valueImpl(): number;\r\n\r\n    private _deriv = new Map<Variable, number>();\r\n    deriv(v: Variable): number {\r\n        if (!this._deriv.has(v)) {\r\n            this._deriv.set(v, this.derivImpl(v));\r\n        }\r\n        return this._deriv.get(v) as number;\r\n    }\r\n    protected abstract derivImpl(_v: Variable): number;\r\n\r\n    abstract print(): string;\r\n\r\n    reset() {\r\n        this._value = NaN;\r\n        this._deriv.clear();\r\n    }\r\n}\r\n\r\nabstract class ExprUnary extends Expression {\r\n    protected arg: Differentiable;\r\n\r\n    constructor(arg: Differentiable) {\r\n        super();\r\n        this.arg = arg;\r\n    }\r\n}\r\n\r\nabstract class ExprBinary extends Expression {\r\n    protected left: Differentiable;\r\n    protected right: Differentiable;\r\n\r\n    constructor(left: Differentiable, right: Differentiable) {\r\n        super();\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\n\r\nabstract class ExprVariadic extends Expression {\r\n    protected terms: Differentiable[];\r\n\r\n    constructor(...terms: Differentiable[]) {\r\n        super();\r\n        this.terms = terms;\r\n    }\r\n}\r\n\r\nexport default Expression;\r\nexport { ExprUnary, ExprBinary, ExprVariadic };\r\n","import Differentiable from \"./differentiable\";\r\n\r\nclass Variable implements Differentiable {\r\n    private name: string;\r\n    private val: number;\r\n\r\n    constructor(name: string, val: number = 0) {\r\n        this.name = name;\r\n        this.val = val;\r\n    }\r\n\r\n    bind(val: number) { this.val = val; }\r\n\r\n    value(): number { return this.val; }\r\n    deriv(v: Variable): number { return (v === this) ? 1 : 0; }\r\n\r\n    print(): string { return this.name; }\r\n}\r\n\r\nexport default Variable;\r\n","import { ExprBinary, ExprVariadic } from \"./expression\";\r\nimport Variable from \"./variable\";\r\n\r\nclass BinProduct extends ExprBinary {\r\n    protected valueImpl(): number {\r\n        return this.left.value() * this.right.value();\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        const dlr = this.left.deriv(v) * this.right.value();\r\n        const ldr = this.left.value() * this.right.deriv(v);\r\n        return dlr + ldr;\r\n    }\r\n\r\n    print(): string {\r\n        return this.left.print() + \" * \" + this.right.print();\r\n    }\r\n}\r\n\r\nclass VarSum extends ExprVariadic {\r\n    protected valueImpl(): number {\r\n        return this.terms.reduce((acc, t) => acc + t.value(), 0);\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        return this.terms.reduce((acc, t) => acc + t.deriv(v), 0);\r\n    }\r\n\r\n    print(): string {\r\n        return \"(\" + this.terms.map((t) => t.print()).join(\" + \") + \")\";\r\n    }\r\n}\r\n\r\nexport { BinProduct, VarSum };\r\n","import { ExprUnary, Variable } from \"../diffable/diffable\";\r\n\r\nclass ActivationLogistic extends ExprUnary {\r\n    protected valueImpl(): number {\r\n        let x = this.arg.value();\r\n        let y = 1 / (1 + Math.exp(-x));\r\n        return isFinite(y) ? y : ((x < 0) ? 0 : 1);\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        let val = this.arg.value();\r\n        let d = this.arg.deriv(v) / (Math.exp(val) + 2 + Math.exp(-val));\r\n        return isFinite(d) ? d : 0;\r\n    }\r\n\r\n    print(): string {\r\n        return \"σ(\" + this.arg.print() + \")\";\r\n    }\r\n}\r\n\r\nclass ActivationSoftplus extends ExprUnary {\r\n    protected valueImpl(): number {\r\n        let x = this.arg.value();\r\n        let y = 1 + Math.exp(x);\r\n        return isFinite(y) ? Math.log(y) : x;\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        let x = this.arg.value();\r\n        let df = 1 / (1 + Math.exp(-x));\r\n        df = isFinite(df) ? df : 0;\r\n        return df * this.arg.deriv(v);\r\n    }\r\n\r\n    print(): string {\r\n        return \"ReLU(\" + this.arg.print() + \")\";\r\n    }\r\n}\r\n\r\nexport { ActivationLogistic, ActivationSoftplus };\r\n","import { ExprBinary, Variable } from \"../diffable/diffable\";\r\n\r\nclass ErrorSquared extends ExprBinary {\r\n    protected valueImpl(): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        return diff * diff;\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        return 2 * diff * (this.left.deriv(v) - this.right.deriv(v));\r\n    }\r\n\r\n    print(): string {\r\n        return \"(\" + this.left.print() + \" - \" + this.right.value() + \")^2\";\r\n    }\r\n}\r\n\r\nexport { ErrorSquared };\r\n","import { Differentiable, Variable, BinProduct } from \"../diffable/diffable\";\r\nimport Trainable from \"./trainable\";\r\nimport Neuron from \"./neurons\";\r\n\r\nabstract class Parameter implements Trainable {\r\n    private adjustments: number[];\r\n\r\n    constructor() {\r\n        this.adjustments = [];\r\n    }\r\n\r\n    abstract value(): number;\r\n    abstract get(): Differentiable;\r\n    abstract print(): string;\r\n\r\n    study(error: Differentiable) {\r\n        this.adjustments.push(-this.studyImpl(error));\r\n    }\r\n    protected abstract studyImpl(error: Differentiable): number;\r\n\r\n    learn(sensitivity: number) {\r\n        if (this.adjustments.length > 0) {\r\n            const adjustment = this.adjustments.reduce(\r\n                (acc, t) => acc + t, 0\r\n            ) * sensitivity / this.adjustments.length;\r\n            this.learnImpl(adjustment);\r\n            this.adjustments = [];\r\n        }\r\n    }\r\n    protected abstract learnImpl(adjustment: number): void;\r\n}\r\n\r\nclass Weight extends Parameter {\r\n    private static count: number = 0;\r\n\r\n    private w: Variable;\r\n    private t: BinProduct;\r\n\r\n    constructor(n: Neuron) {\r\n        super();\r\n        this.w = new Variable(\"w\" + Weight.count, 1);\r\n        this.t = new BinProduct(this.w, n.get());\r\n        ++Weight.count;\r\n    }\r\n\r\n    value(): number { return this.w.value(); }\r\n    get(): Differentiable { return this.t; }\r\n    print(): string { return this.w.print(); }\r\n\r\n    protected studyImpl(error: Differentiable): number {\r\n        return error.deriv(this.w);\r\n    }\r\n    protected learnImpl(adjustment: number) {\r\n        this.w.bind(this.value() + adjustment);\r\n    }\r\n\r\n    reset() {\r\n        this.t.reset();\r\n    }\r\n}\r\n\r\nclass Bias extends Parameter {\r\n    static count: number = 0;\r\n\r\n    private b: Variable;\r\n\r\n    constructor() {\r\n        super();\r\n        this.b = new Variable(\"b\" + Bias.count, 0);\r\n        ++Bias.count;\r\n    }\r\n\r\n    value(): number { return this.b.value(); }\r\n    get(): Differentiable { return this.b; }\r\n    print(): string { return this.b.print(); }\r\n\r\n    protected studyImpl(error: Differentiable): number {\r\n        return error.deriv(this.b);\r\n    }\r\n    protected learnImpl(adjustment: number) {\r\n        this.b.bind(this.value() + adjustment);\r\n    }\r\n}\r\n\r\nexport { Weight, Bias };\r\n","import {\r\n    Differentiable,\r\n    ExprUnary, ExprBinary,\r\n    Variable,\r\n    VarSum\r\n} from \"../diffable/diffable\";\r\nimport Trainable from \"./trainable\";\r\nimport { Weight, Bias } from \"./parameters\";\r\n\r\ninterface ExprUnaryClass {\r\n    new (arg: Differentiable): ExprUnary;\r\n}\r\ninterface ExprBinaryClass {\r\n    new (left: Differentiable, right: Differentiable): ExprBinary;\r\n}\r\n\r\nabstract class Neuron {\r\n    value(): number { return this.get().value(); }\r\n    abstract get(): Differentiable;\r\n    print(): string { return this.get().print(); }\r\n}\r\n\r\nclass InputNeuron extends Neuron {\r\n    private x: Variable;\r\n\r\n    constructor(name: string) {\r\n        super();\r\n        this.x = new Variable(name);\r\n    }\r\n\r\n    get(): Differentiable { return this.x; }\r\n\r\n    bind(val: number) { this.x.bind(val); }\r\n}\r\n\r\nclass TrainableNeuron extends Neuron implements Trainable {\r\n    weights: Weight[];\r\n    bias: Bias;\r\n    private sum: VarSum;\r\n    private exp: ExprUnary;\r\n\r\n    constructor(Activation: ExprUnaryClass, ...neurons: Neuron[]) {\r\n        super();\r\n        this.weights = neurons.map((p) => new Weight(p));\r\n        this.bias = new Bias();\r\n\r\n        const terms = this.weights.map((c) => c.get());\r\n        this.sum = new VarSum(...terms, this.bias.get());\r\n        this.exp = new Activation(this.sum);\r\n    }\r\n\r\n    get(): Differentiable { return this.exp; }\r\n\r\n    study(error: Differentiable) {\r\n        this.weights.forEach((w) => w.study(error));\r\n        this.bias.study(error);\r\n    }\r\n    learn(sensitivity: number) {\r\n        this.weights.forEach((w) => w.learn(sensitivity));\r\n        this.bias.learn(sensitivity);\r\n    }\r\n\r\n    reset() {\r\n        this.exp.reset();\r\n        this.sum.reset();\r\n        this.weights.forEach((w) => w.reset());\r\n    }\r\n}\r\n\r\nclass OutputNeuron extends TrainableNeuron {\r\n    private y: Variable;\r\n    private err: ExprBinary;\r\n\r\n    constructor(\r\n        name: string, Activation: ExprUnaryClass, Error: ExprBinaryClass, ...neurons: Neuron[]\r\n    ) {\r\n        super(Activation, ...neurons);\r\n        this.y = new Variable(name);\r\n        this.err = new Error(this.get(), this.y);\r\n    }\r\n\r\n    bind(val: number) { this.y.bind(val); }\r\n\r\n    valueErr(): number { return this.getErr().value(); }\r\n    getErr(): ExprBinary { return this.err; }\r\n    printErr(): string { return this.getErr().print(); }\r\n\r\n    reset() {\r\n        super.reset();\r\n        this.getErr().reset();\r\n    }\r\n}\r\n\r\nexport default Neuron;\r\nexport { InputNeuron, TrainableNeuron, OutputNeuron };\r\n","import React, { Component } from \"react\";\r\nimport Table, { TableRow } from \"./Table\";\r\nimport Form, { FormState } from \"./Form\";\r\nimport * as Neuro from \"./neuro/neuro\";\r\n\r\nclass App extends Component<{}> {\r\n    in: Neuro.InputNeuron;\r\n    out: Neuro.OutputNeuron;\r\n\r\n    state: { data: TableRow[]; input: number };\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.in = new Neuro.InputNeuron('x');\r\n        this.out = new Neuro.OutputNeuron(\r\n            'y',\r\n            Neuro.ActivationSoftplus,\r\n            Neuro.ErrorSquared,\r\n            this.in\r\n        );\r\n        this.out.bind(42);\r\n\r\n        this.state = { data: [{ m: 1, b: 0, r: NaN }], input: 0 };\r\n    }\r\n\r\n    train(samples: number, sensitivity: number) {\r\n        if (!isFinite(samples)) { return; }\r\n        if (!isFinite(sensitivity)) { return; }\r\n        if (samples <= 0) { return; }\r\n\r\n        let rsq = 0;\r\n        for (let i = 0; i < samples; ++i) {\r\n            this.out.reset();\r\n            this.in.bind(Math.random());\r\n            this.out.study(this.out.getErr());\r\n            rsq += this.out.valueErr();\r\n        }\r\n        this.out.learn(sensitivity);\r\n\r\n        let { data } = this.state;\r\n        const m = this.out.weights[0].value();\r\n        const b = this.out.bias.value();\r\n        data[data.length - 1].r = Math.sqrt(rsq / samples);\r\n        data.push({ m: m, b: b, r: NaN });\r\n        this.setState({ data: data });\r\n    }\r\n\r\n    handleChange = (event: { target: { name: any; value: any }; }) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmit = (state: FormState) => {\r\n        for (let i: number = 0; i < state.generations; ++i) {\r\n            this.train(state.samples, state.sensitivity);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { data, input } = this.state;\r\n\r\n        let output: number = NaN;\r\n        if (isFinite(input)) {\r\n            this.out.reset();\r\n            this.in.bind(input);\r\n            output = this.out.value();\r\n        }\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h1>Asteria</h1>\r\n                    <p>Asteria wants to learn the answer to life, the universe, and everything, but she needs your help!</p>\r\n                </header>\r\n\r\n                <h2>About</h2>\r\n                <p>Asteria is the simplest possible neural network: a single input neuron linked to a single output neuron.<br />\r\n                She has no hidden layers, so Asteria is really just a linear relation passed through an activation function (softplus).<br />\r\n                The full equation for Asteria is y=ReLU(mx+b). Her initial state is y=ReLU(x), where m=1 and b=0.<br />\r\n                Asteria will be trained to minimize R^2, the mean of (y-42)^2 over randomly-sampled values of x ranging from 0 to 1.</p>\r\n\r\n                <h2>Testing</h2>\r\n                <p>If she has learned well, Asteria should output 42 no matter what input we give her. Test it out here!</p>\r\n                <label>Input</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"input\"\r\n                    value={input}\r\n                    onChange={this.handleChange} />\r\n                <br />\r\n                <label>Output</label>\r\n                <input readOnly\r\n                    type=\"text\"\r\n                    name=\"output\"\r\n                    value={output} />\r\n\r\n                <h2>Training</h2>\r\n                <p>We want Asteria to ultimately settle on y=42~RELU(42), where m=0 and b=42.<br />\r\n                To determine how to adjust m and b, Asteria samples values of x between 0 to 1 (you decide how many) and does fancy backpropogation.<br />\r\n                Sensitivity determines the strength of the adjustments to m and b in each generation of Asteria.<br />\r\n                If sensitivity is negative, Asteria will try to maximize error instead of minimizing it.<br />\r\n                If sensitivity is too large (the upper bound is around 0.75), Asteria will overshoot on her adjustments and fail to settle anywhere.</p>\r\n                <Form handleSubmit={this.handleSubmit} />\r\n                <Table data={data} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}