{"version":3,"sources":["Table.tsx","Form.tsx","diffable/expression.ts","diffable/variable.ts","diffable/operations.ts","neuro/activation.ts","neuro/error.ts","neuro/parameters.ts","neuro/neurons.ts","neuro/layers.ts","App.tsx","index.tsx"],"names":["TableHeader","TableBody","props","data","map","row","index","m","b","r","key","reverse","Table","Form","state","handleSubmit","handleChange","event","target","name","value","setState","submitForm","samples","sensitivity","generations","this","type","isFinite","min","onChange","onClick","Component","Expression","_value","NaN","_deriv","Map","valueImpl","v","has","set","derivImpl","get","clear","ExprUnary","arg","ExprBinary","left","right","ExprVariadic","terms","Variable","val","BinProduct","deriv","print","VarSum","reduce","acc","t","join","ActivationSoftplus","x","y","Math","exp","log","df","ErrorSquared","diff","Parameter","adjustments","error","push","studyImpl","length","adjustment","learnImpl","Weight","n","w","count","bind","reset","Bias","Neuron","InputNeuron","TrainableNeuron","Activation","weights","bias","sum","neurons","p","c","getExpr","parentIndex","forEach","study","learn","OutputNeuron","Error","err","getErr","Layer","InputLayer","names","Array","from","values","vals","TrainableLayer","OutputLayer","parent","childName","getWeight","getBias","App","in","out","i","train","Neuro","undefined","input","rsq","random","valueErr","sqrt","output","getNeuron","className","readOnly","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba8373aa.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport type TableRow = {\r\n    m: number | undefined;\r\n    b: number | undefined;\r\n    r: number | undefined;\r\n};\r\n\r\nfunction TableHeader(): JSX.Element {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th>G</th>\r\n                <th>m</th>\r\n                <th>b</th>\r\n                <th>R</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nfunction TableBody(props: { data: TableRow[] }): JSX.Element {\r\n    return (\r\n        <tbody>{props.data.map((row: TableRow, index: number) => {\r\n            const { m, b, r } = row;\r\n            return (\r\n                <tr key={index}>\r\n                    <td>{index}</td>\r\n                    <td>{m ?? \"\"}</td>\r\n                    <td>{b ?? \"\"}</td>\r\n                    <td>{r ?? \"\"}</td>\r\n                </tr>\r\n            )\r\n        }).reverse()}</tbody>\r\n    );\r\n}\r\n\r\nfunction Table(props: { data: TableRow[] }) {\r\n    const { data } = props;\r\n    return (\r\n        <table>\r\n            <TableHeader />\r\n            <TableBody data={data} />\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\n\r\nexport type FormState = {\r\n    samples: number;\r\n    sensitivity: number;\r\n    generations: number;\r\n};\r\n\r\nexport type FormProps = {\r\n    handleSubmit: (state: FormState) => void;\r\n};\r\n\r\nclass Form extends Component<FormProps> {\r\n    state: FormState;\r\n    handleSubmit: (state: FormState) => void;\r\n\r\n    constructor(props: FormProps) {\r\n        super(props);\r\n        this.state = { samples: 1, sensitivity: 1, generations: 1 };\r\n        this.handleSubmit = (props as any).handleSubmit;\r\n    }\r\n\r\n    handleChange = (event: { target: { name: any; value: any; }; }) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    submitForm = () => {\r\n        (this.props as any).handleSubmit(this.state)\r\n    }\r\n\r\n    render() {\r\n        const { samples, sensitivity, generations } = this.state;\r\n        return (\r\n            <form>\r\n                <label>Samples</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"samples\"\r\n                    value={isFinite(samples) ? samples : \"\"}\r\n                    min=\"1\"\r\n                    onChange={this.handleChange} />\r\n                <br />\r\n                <label>Sensitivity</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"sensitivity\"\r\n                    value={isFinite(sensitivity) ? sensitivity : \"\"}\r\n                    onChange={this.handleChange} />\r\n                <br />\r\n                <label>Generations</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"generations\"\r\n                    value={isFinite(generations) ? generations : \"\"}\r\n                    min=\"0\"\r\n                    onChange={this.handleChange} />\r\n                <br />\r\n                <input type=\"button\" value=\"Train\" onClick={this.submitForm} />\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n","import Differentiable from \"./differentiable\";\r\nimport Variable from \"./variable\";\r\n\r\nabstract class Expression implements Differentiable {\r\n    private _value: number = NaN;\r\n    value(): number {\r\n        if (!isFinite(this._value)) {\r\n            this._value = this.valueImpl();\r\n        }\r\n        return this._value;\r\n    }\r\n    protected abstract valueImpl(): number;\r\n\r\n    private _deriv = new Map<Variable, number>();\r\n    deriv(v: Variable): number {\r\n        if (!this._deriv.has(v)) {\r\n            this._deriv.set(v, this.derivImpl(v));\r\n        }\r\n        return this._deriv.get(v) as number;\r\n    }\r\n    protected abstract derivImpl(_v: Variable): number;\r\n\r\n    abstract print(): string;\r\n\r\n    reset() {\r\n        this._value = NaN;\r\n        this._deriv.clear();\r\n    }\r\n}\r\n\r\nabstract class ExprUnary extends Expression {\r\n    protected arg: Differentiable;\r\n\r\n    constructor(arg: Differentiable) {\r\n        super();\r\n        this.arg = arg;\r\n    }\r\n}\r\n\r\nabstract class ExprBinary extends Expression {\r\n    protected left: Differentiable;\r\n    protected right: Differentiable;\r\n\r\n    constructor(left: Differentiable, right: Differentiable) {\r\n        super();\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\n\r\nabstract class ExprVariadic extends Expression {\r\n    protected terms: Differentiable[];\r\n\r\n    constructor(...terms: Differentiable[]) {\r\n        super();\r\n        this.terms = terms;\r\n    }\r\n}\r\n\r\nexport default Expression;\r\nexport { ExprUnary, ExprBinary, ExprVariadic };\r\n","import Differentiable from \"./differentiable\";\r\n\r\nclass Variable implements Differentiable {\r\n    private name: string;\r\n    private val: number;\r\n\r\n    constructor(name: string, val: number = 0) {\r\n        this.name = name;\r\n        this.val = val;\r\n    }\r\n\r\n    bind(val: number) { this.val = val; }\r\n\r\n    value(): number { return this.val; }\r\n    deriv(v: Variable): number { return (v === this) ? 1 : 0; }\r\n\r\n    print(): string { return this.name; }\r\n}\r\n\r\nexport default Variable;\r\n","import { ExprBinary, ExprVariadic } from \"./expression\";\r\nimport Variable from \"./variable\";\r\n\r\nclass BinProduct extends ExprBinary {\r\n    protected valueImpl(): number {\r\n        return this.left.value() * this.right.value();\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        const dlr = this.left.deriv(v) * this.right.value();\r\n        const ldr = this.left.value() * this.right.deriv(v);\r\n        return dlr + ldr;\r\n    }\r\n\r\n    print(): string {\r\n        return this.left.print() + \" * \" + this.right.print();\r\n    }\r\n}\r\n\r\nclass VarSum extends ExprVariadic {\r\n    protected valueImpl(): number {\r\n        return this.terms.reduce((acc, t) => acc + t.value(), 0);\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        return this.terms.reduce((acc, t) => acc + t.deriv(v), 0);\r\n    }\r\n\r\n    print(): string {\r\n        return \"(\" + this.terms.map((t) => t.print()).join(\" + \") + \")\";\r\n    }\r\n}\r\n\r\nexport { BinProduct, VarSum };\r\n","import { Differentiable, ExprUnary, Variable } from \"../diffable/diffable\";\r\n\r\nclass ActivationLogistic extends ExprUnary {\r\n    protected valueImpl(): number {\r\n        let x = this.arg.value();\r\n        let y = 1 / (1 + Math.exp(-x));\r\n        return isFinite(y) ? y : ((x < 0) ? 0 : 1);\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        let val = this.arg.value();\r\n        let d = this.arg.deriv(v) / (Math.exp(val) + 2 + Math.exp(-val));\r\n        return isFinite(d) ? d : 0;\r\n    }\r\n\r\n    print(): string {\r\n        return \"σ(\" + this.arg.print() + \")\";\r\n    }\r\n}\r\n\r\nclass ActivationSoftplus extends ExprUnary {\r\n    protected valueImpl(): number {\r\n        let x = this.arg.value();\r\n        let y = 1 + Math.exp(x);\r\n        return isFinite(y) ? Math.log(y) : x;\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        let x = this.arg.value();\r\n        let df = 1 / (1 + Math.exp(-x));\r\n        df = isFinite(df) ? df : 0;\r\n        return df * this.arg.deriv(v);\r\n    }\r\n\r\n    print(): string {\r\n        return \"ReLU(\" + this.arg.print() + \")\";\r\n    }\r\n}\r\n\r\nexport interface ActivationClass {\r\n    new(arg: Differentiable): ExprUnary;\r\n}\r\nexport { ActivationLogistic, ActivationSoftplus };\r\n","import { Differentiable, ExprBinary, Variable } from \"../diffable/diffable\";\r\n\r\nclass ErrorSquared extends ExprBinary {\r\n    protected valueImpl(): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        return diff * diff;\r\n    }\r\n\r\n    protected derivImpl(v: Variable): number {\r\n        let diff = this.left.value() - this.right.value();\r\n        return 2 * diff * (this.left.deriv(v) - this.right.deriv(v));\r\n    }\r\n\r\n    print(): string {\r\n        return \"(\" + this.left.print() + \" - \" + this.right.value() + \")^2\";\r\n    }\r\n}\r\n\r\nexport interface ErrorClass {\r\n    new(left: Differentiable, right: Differentiable): ExprBinary;\r\n}\r\nexport { ErrorSquared };\r\n","import { Differentiable, Variable, BinProduct } from \"../diffable/diffable\";\r\nimport Trainable from \"./trainable\";\r\nimport Neuron from \"./neurons\";\r\n\r\nabstract class Parameter implements Trainable {\r\n    private adjustments: number[];\r\n\r\n    constructor() {\r\n        this.adjustments = [];\r\n    }\r\n\r\n    abstract get(): Variable;\r\n    value(): number { return this.get().value(); }\r\n    print(): string { return this.get().print(); }\r\n\r\n    abstract getExpr(): Differentiable;\r\n\r\n    study(error: Differentiable) {\r\n        this.adjustments.push(-this.studyImpl(error));\r\n    }\r\n    protected abstract studyImpl(error: Differentiable): number;\r\n\r\n    learn(sensitivity: number) {\r\n        if (this.adjustments.length > 0) {\r\n            const adjustment = this.adjustments.reduce(\r\n                (acc, t) => acc + t, 0\r\n            ) * sensitivity / this.adjustments.length;\r\n            this.learnImpl(adjustment);\r\n            this.adjustments = [];\r\n        }\r\n    }\r\n    protected abstract learnImpl(adjustment: number): void;\r\n}\r\n\r\nclass Weight extends Parameter {\r\n    private static count: number = 0;\r\n\r\n    private w: Variable;\r\n    private t: BinProduct;\r\n\r\n    constructor(n: Neuron) {\r\n        super();\r\n        this.w = new Variable(\"w\" + Weight.count, 1);\r\n        this.t = new BinProduct(this.w, n.get());\r\n        ++Weight.count;\r\n    }\r\n\r\n    get(): Variable { return this.w; }\r\n    getExpr(): Differentiable { return this.t; }\r\n\r\n    protected studyImpl(error: Differentiable): number {\r\n        return error.deriv(this.w);\r\n    }\r\n    protected learnImpl(adjustment: number) {\r\n        this.w.bind(this.value() + adjustment);\r\n    }\r\n\r\n    reset() {\r\n        this.t.reset();\r\n    }\r\n}\r\n\r\nclass Bias extends Parameter {\r\n    static count: number = 0;\r\n\r\n    private b: Variable;\r\n\r\n    constructor() {\r\n        super();\r\n        this.b = new Variable(\"b\" + Bias.count, 0);\r\n        ++Bias.count;\r\n    }\r\n\r\n    get(): Variable { return this.b; }\r\n    getExpr(): Differentiable { return this.get(); }\r\n\r\n    protected studyImpl(error: Differentiable): number {\r\n        return error.deriv(this.b);\r\n    }\r\n    protected learnImpl(adjustment: number) {\r\n        this.b.bind(this.value() + adjustment);\r\n    }\r\n}\r\n\r\nexport { Weight, Bias };\r\n","import {\r\n    Differentiable,\r\n    ExprUnary, ExprBinary,\r\n    Variable,\r\n    VarSum\r\n} from \"../diffable/diffable\";\r\nimport Trainable from \"./trainable\";\r\nimport { Weight, Bias } from \"./parameters\";\r\nimport { ActivationClass } from \"./activation\";\r\nimport { ErrorClass } from \"./error\";\r\n\r\nabstract class Neuron {\r\n    abstract get(): Differentiable;\r\n    value(): number { return this.get().value(); }\r\n    print(): string { return this.get().print(); }\r\n}\r\n\r\nclass InputNeuron extends Neuron {\r\n    private x: Variable;\r\n\r\n    constructor(name: string) {\r\n        super();\r\n        this.x = new Variable(name);\r\n    }\r\n\r\n    get(): Differentiable { return this.x; }\r\n\r\n    bind(val: number) { this.x.bind(val); }\r\n}\r\n\r\nabstract class TrainableNeuron extends Neuron implements Trainable {\r\n    private weights: Weight[];\r\n    private bias: Bias;\r\n    private sum: VarSum;\r\n    private exp: ExprUnary;\r\n\r\n    constructor(Activation: ActivationClass, ...neurons: Neuron[]) {\r\n        super();\r\n        this.weights = neurons.map((p) => new Weight(p));\r\n        this.bias = new Bias();\r\n\r\n        const terms = this.weights.map((c) => c.getExpr());\r\n        this.sum = new VarSum(...terms, this.bias.getExpr());\r\n        this.exp = new Activation(this.sum);\r\n    }\r\n\r\n    get(): Differentiable { return this.exp; }\r\n    getWeight(parentIndex: number): Weight { return this.weights[parentIndex]; }\r\n    getBias(): Bias { return this.bias; }\r\n\r\n    study(error: Differentiable) {\r\n        this.weights.forEach((w) => w.study(error));\r\n        this.bias.study(error);\r\n    }\r\n    learn(sensitivity: number) {\r\n        this.weights.forEach((w) => w.learn(sensitivity));\r\n        this.bias.learn(sensitivity);\r\n    }\r\n\r\n    reset() {\r\n        this.exp.reset();\r\n        this.sum.reset();\r\n        this.weights.forEach((w) => w.reset());\r\n    }\r\n}\r\n\r\nclass HiddenNeuron extends TrainableNeuron {}\r\n\r\nclass OutputNeuron extends TrainableNeuron {\r\n    private y: Variable;\r\n    private err: ExprBinary;\r\n\r\n    constructor(\r\n        name: string,\r\n        Activation: ActivationClass,\r\n        Error: ErrorClass,\r\n        ...neurons: Neuron[]\r\n    ) {\r\n        super(Activation, ...neurons);\r\n        this.y = new Variable(name);\r\n        this.err = new Error(this.get(), this.y);\r\n    }\r\n\r\n    getErr(): Differentiable { return this.err; }\r\n    valueErr(): number { return this.getErr().value(); }\r\n    printErr(): string { return this.getErr().print(); }\r\n\r\n    bind(val: number) { this.y.bind(val); }\r\n\r\n    reset() {\r\n        super.reset();\r\n        this.err.reset();\r\n    }\r\n}\r\n\r\nexport default Neuron;\r\nexport { InputNeuron, TrainableNeuron, HiddenNeuron, OutputNeuron };\r\n","import Neuron, {\r\n    InputNeuron,\r\n    TrainableNeuron, HiddenNeuron, OutputNeuron\r\n} from \"./neurons\";\r\nimport { Differentiable, VarSum } from \"../diffable/diffable\";\r\nimport { ActivationClass } from \"./activation\";\r\nimport { ErrorClass } from \"./error\";\r\nimport { Weight, Bias } from \"./parameters\";\r\nimport Trainable from \"./trainable\";\r\n\r\nabstract class Layer {\r\n    abstract get(): Neuron[];\r\n    print(): string {\r\n        return \"[\" + this.get().map((n) => n.print()).join(\", \") + \"]\";\r\n    }\r\n\r\n    size(): number { return this.get().length; }\r\n}\r\n\r\nclass InputLayer extends Layer {\r\n    private neurons: Map<string, InputNeuron>;\r\n\r\n    constructor(...names: string[]) {\r\n        super();\r\n        this.neurons = new Map();\r\n        for (const name of names) {\r\n            this.neurons.set(name, new InputNeuron(name));\r\n        }\r\n    }\r\n\r\n    get(): Neuron[] { return Array.from(this.neurons.values()); }\r\n    getNeuron(name: string): Neuron | undefined {\r\n        return this.neurons.get(name);\r\n    }\r\n\r\n    bind(vals: Map<string, number>) {\r\n        for (const [name, neuron] of this.neurons) {\r\n            neuron.bind(vals.get(name) ?? 0);\r\n        }\r\n    }\r\n}\r\n\r\nabstract class TrainableLayer extends Layer implements Trainable {\r\n    abstract get(): TrainableNeuron[];\r\n\r\n    study(error: Differentiable) {\r\n        this.get().forEach((n) => n.study(error));\r\n    }\r\n    learn(sensitivity: number) {\r\n        this.get().forEach((n) => n.learn(sensitivity));\r\n    }\r\n\r\n    reset() {\r\n        this.get().forEach((n) => n.reset());\r\n    }\r\n}\r\n\r\nclass HiddenLayer extends TrainableLayer {\r\n    private neurons: TrainableNeuron[];\r\n\r\n    constructor(parent: Layer, Activation: ActivationClass, size: number) {\r\n        super();\r\n        this.neurons = [];\r\n        for (let i = 0; i < size; ++i) {\r\n            this.neurons.push(new HiddenNeuron(Activation, ...parent.get()))\r\n        }\r\n    }\r\n\r\n    get(): TrainableNeuron[] { return this.neurons; }\r\n    getNeuron(index: number): Neuron {\r\n        return this.neurons[index];\r\n    }\r\n}\r\n\r\nclass OutputLayer extends TrainableLayer {\r\n    private neurons: Map<string, OutputNeuron>;\r\n    private err: VarSum;\r\n\r\n    constructor(\r\n        parent: Layer,\r\n        Activation: ActivationClass,\r\n        Error: ErrorClass,\r\n        ...names: string[]\r\n    ) {\r\n        super();\r\n        this.neurons = new Map();\r\n        for (const name of names) {\r\n            this.neurons.set(\r\n                name,\r\n                new OutputNeuron(name, Activation, Error, ...parent.get())\r\n            );\r\n        }\r\n        this.err = new VarSum(\r\n            ...Array.from(this.neurons.values()).map((n) => n.getErr())\r\n        );\r\n    }\r\n\r\n    get(): TrainableNeuron[] { return Array.from(this.neurons.values()); }\r\n    getNeuron(name: string): Neuron | undefined {\r\n        return this.neurons.get(name);\r\n    }\r\n\r\n    getWeight(childName: string, parentIndex: number): Weight | undefined {\r\n        return this.neurons.get(childName)?.getWeight(parentIndex);\r\n    }\r\n    getBias(name: string): Bias | undefined {\r\n        return this.neurons.get(name)?.getBias();\r\n    }\r\n\r\n    getErr(): Differentiable { return this.err; }\r\n    valueErr(): number { return this.getErr().value(); }\r\n    printErr(): string { return this.getErr().print(); }\r\n\r\n    bind(vals: Map<string, number>) {\r\n        for (const [name, neuron] of this.neurons) {\r\n            neuron.bind(vals.get(name) ?? 0);\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        super.reset();\r\n        this.err.reset();\r\n    }\r\n}\r\n\r\nexport default Layer;\r\nexport { InputLayer, HiddenLayer, OutputLayer };\r\n","import React, { Component } from \"react\";\r\nimport Table, { TableRow } from \"./Table\";\r\nimport Form, { FormState } from \"./Form\";\r\nimport * as Neuro from \"./neuro/neuro\";\r\n\r\nconst x: string = 'x';\r\nconst y: string = 'y';\r\n\r\nclass App extends Component<{}> {\r\n    in: Neuro.InputLayer;\r\n    out: Neuro.OutputLayer;\r\n\r\n    state: { data: TableRow[]; input: number };\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.in = new Neuro.InputLayer(x);\r\n        this.out = new Neuro.OutputLayer(\r\n            this.in,\r\n            Neuro.ActivationSoftplus,\r\n            Neuro.ErrorSquared,\r\n            y\r\n        );\r\n        this.out.bind(new Map([[y, 42]]));\r\n\r\n        this.state = { data: [{ m: 1, b: 0, r: undefined }], input: 0 };\r\n    }\r\n\r\n    train(samples: number, sensitivity: number) {\r\n        if (!isFinite(samples)) { return; }\r\n        if (!isFinite(sensitivity)) { return; }\r\n        if (samples <= 0) { return; }\r\n\r\n        let rsq = 0;\r\n        for (let i = 0; i < samples; ++i) {\r\n            this.out.reset();\r\n            this.in.bind(new Map([[x, Math.random()]]));\r\n            this.out.study(this.out.getErr());\r\n            rsq += this.out.valueErr();\r\n        }\r\n        this.out.learn(sensitivity);\r\n\r\n        let { data } = this.state;\r\n        const m = this.out.getWeight(y, 0)!.value();\r\n        const b = this.out.getBias(y)!.value();\r\n        data[data.length - 1].r = Math.sqrt(rsq / samples);\r\n        data.push({ m: m, b: b, r: undefined });\r\n        this.setState({ data: data });\r\n    }\r\n\r\n    handleChange = (event: { target: { name: any; value: any }; }) => {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmit = (state: FormState) => {\r\n        for (let i: number = 0; i < state.generations; ++i) {\r\n            this.train(state.samples, state.sensitivity);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const { data, input } = this.state;\r\n\r\n        let output: number = NaN;\r\n        if (isFinite(input)) {\r\n            this.out.reset();\r\n            this.in.bind(new Map([[x, input]]));\r\n            output = this.out.getNeuron(y)!.value();\r\n        }\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <h1>Asteria</h1>\r\n                    <p>Asteria wants to learn the answer to life, the universe, and everything, but she needs your help!</p>\r\n                </header>\r\n\r\n                <h2>About</h2>\r\n                <p>Asteria is the simplest possible neural network: a single input neuron linked to a single output neuron.<br />\r\n                She has no hidden layers, so Asteria is really just a linear relation passed through an activation function (softplus).<br />\r\n                The full equation for Asteria is y=ReLU(mx+b). Her initial state is y=ReLU(x), where m=1 and b=0.<br />\r\n                Asteria will be trained to minimize R^2, the mean of (y-42)^2 over randomly-sampled values of x ranging from 0 to 1.</p>\r\n\r\n                <h2>Testing</h2>\r\n                <p>If she has learned well, Asteria should output 42 no matter what input we give her. Test it out here!</p>\r\n                <label>Input</label>\r\n                <input\r\n                    type=\"number\"\r\n                    name=\"input\"\r\n                    value={input}\r\n                    onChange={this.handleChange} />\r\n                <br />\r\n                <label>Output</label>\r\n                <input readOnly\r\n                    type=\"text\"\r\n                    name=\"output\"\r\n                    value={output} />\r\n\r\n                <h2>Training</h2>\r\n                <p>We want Asteria to ultimately settle on y=42~ReLU(42), where m=0 and b=42.<br />\r\n                To determine how to adjust m and b, Asteria samples values of x between 0 to 1 (you decide how many) and does fancy backpropagation.<br />\r\n                Sensitivity determines the strength of the adjustments to m and b in each generation of Asteria.<br />\r\n                If sensitivity is negative, Asteria will try to maximize error instead of minimizing it.<br />\r\n                If sensitivity is too large (the upper bound is around 0.75), Asteria will overshoot on her adjustments and fail to settle anywhere.</p>\r\n                <Form handleSubmit={this.handleSubmit} />\r\n                <Table data={data} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}