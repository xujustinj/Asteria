{"version":3,"sources":["Welcome.tsx","Test.tsx","Train.tsx","Table.tsx","Asteria.tsx","matrices/matrix.ts","matrices/standard.ts","matrices/operations.ts","matrices/rotations.ts","neural/layers.ts","neural/network.ts","neural/activations.ts","neural/logistic.ts","neural/softplus.ts","asteria42/Network42.ts","asteria42/Asteria42.tsx","asteriaNAND/NetworkNAND.ts","asteriaNAND/AsteriaNAND.tsx","asteriaXOR/NetworkXOR.ts","asteriaXOR/AsteriaXOR.tsx","App.tsx","index.tsx"],"names":["Welcome","className","Test","props","net","state","network","inputs","inputLayer","binding","name","set","outputs","output","event","target","value","this","setState","inputsTSX","push","key","input","type","onChange","handleInput","bind","outputsTSX","readOnly","Component","Train","samples","sensitivity","friction","generations","onTrain","isFinite","min","handleChange","onClick","submitForm","TableHeader","names","map","header","TableBody","rows","row","values","get","Table","Array","from","keys","g","Asteria","makeRow","Map","makeRowExtras","r","i","study","learn","unshift","length","AboutContents","TestingContents","TrainingContents","About","Testing","Training","SymMatrix","entries","size","undefined","j","other","forEach","otherRow","entry","join","AsymMatrix","height","width","transpose","h","w","t","otherEntry","standardBasis","dim","scale","basis","fill","dot","v","u","reduce","acc","n","multMM","a","b","cols","col","randomRotation","planes","x","y","cos","Math","random","sin","sqrt","randomRotate","matrix","even","half","z","planess","pop","shift","reduceRight","fill1D","Layer","_adjustments","_sensitivity","_friction","InputLayer","_names","_value","has","TrainableLayer","prev","vw","aw","vb","ab","_preAF","count","vectors","concat","slice","orthoVectors","arr","fill2D","preAF","actValue","adjustments","d","actDeriv","m","c","multMtV","add","reset","HiddenLayer","to","OutputLayer","_expec","err","vals","indexOf","Network","_inputLayer","_hiddenLayers","_outputLayer","studied","source","inputNames","outputNames","hiddenSizes","makeHiddenLayer","makeOutputLayer","print","error","sample","studyBindings","TestableNetwork","tests","rsq","positive","Number","MIN_VALUE","Logistic","exp","LogisticHiddenLayer","deriv","LogisticOutputLayer","Softplus","log","SoftplusHiddenLayer","SoftplusOutputLayer","Network42","cachedTests","sort","Neural","outputLayer","weight","bias","Asteria42","_net","NetworkNAND","xNANDy","quarter","AsteriaNAND","NetworkXOR","xXORy","AsteriaXOR","asteria","App","exact","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6143361f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './stylesheets/madeon.css';\r\nimport './stylesheets/centreing.css';\r\n\r\nfunction Welcome() {\r\n    return (\r\n      <div className=\"centre-children\">\r\n        <h1 className=\"adventure\">Asteria</h1>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Welcome;\r\n","import React, { Component } from \"react\";\r\nimport { TestableNetwork } from \"./neural\";\r\n\r\ntype TestProps = {\r\n    network: TestableNetwork;\r\n}\r\n\r\nclass Test extends Component<TestProps> {\r\n    net: TestableNetwork;\r\n    state: {\r\n        inputs: Map<string, number>;\r\n        outputs: Map<string, number>;\r\n    }\r\n\r\n    constructor(props: TestProps) {\r\n        super(props);\r\n\r\n        this.net = props.network;\r\n        const inputs = this.net.inputLayer().binding();\r\n        for (const [name] of inputs) {\r\n            inputs.set(name, 0);\r\n        }\r\n        this.state = {\r\n            inputs: inputs,\r\n            outputs: this.net.output(inputs),\r\n        }\r\n    }\r\n\r\n    handleInput(event: { target: { name: string; value: any; }; }) {\r\n        const { name, value } = event.target;\r\n        const { inputs } = this.state;\r\n        inputs.set(name, value);\r\n        this.setState({ inputs: inputs, outputs: this.net.output(inputs) });\r\n    }\r\n\r\n    render() {\r\n      const input: string = \"input\";\r\n      const output: string = \"output\";\r\n\r\n      let inputsTSX: JSX.Element[] = [];\r\n      for (const [name, value] of this.state.inputs) {\r\n          inputsTSX.push(\r\n            <div key={input + \"-\" + name}>\r\n            <label>{name}=</label>\r\n            <input\r\n              type=\"number\"\r\n              name={name}\r\n              value={value}\r\n              onChange={this.handleInput.bind(this)} />\r\n            </div>\r\n          );\r\n      }\r\n\r\n      let outputsTSX: JSX.Element[] = [];\r\n      for (const [name, value] of this.state.outputs) {\r\n          outputsTSX.push(\r\n            <div key={output + \"-\" + name}>\r\n            <label>{name}=</label>\r\n            <input readOnly\r\n              type=\"number\"\r\n              name={name}\r\n              value={value}/>\r\n            </div>\r\n          );\r\n      }\r\n\r\n      return (\r\n        <form className=\"Test\">\r\n          <h3>Inputs</h3>\r\n          {inputsTSX}\r\n          <h3>Outputs</h3>\r\n          {outputsTSX}\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default Test;\r\n","import React, { Component } from \"react\";\r\n\r\ntype TrainProps = {\r\n    onTrain: (\r\n        samples: number,\r\n        sensitivity: number,\r\n        friction: number,\r\n        generations: number\r\n    ) => void;\r\n};\r\n\r\nclass Train extends Component<TrainProps> {\r\n    state: {\r\n        samples: number;\r\n        sensitivity: number;\r\n        friction: number;\r\n        generations: number;\r\n    };\r\n\r\n    constructor(props: TrainProps) {\r\n        super(props);\r\n        this.state = {\r\n            samples: 1,\r\n            sensitivity: 1,\r\n            friction: 1,\r\n            generations: 1,\r\n        };\r\n    }\r\n\r\n    handleChange(event: { target: { name: string; value: any; }; }) {\r\n        const { name, value } = event.target;\r\n        this.setState({ [name]: value });\r\n    }\r\n\r\n    submitForm() {\r\n        const { samples, sensitivity, friction, generations, } = this.state;\r\n        this.props.onTrain(samples, sensitivity, friction, generations);\r\n    }\r\n\r\n    render() {\r\n        const { samples, sensitivity, friction, generations, } = this.state;\r\n        return (\r\n          <form className=\"Train\">\r\n            <label>Samples</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"samples\"\r\n              value={isFinite(samples) ? samples : \"\"}\r\n              min=\"1\"\r\n              onChange={this.handleChange.bind(this)} />\r\n            <br />\r\n\r\n            <label>Sensitivity</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"sensitivity\"\r\n              value={isFinite(sensitivity) ? sensitivity : \"\"}\r\n              onChange={this.handleChange.bind(this)} />\r\n            <br />\r\n\r\n            <label>Friction</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"friction\"\r\n              value={isFinite(friction) ? friction : \"\"}\r\n              onChange={this.handleChange.bind(this)} />\r\n            <br />\r\n\r\n            <label>Generations</label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"generations\"\r\n              value={isFinite(generations) ? generations : \"\"}\r\n              min=\"0\"\r\n              onChange={this.handleChange.bind(this)} />\r\n            <br />\r\n\r\n            <input\r\n              type=\"button\"\r\n              value=\"Train\"\r\n              onClick={this.submitForm.bind(this)} />\r\n          </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Train;\r\n","import React from \"react\";\r\n\r\nexport class Row {\r\n    constructor(public key: number, public values: Map<string, any>) {}\r\n}\r\n\r\nfunction TableHeader(props: { names: string[] }) {\r\n    const header=\"header\";\r\n    return (\r\n      <thead>\r\n        <tr key={header}>\r\n          {props.names.map((name) => <th key={header + '-' + name}>{name}</th>)}\r\n        </tr>\r\n      </thead>\r\n    );\r\n}\r\n\r\nfunction TableBody(props: { names: string[], rows: Row[] }) {\r\n    const rows = props.rows.map((row) => (\r\n      <tr key={row.key}>\r\n        {props.names.map(\r\n            (name) => <td key={row.key + '-' + name}>{row.values.get(name)}</td>\r\n        )}\r\n      </tr>\r\n    ));\r\n    return (\r\n      <tbody>{rows}</tbody>\r\n    );\r\n}\r\n\r\nfunction Table(props: { rows: Row[] }) {\r\n    const { rows } = props;\r\n    const names = Array.from(rows[0].values.keys());\r\n    return (\r\n      <table>\r\n        <TableHeader names={names} />\r\n        <TableBody names={names} rows={rows} />\r\n      </table>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport { TestableNetwork } from \"./neural\";\r\nimport Test from \"./Test\"\r\nimport Train from \"./Train\";\r\nimport Table, { Row } from \"./Table\";\r\n\r\nconst g = 'G', r = 'R';\r\n\r\nabstract class Asteria extends Component<{}> {\r\n    state: { rows: Row[]; input: number; };\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n        this.state = { rows: [this.makeRow(0)], input: 0 };\r\n    }\r\n\r\n    protected abstract net(): TestableNetwork;\r\n\r\n    private makeRow(key: number): Row {\r\n        return {\r\n            key: key,\r\n            values: new Map([\r\n                [g, key],\r\n                ...this.makeRowExtras(),\r\n                [r, this.net().r()],\r\n            ]),\r\n        };\r\n    }\r\n    protected makeRowExtras(): Map<string, number> { return new Map(); }\r\n\r\n    private onTrain(samples: number, sensitivity: number, friction: number, generations: number) {\r\n        for (let i = 0; i < generations; ++i) {\r\n            this.net().study(samples);\r\n            this.net().learn(sensitivity, friction);\r\n\r\n            let { rows } = this.state;\r\n            rows.unshift(this.makeRow(rows.length));\r\n            this.setState({ rows: rows });\r\n        }\r\n    };\r\n\r\n    private About(): JSX.Element {\r\n        const AboutContents = this.AboutContents.bind(this);\r\n        return (\r\n          <div>\r\n            <h2>About</h2>\r\n            <AboutContents />\r\n          </div>\r\n        )\r\n    }\r\n    protected AboutContents(): JSX.Element { return <div />; }\r\n\r\n    private Testing(): JSX.Element {\r\n        const TestingContents = this.TestingContents.bind(this);\r\n        return (\r\n          <div>\r\n            <h2>Testing</h2>\r\n            <TestingContents />\r\n            <Test network={this.net()} />\r\n          </div>\r\n        )\r\n    }\r\n    protected TestingContents(): JSX.Element { return <div />; }\r\n\r\n    private Training(): JSX.Element {\r\n        const { rows } = this.state;\r\n        const TrainingContents = this.TrainingContents.bind(this);\r\n        return (\r\n          <div>\r\n            <h2>Training</h2>\r\n            <TrainingContents />\r\n            <Train onTrain={this.onTrain.bind(this)}/>\r\n            <Table rows={rows} />\r\n          </div>\r\n        )\r\n    }\r\n    protected TrainingContents(): JSX.Element { return <div />; }\r\n\r\n    render() {\r\n        const About = this.About.bind(this);\r\n        const Testing = this.Testing.bind(this);\r\n        const Training = this.Training.bind(this);\r\n        return (\r\n          <div className=\"Asteria42\">\r\n            <About />\r\n            <Testing />\r\n            <Training />\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Asteria;\r\n","class SymMatrix implements Matrix {\r\n    entries: number[][];\r\n    size: number;\r\n\r\n    constructor(\r\n        entries: number[][],\r\n        size: number | undefined = undefined\r\n    ) {\r\n        this.entries = entries;\r\n        this.size = (size === undefined) ? this.entries.length : size;\r\n    }\r\n\r\n    get(i: number, j: number): number { return this.entries[i][j]; }\r\n    row(i: number): number[] { return this.entries[i]; }\r\n    col(j: number): number[] { return this.entries[j]; }\r\n    rows(): number[][] { return this.entries; }\r\n    cols(): number[][] { return this.entries; }\r\n\r\n    height(): number { return this.size; }\r\n    width(): number { return this.size; }\r\n    transpose(): SymMatrix { return this; }\r\n\r\n    add(other: number[][]): void {\r\n        this.entries.forEach((row, i) => {\r\n            const otherRow: number[] = other[i];\r\n            row.forEach((entry, j) => entry += otherRow[j]);\r\n        })\r\n    }\r\n    sub(other: number[][]): void {\r\n        this.entries.forEach((row, i) => {\r\n            const otherRow: number[] = other[i];\r\n            row.forEach((entry, j) => entry -= otherRow[j]);\r\n        })\r\n    }\r\n\r\n    print(): string {\r\n        return this.entries.map((row) => row.join()).join('\\n');\r\n    }\r\n}\r\n\r\nclass AsymMatrix {\r\n    entries: number[][];\r\n    h: number;\r\n    w: number;\r\n    t: number[][];\r\n\r\n    // height, width, and transpose can all be computed from the given entries at the cost of performance.\r\n    constructor(\r\n        entries: number[][],\r\n        height: number | undefined = undefined,\r\n        width: number | undefined = undefined,\r\n        transpose: number[][] | undefined = undefined\r\n    ) {\r\n        this.entries = entries;\r\n        this.h = (height === undefined) ? entries.length : height;\r\n        this.w = (width === undefined) ? entries[0].length : width;\r\n        if (transpose) {\r\n            this.t = transpose;\r\n        } else {\r\n            this.t = new Array(this.w);\r\n            for (let i = 0; i < this.w; ++i) {\r\n                this.t[i] = this.entries.map((row) => row[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    get(i: number, j: number): number { return this.entries[i][j]; }\r\n    row(i: number): number[] { return this.entries[i]; }\r\n    col(j: number): number[] { return this.t[j]; }\r\n    rows(): number[][] { return this.entries; }\r\n    cols(): number[][] { return this.t; }\r\n\r\n    height(): number { return this.h; }\r\n    width(): number { return this.w; }\r\n    transpose(): AsymMatrix {\r\n        return new AsymMatrix(this.t!, this.w, this.h, this.entries);\r\n    }\r\n\r\n    add(other: number[][]): void {\r\n        this.entries.forEach((row, i) => {\r\n            const otherRow: number[] = other[i];\r\n            for (let j = 0; j < this.w; ++j) {\r\n                const otherEntry = otherRow[j];\r\n                row[j] += otherEntry;\r\n                this.t[j][i] += otherEntry;\r\n            }\r\n        });\r\n    }\r\n    sub(other: number[][]): void {\r\n        this.entries.forEach((row, i) => {\r\n            const otherRow: number[] = other[i];\r\n            for (let j = 0; j < this.w; ++j) {\r\n                const otherEntry = otherRow[j];\r\n                row[j] -= otherEntry;\r\n                this.t[j][i] -= otherEntry;\r\n            }\r\n        });\r\n    }\r\n\r\n    print(): string {\r\n        return this.entries.map((row) => row.join()).join('\\n');\r\n    }\r\n}\r\n\r\nexport default interface Matrix {\r\n    get(i: number, j: number): number;\r\n    row(i: number): number[];\r\n    col(j: number): number[];\r\n    rows(): number[][];\r\n    cols(): number[][];\r\n\r\n    height(): number;\r\n    width(): number;\r\n    transpose(): Matrix;\r\n\r\n    add(other: number[][]): void;\r\n    sub(other: number[][]): void;\r\n\r\n    print(): string;\r\n}\r\nexport { SymMatrix, AsymMatrix };\r\n","import { SymMatrix } from \"./matrix\";\r\n\r\nfunction standardBasis(dim: number, scale: number = 1): SymMatrix {\r\n    let basis: number[][] = new Array(dim);\r\n    for (let i = 0; i < dim; ++i) {\r\n        basis[i] = new Array(dim).fill(0);\r\n        basis[i][i] = scale;\r\n    }\r\n    return new SymMatrix(basis, dim);\r\n}\r\n\r\nexport default standardBasis;\r\n","import Matrix, { AsymMatrix } from \"./matrix\";\r\n\r\nfunction dot(v: number[], u: number[]): number {\r\n    return v.reduce((acc, n, i) => acc + n * u[i], 0);\r\n}\r\n\r\n// Multiplies v and u as two matrices.\r\nfunction multVV(v: number[], u: number[]): number[][] {\r\n    return v.map((n) => u.map((m) => m * n));\r\n}\r\n\r\n// Multiplies a and b.\r\nfunction multMM(a: Matrix, b: Matrix): AsymMatrix {\r\n    return new AsymMatrix(a.rows().map((row) =>\r\n        b.cols().map((col) =>\r\n            dot(row, col)\r\n        )\r\n    ), a.height(), b.width());\r\n}\r\n\r\n// Multiplies a and v.\r\nfunction multMV(a: Matrix, v: number[]): number[] {\r\n    return a.rows().map((r) => dot(r, v));\r\n}\r\n\r\n// Multiplies a and v and adds u.\r\nfunction multMVplusV(a: Matrix, v: number[], u: number[]) {\r\n    return a.rows().map((r, i) =>\r\n        r.reduce((acc, n, j) => acc + n * v[j], u[i])\r\n    );\r\n}\r\n\r\n// Multiplies the transpose of a and v.\r\nfunction multMtV(a: Matrix, v: number[]): number[] {\r\n    return a.cols().map((c) => dot(c, v));\r\n}\r\n\r\nexport { dot, multVV, multMM, multMV, multMVplusV, multMtV };\r\n","import Matrix, { AsymMatrix } from \"./matrix\";\r\nimport standardBasis from \"./standard\";\r\nimport { multMM } from \"./operations\";\r\n\r\ntype Plane = { x: number; y: number; };\r\n\r\nfunction randomRotation(dim: number, ...planes: Plane[]): AsymMatrix {\r\n    let basis: number[][] = new Array(dim);\r\n    for (let i = 0; i < dim; ++i) {\r\n        basis[i] = new Array(dim).fill(0);\r\n        basis[i][i] = 1;\r\n    }\r\n    let transpose = basis;\r\n    for (const { x, y } of planes) {\r\n          if (x < dim && y < dim) {\r\n            const cos = 2 * Math.random() - 1;\r\n            const sin = Math.sqrt(1 - cos * cos);\r\n            basis[x][x] = cos;\r\n            basis[y][y] = cos;\r\n            if (Math.random() < 0.5) {\r\n                basis[x][y] = sin;\r\n                basis[y][x] = -sin;\r\n                transpose[x][y] = -sin;\r\n                transpose[y][x] = sin;\r\n            } else {\r\n                basis[x][y] = -sin;\r\n                basis[y][x] = sin;\r\n                transpose[x][y] = sin;\r\n                transpose[y][x] = -sin;\r\n            }\r\n        }\r\n    }\r\n    return new AsymMatrix(basis, dim, dim, transpose);\r\n}\r\n\r\nfunction randomRotate(matrix: Matrix): Matrix {\r\n    const dim: number = matrix.height();\r\n    const even: number = (dim % 2 === 0) ? dim : dim + 1;\r\n    const half: number = even / 2;\r\n\r\n    let x: number[] = [];\r\n    let y: number[] = [];\r\n    let z: number = even - 1;\r\n    let planess: Plane[][] = [];\r\n    for (let i = 1; i < half; ++i) {\r\n        x.push(i);\r\n        y.push(z - i);\r\n    }\r\n    for (let i = 0; i <= even - 2; ++i) {\r\n        planess[i] = [{ x: 0, y: z }];\r\n        for (let j = 0; j < x.length; ++j) {\r\n            planess[i].push({ x: x[j], y: y[j] });\r\n        }\r\n        x.unshift(z);\r\n        y.push(x.pop()!);\r\n        z = y.shift()!;\r\n    }\r\n\r\n    return planess.map((planes) =>\r\n        randomRotation(dim, ...planes)\r\n    ).reduceRight(multMM, matrix);\r\n}\r\n\r\nfunction orthoVectors(dim: number, count: number, scale = 1): number[][] {\r\n    const basis = standardBasis(dim, scale);\r\n    let vectors: number[][] = [];\r\n    while (vectors.length < count) {\r\n        vectors = vectors.concat(randomRotate(basis).cols());\r\n    }\r\n    return vectors.slice(0, count);\r\n}\r\n\r\nexport { standardBasis, randomRotation, randomRotate, orthoVectors };\r\n","import { Matrix, multMVplusV } from \"../matrices\";\r\nimport { orthoVectors } from \"../matrices/rotations\";\r\nimport { AsymMatrix } from \"../matrices/matrix\";\r\nimport { multVV, multMtV } from \"../matrices/operations\";\r\n\r\n\r\nfunction fill1D(length: number, value: number): number[] {\r\n    return new Array(length).fill(value);\r\n}\r\n\r\nfunction fill2D(height: number, width: number, value: number): number[][] {\r\n    const arr = [];\r\n    while (arr.length < height) {\r\n        arr.push(fill1D(width, value));\r\n    }\r\n    return arr;\r\n}\r\n\r\n\r\nabstract class Layer {\r\n    width: number;\r\n\r\n    constructor(width: number) {\r\n        this.width = width;\r\n    }\r\n\r\n    abstract value(): number[];\r\n\r\n    print(): string { return \"\"; }\r\n\r\n\r\n    study(_adjustments: number[]): void {}\r\n\r\n    learn(_sensitivity: number, _friction: number): void {}\r\n\r\n\r\n    reset(): void {}\r\n}\r\n\r\n\r\nclass InputLayer extends Layer {\r\n    private _names: string[];\r\n    private _value: number[];\r\n\r\n    constructor(...names: string[]) {\r\n        super(names.length);\r\n        this._names = names;\r\n        this._value = new Array(this.width).fill(0);\r\n    }\r\n\r\n    value(): number[] { return this._value; }\r\n\r\n    print(): string {\r\n        return this._names.reduce(((acc, name, i) =>\r\n            acc + \"\\n\\t\" + name + \": \" + this._value[i]\r\n        ), \"[\") + \"\\n]\";\r\n    }\r\n\r\n\r\n    bind(binding: Map<string, number>) {\r\n        for (let i = 0; i < this.width; ++i) {\r\n            if (binding.has(this._names[i])) {\r\n                this._value[i] = binding.get(this._names[i])!;\r\n            }\r\n        }\r\n    }\r\n\r\n    binding(): Map<string, number> {\r\n        let map = new Map<string, number>();\r\n        for (let i = 0; i < this.width; ++i) {\r\n            map.set(this._names[i], this._value[i]);\r\n        }\r\n        return map;\r\n    }\r\n\r\n    input(): Map<string, number> {\r\n        return this.binding();\r\n    }\r\n}\r\n\r\n\r\nabstract class TrainableLayer extends Layer {\r\n    protected prev: Layer;\r\n\r\n    protected w: Matrix;\r\n    protected vw: number[][];\r\n    protected aw: number[][][] = [];\r\n\r\n    protected b: number[];\r\n    protected vb: number[];\r\n    protected ab: number[][] = [];\r\n\r\n    private _preAF: number[] | null = null;\r\n    private _value: number[] | null = null;\r\n\r\n    constructor(prev: Layer, width: number) {\r\n        super(width);\r\n\r\n        this.prev = prev;\r\n\r\n        this.w = new AsymMatrix(\r\n            orthoVectors(prev.width, width),\r\n            width, prev.width\r\n        );\r\n        this.vw = fill2D(width, prev.width, 0);\r\n\r\n        this.b = fill1D(width, 0);\r\n        this.vb = fill1D(width, 0);\r\n    }\r\n\r\n    preAF(): number[] {\r\n        if (this._preAF === null) {\r\n            this._preAF = multMVplusV(this.w, this.prev.value(), this.b);\r\n        }\r\n        return this._preAF;\r\n    }\r\n    value(): number[] {\r\n        if (this._value === null) {\r\n            this._value = this.preAF().map((x) => this.actValue(x));\r\n        }\r\n        return this._value;\r\n    }\r\n\r\n    print(): string {\r\n        return this.w.rows().reduce(((acc, row, i) =>\r\n            acc + \"\\n\\t\" + row.join() + \"; \" + this.b[i]\r\n        ), \"[\") + \"\\n]\";\r\n    }\r\n\r\n\r\n    study(adjustments: number[]): void {\r\n        const preAF = this.preAF();\r\n        const d = adjustments.map((a, i) =>\r\n            a * this.actDeriv(preAF[i])\r\n        );\r\n        this.aw.push(multVV(d, this.prev.value()));\r\n        this.ab.push(d);\r\n        this.prev.study(multMtV(this.w, d));\r\n    }\r\n\r\n    learn(sensitivity: number, friction: number): void {\r\n        const count = this.aw.length;\r\n\r\n        for (let i = 0; i < this.width; ++i) {\r\n            for (let j = 0; j < this.prev.width; ++j) {\r\n                this.vw[i][j] = (1 - friction) * this.vw[i][j]\r\n                + sensitivity * this.aw.reduce(((acc, a) =>\r\n                    acc + a[i][j]\r\n                ), 0) / count;\r\n            }\r\n            this.vb[i] = (1 - friction) * this.vb[i]\r\n            + sensitivity * this.ab.reduce(((acc, a) =>\r\n                acc + a[i]\r\n            ), 0) / count;\r\n            this.b[i] += this.vb[i];\r\n        }\r\n        this.w.add(this.vw);\r\n\r\n        this.prev.learn(sensitivity, friction);\r\n        this.aw = [];\r\n        this.ab = [];\r\n    }\r\n\r\n    reset(): void {\r\n        this._preAF = null;\r\n        this._value = null;\r\n        this.prev.reset();\r\n    }\r\n\r\n\r\n    protected abstract actValue(x: number): number;\r\n\r\n    protected abstract actDeriv(x: number): number;\r\n}\r\n\r\n\r\nabstract class HiddenLayer extends TrainableLayer {\r\n    weight(from: number, to: number): number {\r\n        return this.w.get(to, from);\r\n    }\r\n\r\n    bias(to: number): number {\r\n        return this.b[to];\r\n    }\r\n}\r\n\r\n\r\nabstract class OutputLayer extends TrainableLayer {\r\n    private _names: string[];\r\n    private _expec: number[];\r\n\r\n    constructor(prev: Layer, ...names: string[]) {\r\n        super(prev, names.length);\r\n        this._names = names;\r\n        this._expec = new Array(this.width).fill(0);\r\n    }\r\n\r\n    print(): string {\r\n        return this.w.rows().reduce(((acc, row, i) =>\r\n            acc + \"\\n\\t\" + row.join() + \"; \" + this.b[i]\r\n        ), \"[\") + \"\\n]\";\r\n    }\r\n\r\n    studyBindings(): void {\r\n        this.study(this.value().map((y, i) => this._expec[i] - y));\r\n    }\r\n\r\n    error(): number {\r\n        return this.value().reduce((err, y, i) => {\r\n            const d = this._expec[i] - y;\r\n            return err + d * d;\r\n        }, 0);\r\n    }\r\n\r\n    bind(binding: Map<string, number>) {\r\n        for (let i = 0; i < this.width; ++i) {\r\n            if (binding.has(this._names[i])) {\r\n                this._expec[i] = binding.get(this._names[i])!;\r\n            }\r\n        }\r\n    }\r\n\r\n    binding(): Map<string, number> {\r\n        const map = new Map<string, number>();\r\n        for (let i = 0; i < this.width; ++i) {\r\n            map.set(this._names[i], this._expec[i]);\r\n        }\r\n        return map;\r\n    }\r\n\r\n    output(): Map<string, number> {\r\n        const vals = this.value();\r\n        const map = new Map<string, number>();\r\n        for (let i = 0; i < this.width; ++i) {\r\n            map.set(this._names[i], vals[i]);\r\n        }\r\n        return map;\r\n    }\r\n\r\n    weight(from: number, to: string): number {\r\n        return this.w.get(this._names.indexOf(to), from);\r\n    }\r\n\r\n    bias(to: string): number {\r\n        return this.b[this._names.indexOf(to)];\r\n    }\r\n}\r\n\r\n\r\nexport default Layer;\r\nexport { InputLayer, HiddenLayer, OutputLayer };\r\n","import Layer, { InputLayer, HiddenLayer, OutputLayer } from \"./layers\";\r\n\r\ntype Input = Map<string, number>;\r\ntype Output = Map<string, number>;\r\ntype Sample = { input: Input; output: Output; };\r\n\r\nabstract class Network {\r\n    private _inputLayer: InputLayer;\r\n    private _hiddenLayers: HiddenLayer[];\r\n    private _outputLayer: OutputLayer;\r\n\r\n    protected studied: { sample: Sample, err: number }[];\r\n\r\n    protected abstract source(count: number): Sample[];\r\n    protected abstract hiddenSizes(): number[];\r\n    protected abstract makeHiddenLayer(prev: Layer, size: number): HiddenLayer;\r\n    protected abstract makeOutputLayer(\r\n        prev: Layer, ...names: string[]\r\n    ): OutputLayer;\r\n\r\n    constructor() {\r\n        this.studied = [];\r\n\r\n        const { input, output } = this.source(1)[0];\r\n        const inputNames: string[] = Array.from(input.keys());\r\n        const outputNames: string[] = Array.from(output.keys());\r\n\r\n        this._inputLayer = new InputLayer(...inputNames);\r\n        this._hiddenLayers = [];\r\n        let prev: Layer = this._inputLayer;\r\n        for (const size of this.hiddenSizes()) {\r\n            this._hiddenLayers.push(this.makeHiddenLayer(prev, size));\r\n            prev = this._hiddenLayers[this._hiddenLayers.length - 1];\r\n        }\r\n        this._outputLayer = this.makeOutputLayer(prev, ...outputNames);\r\n    }\r\n\r\n    print(): string {\r\n        return this._hiddenLayers.map(\r\n            (n) => n.print()\r\n        ).join(\"\\n\") + \"\\n\" + this._outputLayer.print();\r\n    }\r\n\r\n    inputLayer(): InputLayer { return this._inputLayer; }\r\n    hiddenLayer(i: number): HiddenLayer { return this._hiddenLayers[i]; }\r\n    outputLayer(): OutputLayer { return this._outputLayer; }\r\n\r\n    error(): number { return this._outputLayer.error(); }\r\n\r\n    avgErr(): number {\r\n        return this.studied.reduce(\r\n            (acc, study) => acc + study.err, 0\r\n        ) / this.studied.length;\r\n    }\r\n\r\n    bind(input: Input, output: Output | null = null) {\r\n        this.reset();\r\n        this._inputLayer.bind(input);\r\n        if (output !== null) { this._outputLayer.bind(output); }\r\n    }\r\n    output(input: Input | null = null): Map<string, number> {\r\n        if (input !== null) { this.bind(input) };\r\n        return this._outputLayer.output();\r\n    }\r\n\r\n    study(count: number) {\r\n        this.studied = this.source(count).map((sample) => {\r\n            this.bind(sample.input, sample.output);\r\n            this._outputLayer.studyBindings();\r\n            return { sample: sample, err: this._outputLayer.error() };\r\n        });\r\n    }\r\n    learn(sensitivity: number, friction: number) {\r\n        this._outputLayer.learn(sensitivity, friction);\r\n        // console.log(this.print());\r\n    }\r\n\r\n    reset() {\r\n        this._outputLayer.reset();\r\n    }\r\n}\r\n\r\n\r\nabstract class TestableNetwork extends Network {\r\n    protected abstract tests(): Sample[];\r\n\r\n    rsq(): number {\r\n        const tests = this.tests();\r\n        return tests.reduce((acc, { input, output }) => {\r\n            this.bind(input, output);\r\n            return acc + this.error();\r\n        }, 0) / tests.length;\r\n    }\r\n    r(): number {\r\n        return Math.sqrt(this.rsq());\r\n    }\r\n}\r\n\r\n\r\nexport default Network\r\nexport { TestableNetwork };\r\n","// Vanishing gradient countermeasures\r\nfunction positive(x: number): number {\r\n    return (isFinite(x) && x > 0) ? x : Number.MIN_VALUE;\r\n}\r\nfunction product(x: number, y: number): number {\r\n    const xy = x * y;\r\n    return (xy === 0) ? (Math.sign(x) * Math.sign(y) * Number.MIN_VALUE) : xy;\r\n}\r\n\r\nexport { positive, product };\r\n","import { positive } from \"./activations\";\r\nimport { HiddenLayer, OutputLayer } from \"./layers\";\r\n\r\n\r\nabstract class Logistic {\r\n    static value(x: number): number {\r\n        return positive(1 / (1 + Math.exp(-x)));\r\n    }\r\n\r\n    static deriv(x: number): number {\r\n        return positive(1 / (Math.exp(x) + 2 + Math.exp(-x)));\r\n    }\r\n}\r\n\r\n\r\nclass LogisticHiddenLayer extends HiddenLayer {\r\n    protected actValue(x: number): number {\r\n        return Logistic.value(x);\r\n    }\r\n\r\n    protected actDeriv(x: number): number {\r\n        return Logistic.deriv(x);\r\n    }\r\n}\r\n\r\nclass LogisticOutputLayer extends OutputLayer {\r\n    protected actValue(x: number): number {\r\n        return Logistic.value(x);\r\n    }\r\n\r\n    protected actDeriv(x: number): number {\r\n        return Logistic.deriv(x);\r\n    }\r\n}\r\n\r\n\r\nexport default Logistic;\r\nexport { LogisticHiddenLayer, LogisticOutputLayer };\r\n","import { positive } from \"./activations\";\r\nimport { HiddenLayer, OutputLayer } from \"./layers\";\r\n\r\n\r\nabstract class Softplus {\r\n    static value(x: number): number {\r\n        const y = 1 + Math.exp(x);\r\n        return isFinite(y) ? positive(Math.log(y)) : x;\r\n    }\r\n\r\n    static deriv(x: number): number {\r\n        return positive(1 / (1 + Math.exp(-x)));\r\n    }\r\n}\r\n\r\n\r\nclass SoftplusHiddenLayer extends HiddenLayer {\r\n    protected actValue(x: number): number {\r\n        return Softplus.value(x);\r\n    }\r\n\r\n    protected actDeriv(x: number): number {\r\n        return Softplus.deriv(x);\r\n    }\r\n}\r\n\r\nclass SoftplusOutputLayer extends OutputLayer {\r\n    protected actValue(x: number): number {\r\n        return Softplus.value(x);\r\n    }\r\n\r\n    protected actDeriv(x: number): number {\r\n        return Softplus.deriv(x);\r\n    }\r\n}\r\n\r\n\r\nexport default Softplus;\r\nexport { SoftplusHiddenLayer, SoftplusOutputLayer };\r\n","import * as Neural from \"../neural\";\r\n\r\nclass Network42 extends Neural.TestableNetwork {\r\n    protected source(count: number) {\r\n        this.studied.sort((a, b) => b.err - a.err);\r\n        let arr = this.studied.slice(0, count / 2).map(\r\n            (study) => study.sample\r\n        );\r\n        for (let i = arr.length; i < count; ++i) {\r\n            arr.push({\r\n                input: new Map<string, number>([['x', Math.random()]]),\r\n                output: new Map<string, number>([['y', 42]])\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n    protected hiddenSizes() { return []; }\r\n    protected makeHiddenLayer(prev: Neural.Layer, width: number) {\r\n        return new Neural.SoftplusHiddenLayer(prev, width);\r\n    }\r\n    protected makeOutputLayer(prev: Neural.Layer, ...names: string[]) {\r\n        return new Neural.SoftplusOutputLayer(prev, ...names);\r\n    }\r\n\r\n    private cachedTests = [\r\n        {\r\n            input: new Map<string, number>([['x', 0]]),\r\n            output: new Map<string, number>([['y', 42]])\r\n        },\r\n        {\r\n            input: new Map<string, number>([['x', 1]]),\r\n            output: new Map<string, number>([['y', 42]])\r\n        }\r\n    ];\r\n    protected tests() { return this.cachedTests; }\r\n\r\n    // Convenience Methods\r\n\r\n    m(): number {\r\n        return this.outputLayer().weight(0, 'y');\r\n    }\r\n    b(): number {\r\n        return this.outputLayer().bias('y');\r\n    }\r\n\r\n    value(x: number): number {\r\n        return this.output(new Map<string, number>([['x', x]])).get('y')!;\r\n    }\r\n}\r\n\r\nexport default Network42;\r\n","import React from \"react\";\r\nimport Asteria from \"../Asteria\";\r\nimport Network42 from \"./Network42\";\r\n\r\nconst m = 'm', b = 'b';\r\n\r\nclass Asteria42 extends Asteria {\r\n    private _net: Network42 | undefined = undefined;\r\n    protected net() {\r\n        if (!this._net) { this._net = new Network42(); }\r\n        return this._net!;\r\n    }\r\n\r\n    protected makeRowExtras() {\r\n        return new Map([\r\n            [m, this.net().m()],\r\n            [b, this.net().b()],\r\n        ]);\r\n    }\r\n\r\n    protected AboutContents() {\r\n        return (\r\n          <p>Asteria wants to learn the answer to life, the universe, and everything, but she needs your help!<br />\r\n          Asteria is the simplest possible neural network: a single input neuron linked to a single output neuron.<br />\r\n          The full equation for Asteria is y=ReLU(mx+b). Her initial state is y=ReLU(x), where m=1.<br />\r\n          Asteria will be trained to minimize R^2, the mean of (y-42)^2 over randomly-sampled values of x ranging from 0 to 1.</p>\r\n        )\r\n    }\r\n    protected TestingContents() {\r\n        return (\r\n          <p>Asteria should output 42 no matter what input we give her.</p>\r\n        )\r\n    }\r\n    protected TrainingContents() {\r\n        return (\r\n          <p>We want Asteria to reach y=42~ReLU(42), where m=0 and b~42.<br />\r\n            To adjust m and b, Asteria samples values of x between 0 to 1 and does fancy backpropagation.</p>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Asteria42;\r\n","import * as Neural from \"../neural\";\r\n\r\nclass NetworkNAND extends Neural.TestableNetwork {\r\n    protected source(count: number) {\r\n        this.studied.sort((a, b) => b.err - a.err);\r\n        const quarter = count / 4;\r\n        let arr = this.studied.slice(quarter, 2 * quarter).map(\r\n            (study) => study.sample\r\n        );\r\n        for (let i = arr.length; i < count; ++i) {\r\n            const x = Math.random();\r\n            const y = Math.random();\r\n            const xNANDy = (x > 0.5 && y > 0.5) ? 0 : 1;\r\n            arr.push({\r\n                input: new Map<string, number>([['x', x], ['y', y]]),\r\n                output: new Map<string, number>([[\"xNANDy\", xNANDy]])\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n    protected hiddenSizes() { return [2]; }\r\n    protected makeHiddenLayer(prev: Neural.Layer, width: number) {\r\n        return new Neural.LogisticHiddenLayer(prev, width);\r\n    }\r\n    protected makeOutputLayer(prev: Neural.Layer, ...names: string[]) {\r\n        return new Neural.LogisticOutputLayer(prev, ...names);\r\n    }\r\n\r\n    private cachedTests = (() => {\r\n        let tests = [];\r\n        for (let x = 0; x <= 1; x += 0.1) {\r\n            for (let y = 0; y <= 1; y += 0.1) {\r\n                const xNANDy = (x > 0.5 && y > 0.5) ? 0 : 1;\r\n                tests.push({\r\n                    input: new Map<string, number>([['x', x], ['y', y]]),\r\n                    output: new Map<string, number>([[\"xNANDy\", xNANDy]])\r\n                });\r\n            }\r\n        }\r\n        return tests;\r\n    })();\r\n    protected tests() { return this.cachedTests; }\r\n\r\n    // Convenience Methods\r\n\r\n    value(x: number, y: number): number {\r\n        return this.output(\r\n            new Map<string, number>([['x', x], ['y', y]])\r\n        ).get(\"xNANDy\")!;\r\n    }\r\n}\r\n\r\nexport default NetworkNAND;\r\n","import Asteria from \"../Asteria\";\r\nimport NetworkNAND from \"./NetworkNAND\";\r\n\r\nclass AsteriaNAND extends Asteria {\r\n    private _net: NetworkNAND | undefined = undefined;\r\n    protected net() {\r\n        if (!this._net) { this._net = new NetworkNAND(); }\r\n        return this._net!;\r\n    }\r\n}\r\n\r\nexport default AsteriaNAND;\r\n","import * as Neural from \"../neural\";\r\n\r\nclass NetworkXOR extends Neural.TestableNetwork {\r\n    protected source(count: number) {\r\n      this.studied.sort((a, b) => b.err - a.err);\r\n      const quarter = count / 4;\r\n      let arr = this.studied.slice(quarter, 2 * quarter).map(\r\n          (study) => study.sample\r\n      );\r\n      for (let i = 0; i < count; ++i) {\r\n            const x = Math.random();\r\n            const y = Math.random();\r\n            const xXORy = ((x > 0.5) === (y > 0.5)) ? 0 : 1;\r\n            arr.push({\r\n                input: new Map<string, number>([['x', x], ['y', y]]),\r\n                output: new Map<string, number>([[\"xXORy\", xXORy]])\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n    protected hiddenSizes() { return [2, 4, 4]; }\r\n    protected makeHiddenLayer(prev: Neural.Layer, width: number) {\r\n        return new Neural.LogisticHiddenLayer(prev, width);\r\n    }\r\n    protected makeOutputLayer(prev: Neural.Layer, ...names: string[]) {\r\n        return new Neural.LogisticOutputLayer(prev, ...names);\r\n    }\r\n\r\n    private cachedTests = (() => {\r\n        let tests = [];\r\n        for (let x = 0; x <= 1; x += 0.1) {\r\n            for (let y = 0; y <= 1; y += 0.1) {\r\n              const xXORy = ((x > 0.5) === (y > 0.5)) ? 0 : 1;\r\n                tests.push({\r\n                    input: new Map<string, number>([['x', x], ['y', y]]),\r\n                    output: new Map<string, number>([[\"xXORy\", xXORy]])\r\n                });\r\n            }\r\n        }\r\n        return tests;\r\n    })();\r\n    protected tests() { return this.cachedTests; }\r\n\r\n    // Convenience Methods\r\n\r\n    value(x: number, y: number): number {\r\n        return this.output(\r\n            new Map<string, number>([['x', x], ['y', y]])\r\n        ).get(\"xXORy\")!;\r\n    }\r\n}\r\n\r\nexport default NetworkXOR;\r\n","import Asteria from \"../Asteria\";\r\nimport NetworkXOR from \"./NetworkXOR\";\r\n\r\nclass AsteriaXOR extends Asteria {\r\n    private _net: NetworkXOR | undefined = undefined;\r\n    protected net() {\r\n        if (!this._net) { this._net = new NetworkXOR(); }\r\n        return this._net!;\r\n    }\r\n}\r\n\r\nexport default AsteriaXOR;\r\n","import React from \"react\";\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport Welcome from \"./Welcome\";\r\nimport Asteria42 from \"./asteria42/Asteria42\";\r\nimport AsteriaNAND from \"./asteriaNAND/AsteriaNAND\";\r\nimport AsteriaXOR from \"./asteriaXOR/AsteriaXOR\";\r\n\r\nconst asteria = \"/Asteria\"\r\n\r\nfunction App() {\r\n    return (\r\n      <Router>\r\n        <header>\r\n          <nav>\r\n            [<Link to={`${asteria}/42`}>42</Link>]\r\n            [<Link to={`${asteria}/NAND`}>NAND</Link>]\r\n            [<Link to={`${asteria}/XOR`}>XOR</Link>]\r\n          </nav>\r\n\t\t</header>\r\n        <Switch>\r\n          <Redirect exact from={asteria} to={`${asteria}/welcome`} />\r\n          <Route path={`${asteria}/welcome`}>\r\n            <Welcome />\r\n          </Route>\r\n          <Route path={`${asteria}/42`}>\r\n            <Asteria42 />\r\n          </Route>\r\n          <Route path={`${asteria}/NAND`}>\r\n            <AsteriaNAND />\r\n          </Route>\r\n          <Route path={`${asteria}/XOR`}>\r\n            <AsteriaXOR />\r\n          </Route>\r\n        </Switch>\r\n\t  </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport './stylesheets/index.css';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}